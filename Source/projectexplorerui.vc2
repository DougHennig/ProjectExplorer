*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="projectexplorerui.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS classproperties AS projectitemproperties OF "projectexplorerui.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="ctrParent" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblParentClass" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtParentClass" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblIncludeFile" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtIncludeFile" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblBaseClass" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtBaseClass" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblParentLibrary" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtParentLibrary" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="imgIcon" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="imgToolbarIcon" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblIcon" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblToolbarIcon" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkOLEPublic" UniqueID="" Timestamp="" />

	Height = 468
	Name = "classproperties"
	Width = 440
	cboColor.Left = 85
	cboColor.Name = "cboColor"
	cboColor.TabIndex = 30
	cboColor.Top = 405
	cboTags.cboCombo.Name = "cboCombo"
	cboTags.Left = 85
	cboTags.Name = "cboTags"
	cboTags.oImageList.Height = 100
	cboTags.oImageList.Left = 120
	cboTags.oImageList.Name = "oImageList"
	cboTags.oImageList.Top = 40
	cboTags.oImageList.Width = 100
	cboTags.oTree.Height = 174
	cboTags.oTree.Left = 5
	cboTags.oTree.Name = "oTree"
	cboTags.oTree.Top = 29
	cboTags.oTree.Width = 166
	cboTags.shpTreeView.Name = "shpTreeView"
	cboTags.TabIndex = 28
	cboTags.Top = 379
	chkExclude.Alignment = 0
	chkExclude.Name = "chkExclude"
	chkExclude.TabIndex = 7
	chkExclude.ZOrderSet = 9
	chkMainFile.Alignment = 0
	chkMainFile.Name = "chkMainFile"
	chkMainFile.TabIndex = 8
	cmdRevert.Left = 220
	cmdRevert.Name = "cmdRevert"
	cmdRevert.TabIndex = 21
	cmdRevert.Top = 441
	cmdSave.Left = 135
	cmdSave.Name = "cmdSave"
	cmdSave.TabIndex = 17
	cmdSave.Top = 441
	edtDescription.Left = 85
	edtDescription.Name = "edtDescription"
	edtDescription.TabIndex = 24
	edtDescription.Top = 245
	edtDescription.ZOrderSet = 7
	edtUser.Left = 85
	edtUser.Name = "edtUser"
	edtUser.TabIndex = 26
	edtUser.Top = 312
	lblColor.Left = 0
	lblColor.Name = "lblColor"
	lblColor.TabIndex = 29
	lblColor.Top = 409
	lblDescription.Left = 0
	lblDescription.Name = "lblDescription"
	lblDescription.TabIndex = 23
	lblDescription.Top = 248
	lblDescription.ZOrderSet = 8
	lblLastModified.Name = "lblLastModified"
	lblLastModified.TabIndex = 5
	lblLastModified.Top = 52
	lblLastModified.ZOrderSet = 10
	lblname.Name = "lblname"
	lblname.TabIndex = 1
	lblname.ZOrderSet = 4
	lblPath.Name = "lblPath"
	lblPath.TabIndex = 3
	lblPath.ZOrderSet = 6
	lblTags.Left = 0
	lblTags.Name = "lblTags"
	lblTags.TabIndex = 27
	lblTags.Top = 383
	lblTags.ZOrderSet = 2
	lblUser.Left = 0
	lblUser.Name = "lblUser"
	lblUser.TabIndex = 25
	lblUser.Top = 315
	txtLastModified.Name = "txtLastModified"
	txtLastModified.TabIndex = 6
	txtLastModified.Top = 50
	txtLastModified.ZOrderSet = 11
	txtName.Name = "txtName"
	txtName.TabIndex = 2
	txtName.ZOrderSet = 3
	txtPath.Name = "txtPath"
	txtPath.TabIndex = 4
	txtPath.Width = 355
	txtPath.ZOrderSet = 5

	ADD OBJECT 'chkOLEPublic' AS projectexplorercheckbox WITH ;
		Alignment = 0, ;
		Caption = "OLEPublic", ;
		Enabled = .F., ;
		Left = 85, ;
		Name = "chkOLEPublic", ;
		TabIndex = 9, ;
		Top = 223
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="checkbox" />

	ADD OBJECT 'ctrParent' AS projectexplorerlabelledbox WITH ;
		Anchor = 10, ;
		Height = 111, ;
		Left = 0, ;
		Name = "ctrParent", ;
		TabIndex = 10, ;
		Top = 74, ;
		Width = 440, ;
		ZOrderSet = 0, ;
		lblLabel.Caption = " Parent ", ;
		lblLabel.Name = "lblLabel", ;
		shpBox.Height = 105, ;
		shpBox.Name = "shpBox", ;
		shpBox.Width = 440
		*< END OBJECT: ClassLib="projectexplorerlabelledbox.vcx" BaseClass="container" />

	ADD OBJECT 'imgIcon' AS projectexplorerimage WITH ;
		Height = 16, ;
		Left = 215, ;
		Name = "imgIcon", ;
		Top = 223, ;
		Width = 16, ;
		ZOrderSet = 19
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="image" />

	ADD OBJECT 'imgToolbarIcon' AS projectexplorerimage WITH ;
		Height = 17, ;
		Left = 365, ;
		Name = "imgToolbarIcon", ;
		Top = 223, ;
		Width = 16, ;
		ZOrderSet = 19
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="image" />

	ADD OBJECT 'lblBaseClass' AS projectexplorerlabel WITH ;
		Caption = "Base class", ;
		Left = 10, ;
		Name = "lblBaseClass", ;
		TabIndex = 15, ;
		Top = 153, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'lblIcon' AS projectexplorerlabel WITH ;
		Caption = "Icon:", ;
		Left = 180, ;
		Name = "lblIcon", ;
		TabIndex = 20, ;
		Top = 223, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'lblIncludeFile' AS projectexplorerlabel WITH ;
		Caption = "Include file", ;
		Left = 0, ;
		Name = "lblIncludeFile", ;
		TabIndex = 19, ;
		Top = 198, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'lblParentClass' AS projectexplorerlabel WITH ;
		Caption = "Class", ;
		Left = 10, ;
		Name = "lblParentClass", ;
		TabIndex = 11, ;
		Top = 103, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'lblParentLibrary' AS projectexplorerlabel WITH ;
		Caption = "Library", ;
		Left = 10, ;
		Name = "lblParentLibrary", ;
		TabIndex = 13, ;
		Top = 128, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'lblToolbarIcon' AS projectexplorerlabel WITH ;
		Caption = "Toolbar icon:", ;
		Left = 280, ;
		Name = "lblToolbarIcon", ;
		TabIndex = 18, ;
		Top = 223, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'txtBaseClass' AS projectexplorertextbox WITH ;
		Anchor = 10, ;
		Height = 22, ;
		Left = 85, ;
		Name = "txtBaseClass", ;
		ReadOnly = .T., ;
		TabIndex = 16, ;
		Top = 150, ;
		Width = 345, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtIncludeFile' AS projectexplorertextbox WITH ;
		Anchor = 10, ;
		Height = 22, ;
		Left = 85, ;
		Name = "txtIncludeFile", ;
		ReadOnly = .T., ;
		TabIndex = 22, ;
		Top = 195, ;
		Width = 355, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtParentClass' AS projectexplorertextbox WITH ;
		Anchor = 10, ;
		Height = 22, ;
		Left = 85, ;
		Name = "txtParentClass", ;
		ReadOnly = .T., ;
		TabIndex = 12, ;
		Top = 100, ;
		Width = 345, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtParentLibrary' AS projectexplorertextbox WITH ;
		Anchor = 10, ;
		Height = 22, ;
		Left = 85, ;
		Name = "txtParentLibrary", ;
		ReadOnly = .T., ;
		TabIndex = 14, ;
		Top = 125, ;
		Width = 345, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />
	
	PROCEDURE Refresh
		if vartype(Thisform.oItem) = 'O'
			This.imgIcon.Picture        = fullpath(Thisform.oItem.Icon, ;
				Thisform.oItem.Path)
			This.imgToolbarIcon.Picture = fullpath(Thisform.oItem.ToolbarIcon, ;
				Thisform.oItem.Path)
		else
			store '' to This.imgIcon.Picture, This.imgToolbarIcon.Picture
		endif vartype(Thisform.oItem) = 'O'
		
	ENDPROC

	PROCEDURE chkOLEPublic.Refresh
		if vartype(Thisform.oItem) = 'O'
			This.Value = Thisform.oItem.OLEPublic
		else
			This.Value = .F.
		endif vartype(Thisform.oItem) = 'O'
		
	ENDPROC

	PROCEDURE lblIncludeFile.Click
		if This.FontUnderline
			Thisform.SelectNodeForFile(Thisform.oItem.IncludeFile)
		endif This.FontUnderline
		
	ENDPROC

	PROCEDURE lblIncludeFile.Refresh
		if vartype(Thisform.oItem) = 'O' and ;
			not empty(Thisform.oItem.IncludeFile) and ;
			vartype(Thisform.oProject.GetItemForFile(Thisform.oItem.IncludeFile)) = 'O'
			This.ForeColor     = rgb(0, 0, 255)
			This.FontUnderline = .T.
			This.MousePointer  = 15
		else
			This.ForeColor     = rgb(0, 0, 0)
			This.FontUnderline = .F.
			This.MousePointer  = 0
		endif vartype(Thisform.oItem) = 'O' ...
		
	ENDPROC

	PROCEDURE lblParentClass.Click
		if This.FontUnderline
			Thisform.SelectNodeForFile(Thisform.oItem.ItemParentLibrary, ;
				Thisform.oItem.ItemParentClass)
		endif This.FontUnderline
		
	ENDPROC

	PROCEDURE lblParentClass.Refresh
		if vartype(Thisform.oItem) = 'O' and ;
			not empty(Thisform.oItem.ItemParentLibrary)
			This.ForeColor     = rgb(0, 0, 255)
			This.FontUnderline = .T.
			This.MousePointer  = 15
		else
			This.ForeColor     = rgb(0, 0, 0)
			This.FontUnderline = .F.
			This.MousePointer  = 0
		endif vartype(Thisform.oItem) = 'O' ...
		
	ENDPROC

	PROCEDURE lblParentLibrary.Click
		if This.FontUnderline
			Thisform.SelectNodeForFile(Thisform.oItem.ItemParentLibrary)
		endif This.FontUnderline
		
	ENDPROC

	PROCEDURE lblParentLibrary.Refresh
		if vartype(Thisform.oItem) = 'O' and ;
			not empty(Thisform.oItem.ItemParentLibrary)
			This.ForeColor     = rgb(0, 0, 255)
			This.FontUnderline = .T.
			This.MousePointer  = 15
		else
			This.ForeColor     = rgb(0, 0, 0)
			This.FontUnderline = .F.
			This.MousePointer  = 0
		endif vartype(Thisform.oItem) = 'O' ...
		
	ENDPROC

	PROCEDURE txtBaseClass.Refresh
		if vartype(Thisform.oItem) = 'O'
			This.Value = Thisform.oItem.ItemBaseClass
		else
			This.Value = ''
		endif vartype(Thisform.oItem) = 'O'
		
	ENDPROC

	PROCEDURE txtIncludeFile.Refresh
		if vartype(Thisform.oItem) = 'O'
			This.Value = iif(Thisform.lDisplayFullPath, Thisform.oItem.IncludeFile, ;
				GetRelativePath(Thisform.oItem.IncludeFile, Thisform.oProject.cProject))
		else
			This.Value = ''
		endif vartype(Thisform.oItem) = 'O'
		try
			This.ToolTipText = displaypath(This.Value, 127)
		catch
		endtry
		
	ENDPROC

	PROCEDURE txtParentClass.Refresh
		if vartype(Thisform.oItem) = 'O'
			This.Value = Thisform.oItem.ItemParentClass
		else
			This.Value = ''
		endif vartype(Thisform.oItem) = 'O'
		
	ENDPROC

	PROCEDURE txtParentLibrary.Refresh
		with Thisform
			if vartype(.oItem) = 'O'
				This.Value = iif(.lDisplayFullPath, .oItem.ItemParentLibrary, ;
					GetRelativePath(.oItem.ItemParentLibrary, .oProject.cProject))
			else
				This.Value = ''
			endif vartype(.oItem) = 'O'
		endwith
		try
			This.ToolTipText = displaypath(This.Value, 127)
		catch
		endtry
		
	ENDPROC

ENDDEFINE

DEFINE CLASS commitmessage AS projectexplorermodaldialog OF "projectexplorerctrls.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="edtMessage" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: cmessage		&& The commit message
	*</DefinedPropArrayMethod>

	Caption = "Commit Message"
	cmessage = 		&& The commit message
	DoCreate = .T.
	Height = 169
	Name = "commitmessage"
	Width = 375
	_memberdata = <VFPData>
		<memberdata name="cmessage" display="cMessage"/>
		</VFPData>

	ADD OBJECT 'cmdCancel' AS projectexplorercancelbutton WITH ;
		Anchor = 36, ;
		Left = 189, ;
		Name = "cmdCancel", ;
		Top = 135
		*< END OBJECT: ClassLib="projectexplorerbutton.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS projectexplorerokbutton WITH ;
		Anchor = 132, ;
		Left = 102, ;
		Name = "cmdOK", ;
		Top = 135
		*< END OBJECT: ClassLib="projectexplorerbutton.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'edtMessage' AS projectexplorereditbox WITH ;
		ControlSource = "Thisform.cMessage", ;
		Height = 120, ;
		Left = 10, ;
		Name = "edtMessage", ;
		Top = 10, ;
		Width = 355
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="editbox" />
	
	PROCEDURE cmdOK.Refresh
		This.Enabled = not empty(Thisform.edtMessage.Value)
		
	ENDPROC

	PROCEDURE edtMessage.anychange
		Thisform.cmdOK.Refresh()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS formproperties AS projectitemproperties OF "projectexplorerui.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblIncludeFile" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtIncludeFile" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblClass" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtClass" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblLibrary" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtLibrary" UniqueID="" Timestamp="" />

	Height = 370
	Name = "formproperties"
	Width = 440
	cboColor.Left = 85
	cboColor.Name = "cboColor"
	cboColor.TabIndex = 22
	cboColor.Top = 310
	cboTags.cboCombo.Name = "cboCombo"
	cboTags.Left = 85
	cboTags.Name = "cboTags"
	cboTags.oImageList.Height = 100
	cboTags.oImageList.Left = 120
	cboTags.oImageList.Name = "oImageList"
	cboTags.oImageList.Top = 40
	cboTags.oImageList.Width = 100
	cboTags.oTree.Height = 174
	cboTags.oTree.Left = 5
	cboTags.oTree.Name = "oTree"
	cboTags.oTree.Top = 29
	cboTags.oTree.Width = 166
	cboTags.shpTreeView.Name = "shpTreeView"
	cboTags.TabIndex = 20
	cboTags.Top = 284
	chkExclude.Alignment = 0
	chkExclude.Name = "chkExclude"
	chkExclude.TabIndex = 7
	chkMainFile.Alignment = 0
	chkMainFile.Name = "chkMainFile"
	chkMainFile.TabIndex = 8
	cmdRevert.Left = 220
	cmdRevert.Name = "cmdRevert"
	cmdRevert.TabIndex = 24
	cmdRevert.Top = 343
	cmdSave.Left = 135
	cmdSave.Name = "cmdSave"
	cmdSave.TabIndex = 23
	cmdSave.Top = 343
	edtDescription.Left = 85
	edtDescription.Name = "edtDescription"
	edtDescription.TabIndex = 16
	edtDescription.Top = 150
	edtUser.Left = 85
	edtUser.Name = "edtUser"
	edtUser.TabIndex = 18
	edtUser.Top = 217
	lblColor.Left = 0
	lblColor.Name = "lblColor"
	lblColor.TabIndex = 21
	lblColor.Top = 314
	lblDescription.Left = 0
	lblDescription.Name = "lblDescription"
	lblDescription.TabIndex = 15
	lblDescription.Top = 153
	lblLastModified.Name = "lblLastModified"
	lblLastModified.TabIndex = 5
	lblname.Name = "lblname"
	lblname.TabIndex = 1
	lblPath.Name = "lblPath"
	lblPath.TabIndex = 3
	lblTags.Left = 0
	lblTags.Name = "lblTags"
	lblTags.TabIndex = 19
	lblTags.Top = 288
	lblUser.Left = 0
	lblUser.Name = "lblUser"
	lblUser.TabIndex = 17
	lblUser.Top = 220
	txtLastModified.Name = "txtLastModified"
	txtLastModified.TabIndex = 6
	txtName.Name = "txtName"
	txtName.TabIndex = 2
	txtPath.Name = "txtPath"
	txtPath.TabIndex = 4

	ADD OBJECT 'lblClass' AS projectexplorerlabel WITH ;
		Caption = "Class", ;
		Left = 0, ;
		Name = "lblClass", ;
		TabIndex = 9, ;
		Top = 78
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'lblIncludeFile' AS projectexplorerlabel WITH ;
		Caption = "Include file", ;
		Left = 0, ;
		Name = "lblIncludeFile", ;
		TabIndex = 13, ;
		Top = 128, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'lblLibrary' AS projectexplorerlabel WITH ;
		Caption = "Library", ;
		Left = 0, ;
		Name = "lblLibrary", ;
		TabIndex = 11, ;
		Top = 103
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'txtClass' AS projectexplorertextbox WITH ;
		Anchor = 10, ;
		Height = 22, ;
		Left = 85, ;
		Name = "txtClass", ;
		ReadOnly = .T., ;
		TabIndex = 10, ;
		Top = 75, ;
		Width = 355
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtIncludeFile' AS projectexplorertextbox WITH ;
		Anchor = 10, ;
		Height = 22, ;
		Left = 85, ;
		Name = "txtIncludeFile", ;
		ReadOnly = .T., ;
		TabIndex = 14, ;
		Top = 125, ;
		Width = 355, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtLibrary' AS projectexplorertextbox WITH ;
		Anchor = 10, ;
		Height = 22, ;
		Left = 85, ;
		Name = "txtLibrary", ;
		ReadOnly = .T., ;
		TabIndex = 12, ;
		Top = 100, ;
		Width = 355
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />
	
	PROCEDURE lblClass.Click
		if This.FontUnderline
			Thisform.SelectNodeForFile(Thisform.oItem.ItemLibrary, ;
				Thisform.oItem.ItemClass)
		endif This.FontUnderline
		
	ENDPROC

	PROCEDURE lblClass.Refresh
		if vartype(Thisform.oItem) = 'O' and ;
			not empty(Thisform.oItem.ItemLibrary)
			This.ForeColor     = rgb(0, 0, 255)
			This.FontUnderline = .T.
			This.MousePointer  = 15
		else
			This.ForeColor     = rgb(0, 0, 0)
			This.FontUnderline = .F.
			This.MousePointer  = 0
		endif vartype(Thisform.oItem) = 'O' ...
		
	ENDPROC

	PROCEDURE lblIncludeFile.Click
		if This.FontUnderline
			Thisform.SelectNodeForFile(Thisform.oItem.IncludeFile)
		endif This.FontUnderline
		
	ENDPROC

	PROCEDURE lblIncludeFile.Refresh
		if vartype(Thisform.oItem) = 'O' and ;
			not empty(Thisform.oItem.IncludeFile) and ;
			vartype(Thisform.oProject.GetItemForFile(Thisform.oItem.IncludeFile)) = 'O'
			This.ForeColor     = rgb(0, 0, 255)
			This.FontUnderline = .T.
			This.MousePointer  = 15
		else
			This.ForeColor     = rgb(0, 0, 0)
			This.FontUnderline = .F.
			This.MousePointer  = 0
		endif vartype(Thisform.oItem) = 'O' ...
		
	ENDPROC

	PROCEDURE lblLibrary.Click
		if This.FontUnderline
			Thisform.SelectNodeForFile(Thisform.oItem.ItemLibrary)
		endif This.FontUnderline
		
	ENDPROC

	PROCEDURE lblLibrary.Refresh
		if vartype(Thisform.oItem) = 'O' and ;
			not empty(Thisform.oItem.ItemLibrary)
			This.ForeColor     = rgb(0, 0, 255)
			This.FontUnderline = .T.
			This.MousePointer  = 15
		else
			This.ForeColor     = rgb(0, 0, 0)
			This.FontUnderline = .F.
			This.MousePointer  = 0
		endif vartype(Thisform.oItem) = 'O' ...
		
	ENDPROC

	PROCEDURE txtClass.Refresh
		if vartype(Thisform.oItem) = 'O'
			This.Value = Thisform.oItem.ItemClass
		else
			This.Value = ''
		endif vartype(Thisform.oItem) = 'O'
		
	ENDPROC

	PROCEDURE txtIncludeFile.Refresh
		if vartype(Thisform.oItem) = 'O'
			This.Value = iif(Thisform.lDisplayFullPath, Thisform.oItem.IncludeFile, ;
				GetRelativePath(Thisform.oItem.IncludeFile, Thisform.oProject.cProject))
		else
			This.Value = ''
		endif vartype(Thisform.oItem) = 'O'
		try
			This.ToolTipText = displaypath(This.Value, 127)
		catch
		endtry
		
	ENDPROC

	PROCEDURE txtLibrary.Refresh
		if vartype(Thisform.oItem) = 'O'
			This.Value = iif(Thisform.lDisplayFullPath, Thisform.oItem.ItemLibrary, ;
				GetRelativePath(Thisform.oItem.ItemLibrary, Thisform.oProject.cProject))
		else
			This.Value = ''
		endif vartype(Thisform.oItem) = 'O'
		try
			This.ToolTipText = displaypath(This.Value, 127)
		catch
		endtry
		
	ENDPROC

ENDDEFINE

DEFINE CLASS projectexplorerassigntag AS projectexplorermodaldialog OF "projectexplorerctrls.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cntFilter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblProperties" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtFilter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboProperties" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdInsert" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblTags" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboTags" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblInfo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdGetExpr" UniqueID="" Timestamp="" />

	#INCLUDE "projectexplorer.h"
	*<DefinedPropArrayMethod>
		*p: cfilter		&& The filter for items
		*p: ctags		&& The tags to assign to items
	*</DefinedPropArrayMethod>

	Caption = "Assign Tags to Items"
	cfilter = 		&& The filter for items
	ctags = 		&& The tags to assign to items
	DoCreate = .T.
	Height = 265
	Name = "projectexplorerassigntag"
	Width = 365
	_memberdata = <VFPData>
		<memberdata name="cfilter" display="cFilter"/>
		<memberdata name="ctags" display="cTags"/>
		</VFPData>

	ADD OBJECT 'cboProperties' AS projectexplorercombobox WITH ;
		Height = 24, ;
		Left = 90, ;
		Name = "cboProperties", ;
		StatusBarText = "This displays the properties of an item object you can filter on", ;
		TabIndex = 8, ;
		ToolTipText = "This displays the properties of an item object you can filter on", ;
		Top = 184, ;
		Value = , ;
		Width = 165, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboTags' AS projectexplorercombotree WITH ;
		Anchor = 10, ;
		Height = 24, ;
		lbindtoformanychange = .T., ;
		Left = 50, ;
		Name = "cboTags", ;
		TabIndex = 2, ;
		Top = 10, ;
		Width = 305, ;
		ZOrderSet = 7, ;
		cboCombo.Name = "cboCombo", ;
		cboCombo.Value = All, ;
		oImageList.Height = 100, ;
		oImageList.Left = 120, ;
		oImageList.Name = "oImageList", ;
		oImageList.Top = 40, ;
		oImageList.Width = 100, ;
		oTree.Height = 174, ;
		oTree.Left = 5, ;
		oTree.Name = "oTree", ;
		oTree.Top = 29, ;
		oTree.Width = 166, ;
		shpTreeView.Name = "shpTreeView"
		*< END OBJECT: ClassLib="projectexplorercombotree.vcx" BaseClass="container" />

	ADD OBJECT 'cmdCancel' AS projectexplorercancelbutton WITH ;
		Left = 183, ;
		Name = "cmdCancel", ;
		TabIndex = 11, ;
		Top = 230, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="projectexplorerbutton.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdGetExpr' AS projectexplorercommandbutton WITH ;
		Caption = "...", ;
		Height = 22, ;
		Left = 325, ;
		Name = "cmdGetExpr", ;
		StatusBarText = "Display the Expression Builder", ;
		TabIndex = 6, ;
		ToolTipText = "Display the Expression Builder", ;
		Top = 100, ;
		Width = 22
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdInsert' AS projectexplorercommandbutton WITH ;
		Caption = "Insert", ;
		Left = 260, ;
		Name = "cmdInsert", ;
		StatusBarText = "Inserts the selected property into the filter expression", ;
		TabIndex = 9, ;
		ToolTipText = "Inserts the selected property into the filter expression", ;
		Top = 183, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS projectexplorerokbutton WITH ;
		Left = 98, ;
		Name = "cmdOK", ;
		TabIndex = 10, ;
		Top = 230, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="projectexplorerbutton.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cntFilter' AS projectexplorerlabelledbox WITH ;
		Height = 150, ;
		Left = 10, ;
		Name = "cntFilter", ;
		TabIndex = 4, ;
		Top = 73, ;
		Width = 345, ;
		ZOrderSet = 0, ;
		lblLabel.Caption = " Filter ", ;
		lblLabel.Name = "lblLabel", ;
		shpBox.Height = 144, ;
		shpBox.Name = "shpBox", ;
		shpBox.Width = 345
		*< END OBJECT: ClassLib="projectexplorerlabelledbox.vcx" BaseClass="container" />

	ADD OBJECT 'edtFilter' AS projectexplorereditbox WITH ;
		ControlSource = "Thisform.cFilter", ;
		czoomformcaption = Filter Expression, ;
		Height = 78, ;
		IntegralHeight = .F., ;
		lcanzoom = .T., ;
		Left = 25, ;
		Name = "edtFilter", ;
		StatusBarText = 'The item filter; use "Item" as a placeholder for the item being checked', ;
		TabIndex = 5, ;
		ToolTipText = 'The item filter; use "Item" as a placeholder for the item being checked', ;
		Top = 98, ;
		Width = 295, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="editbox" />

	ADD OBJECT 'lblInfo' AS projectexplorerlabel WITH ;
		Caption = "Specify the filter for the items to assign tags to:", ;
		Left = 10, ;
		Name = "lblInfo", ;
		TabIndex = 3, ;
		Top = 53, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'lblProperties' AS projectexplorerlabel WITH ;
		Caption = "Properties", ;
		Left = 25, ;
		Name = "lblProperties", ;
		TabIndex = 7, ;
		Top = 188, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'lblTags' AS projectexplorerlabel WITH ;
		Caption = "\<Tags", ;
		Left = 10, ;
		Name = "lblTags", ;
		TabIndex = 1, ;
		Top = 14, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />
	
	PROCEDURE cboProperties.Init
		* Get a list of properties for ProjectItem objects.
		
		local loItem, ;
			laProperties[1], ;
			lnProperties, ;
			lnI, ;
			lcProperty, ;
			lcData
		loItem = newobject('ProjectItem', fullpath('ProjectExplorerItems.vcx', ;
			This.ClassLibrary))
		lnProperties = amembers(laProperties, loItem, 0, 'U')
		for lnI = lnProperties to 1 step -1
			lcProperty = laProperties[lnI]
			if inlist(lcProperty, 'BUILDER', 'CERRORMESSAGE', 'LERROROCCURRED', ;
				'LNOTIFYONFORMCHANGE', 'LRELEASE', 'OEXCEPTION', '_MEMBERDATA', ;
				'CLASSCHANGED', 'KEY', 'ORIGINALDESCRIPTION', 'ORIGINALUSER', ;
				'PARENTITEM')
				adel(laProperties, lnI)
				lnProperties = lnProperties - 1
				dimension laProperties[lnProperties]
			else
				lcData = strextract(loItem._MemberData, 'memberdata name="' + ;
					lower(lcProperty) + '"', '/>')
				laProperties[lnI] = 'Item.' + strextract(lcData, 'display="', '"')
			endif inlist(lcProperty ...
		next lnI
		acopy(laProperties, This.aItems)
		dodefault()
		 
	ENDPROC

	PROCEDURE cboTags.itemselected
		* Concatenate all selected items into a comma-delimited list.
		
		local lcTags, ;
			lnI, ;
			loNode
		lcTags = ''
		with This.oTree
			for lnI = 1 to .Nodes.Count
				loNode = .Nodes(lnI)
				if loNode.Checked
					lcTags = lcTags + loNode.Text + ccCRLF
				endif loNode.Checked
			next lnI
		endwith
		store lcTags to This.Value, Thisform.cTags
		Thisform.cmdOK.Refresh()
		
	ENDPROC

	PROCEDURE cboTags.loadtree
		local lcTags, ;
			lnSelect, ;
			lcTag, ;
			loNode
		with This
			.oTree.Nodes.Clear()
			.oTree.Checkboxes = .T.
			.oTree.Sorted     = .T.
			lnSelect = select()
			select ProjectExplorerTags
			scan
				lcTag  = trim(NAME)
				loNode = .oTree.Nodes.Add(, 1, lcTag, lcTag)
				if lcTag + ccCRLF $ Thisform.cTags
					loNode.Checked = .T.
				endif lcTag + ccCRLF $ Thisform.cTags
			endscan
			select (lnSelect)
		endwith
		
	ENDPROC

	PROCEDURE cboTags.opencontrol
		* Load the TreeView when we're opened.
		
		This.LoadTree()
		dodefault()
		
	ENDPROC

	PROCEDURE cmdGetExpr.Click
		local lcExpr
		private loItem
		loItem = newobject('ProjectItem', fullpath('ProjectExplorerItems.vcx', ;
			This.ClassLibrary))
		lcExpr = This.Parent.edtFilter.Value
		getexpr 'Filter Expression' to lcExpr type 'C' default lcExpr
		This.Parent.edtFilter.Value = lcExpr
		
	ENDPROC

	PROCEDURE cmdInsert.Click
		local lnSelStart, ;
			lnSelLength, ;
			lcSelText, ;
			lcValue
		
		* Get the property name to insert.
		
		lcString = Thisform.cboProperties.Value
		with Thisform.edtFilter
		
		* Get the selection.
		
			lnSelStart  = .SelStart
			lnSelLength = .SelLength
			lcSelText   = .SelText
			lcValue     = .Value
		
		* Handle the expression being empty or completely selected (that is, the user
		* is replacing it).
		
			if empty(lcSelText)
				lcValue = left(lcValue, lnSelStart) + lcString + ;
					substr(lcValue, lnSelStart + lnSelLength + 1)
				lnPos = lnSelStart + len(lcString)
			else
				lcValue = left(lcValue, lnSelStart) + lcString + ;
					substr(.Value, lnSelStart + lnSelLength + 1)
				lnPos = lnSelStart + len(lcString)
			endif empty(.SelText)
			.Value = lcValue
			.SetFocus()
			.SelStart  = lnPos
			.SelLength = 0
		endwith
		
	ENDPROC

	PROCEDURE cmdOK.Refresh
		This.Enabled = not empty(Thisform.cFilter) and not empty(Thisform.cTags)
		
	ENDPROC

	PROCEDURE edtFilter.anychange
		Thisform.cmdOK.Refresh()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS projectexplorerbuildoptions AS projectexplorermodaldialog OF "projectexplorerctrls.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cntBuildAction" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="opgBuildAction" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntOptions" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkRecompile" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkDisplayErrors" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkRunAfterBuild" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkRegenerate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntFile" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: coutputfile		&& The name and path of the file to create
		*p: ldisplayerrors		&& .T. to display errors
		*p: lrecompile		&& .T. to recompile all files
		*p: lregenerate		&& .T. to regenerate component IDs
		*p: lrunafterbuild		&& .T. to run after build
		*p: nbuildaction		&& The build action
	*</DefinedPropArrayMethod>

	Caption = "Build Options"
	coutputfile = 		&& The name and path of the file to create
	DoCreate = .T.
	Height = 298
	ldisplayerrors = .F.		&& .T. to display errors
	lrecompile = .F.		&& .T. to recompile all files
	lregenerate = .F.		&& .T. to regenerate component IDs
	lrunafterbuild = .F.		&& .T. to run after build
	Name = "projectexplorerbuildoptions"
	nbuildaction = 1		&& The build action
	Width = 379
	_memberdata = <VFPData>
		<memberdata name="nbuildaction" display="nBuildAction"/>
		<memberdata name="lrecompile" display="lRecompile"/>
		<memberdata name="ldisplayerrors" display="lDisplayErrors"/>
		<memberdata name="lrunafterbuild" display="lRunAfterBuild"/>
		<memberdata name="lregenerate" display="lRegenerate"/>
		<memberdata name="coutputfile" display="cOutputFile"/>
		</VFPData>

	ADD OBJECT 'chkDisplayErrors' AS projectexplorercheckbox WITH ;
		Alignment = 0, ;
		Caption = "\<Display errors", ;
		ControlSource = "Thisform.lDisplayErrors", ;
		Left = 30, ;
		Name = "chkDisplayErrors", ;
		TabIndex = 5, ;
		Top = 185
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkRecompile' AS projectexplorercheckbox WITH ;
		Alignment = 0, ;
		Caption = "Re\<compile all files", ;
		ControlSource = "Thisform.lRecompile", ;
		Left = 30, ;
		Name = "chkRecompile", ;
		TabIndex = 4, ;
		Top = 165
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkRegenerate' AS projectexplorercheckbox WITH ;
		Alignment = 0, ;
		Caption = "Re\<generate component IDs", ;
		ControlSource = "Thisform.lRegenerate", ;
		Left = 30, ;
		Name = "chkRegenerate", ;
		TabIndex = 7, ;
		Top = 225
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkRunAfterBuild' AS projectexplorercheckbox WITH ;
		Alignment = 0, ;
		Caption = "R\<un after build", ;
		ControlSource = "Thisform.lRunAfterBuild", ;
		Left = 30, ;
		Name = "chkRunAfterBuild", ;
		TabIndex = 6, ;
		Top = 205
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdCancel' AS projectexplorercancelbutton WITH ;
		Left = 290, ;
		Name = "cmdCancel", ;
		TabIndex = 10, ;
		Top = 45
		*< END OBJECT: ClassLib="projectexplorerbutton.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS projectexplorerokbutton WITH ;
		Caption = "OK", ;
		Left = 290, ;
		Name = "cmdOK", ;
		TabIndex = 9, ;
		Top = 15
		*< END OBJECT: ClassLib="projectexplorerbutton.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cntBuildAction' AS projectexplorerlabelledbox WITH ;
		Height = 125, ;
		Left = 10, ;
		Name = "cntBuildAction", ;
		TabIndex = 1, ;
		Top = 10, ;
		Width = 270, ;
		ZOrderSet = 0, ;
		lblLabel.Caption = " Build Action ", ;
		lblLabel.Name = "lblLabel", ;
		shpBox.Height = 119, ;
		shpBox.Name = "shpBox", ;
		shpBox.Width = 270
		*< END OBJECT: ClassLib="projectexplorerlabelledbox.vcx" BaseClass="container" />

	ADD OBJECT 'cntFile' AS projectexplorerfile WITH ;
		ccontrolsource = Thisform.cOutputFile, ;
		cextensions = icase(Thisform.nBuildAction = 2, 'Visual FoxPro Application (*.app), *.app', Thisform.nBuildAction = 3, 'Application (*.exe), *.exe', 'DLL, *.dll'), ;
		Height = 23, ;
		Left = 10, ;
		Name = "cntFile", ;
		TabIndex = 8, ;
		Top = 265, ;
		Width = 360, ;
		cmdGetFile.Left = 337, ;
		cmdGetFile.Name = "cmdGetFile", ;
		lblFile.Name = "lblFile", ;
		txtFile.Name = "txtFile", ;
		txtFile.Width = 307
		*< END OBJECT: ClassLib="projectexplorerfilectrls.vcx" BaseClass="container" />

	ADD OBJECT 'cntOptions' AS projectexplorerlabelledbox WITH ;
		Height = 110, ;
		Left = 10, ;
		Name = "cntOptions", ;
		TabIndex = 3, ;
		Top = 145, ;
		Width = 270, ;
		ZOrderSet = 0, ;
		lblLabel.Caption = " Options ", ;
		lblLabel.Name = "lblLabel", ;
		shpBox.Height = 104, ;
		shpBox.Name = "shpBox", ;
		shpBox.Width = 270
		*< END OBJECT: ClassLib="projectexplorerlabelledbox.vcx" BaseClass="container" />

	ADD OBJECT 'opgBuildAction' AS projectexploreroptiongroup WITH ;
		BorderStyle = 0, ;
		ButtonCount = 5, ;
		ControlSource = "Thisform.nBuildAction", ;
		Height = 111, ;
		Left = 25, ;
		Name = "opgBuildAction", ;
		TabIndex = 2, ;
		Top = 25, ;
		Width = 242, ;
		ZOrderSet = 1, ;
		projectexploreroptionbutton1.Caption = "\<Rebuild project", ;
		projectexploreroptionbutton1.Left = 5, ;
		projectexploreroptionbutton1.Name = "projectexploreroptionbutton1", ;
		projectexploreroptionbutton1.Top = 5, ;
		projectexploreroptionbutton1.Value = 1, ;
		projectexploreroptionbutton2.Caption = "\<Application (app)", ;
		projectexploreroptionbutton2.Left = 5, ;
		projectexploreroptionbutton2.Name = "projectexploreroptionbutton2", ;
		projectexploreroptionbutton2.Top = 24, ;
		Projectexploreroptionbutton3.Caption = "\<Win32 executable / COM server (exe)", ;
		Projectexploreroptionbutton3.Left = 5, ;
		Projectexploreroptionbutton3.Name = "Projectexploreroptionbutton3", ;
		Projectexploreroptionbutton3.Top = 42, ;
		Projectexploreroptionbutton4.Caption = "\<Single-threaded COM server (dll)", ;
		Projectexploreroptionbutton4.Left = 5, ;
		Projectexploreroptionbutton4.Name = "Projectexploreroptionbutton4", ;
		Projectexploreroptionbutton4.Top = 60, ;
		Projectexploreroptionbutton5.Caption = "\<Multi-threaded COM server (dll)", ;
		Projectexploreroptionbutton5.Left = 5, ;
		Projectexploreroptionbutton5.Name = "Projectexploreroptionbutton5", ;
		Projectexploreroptionbutton5.Top = 78
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="optiongroup" />
	
	PROCEDURE Init
		lparameters tcProject
		dodefault()
		This.Caption = 'Build Options - ' + lower(juststem(tcProject))
		
	ENDPROC

	PROCEDURE chkRegenerate.Refresh
		This.Enabled = Thisform.nBuildAction >= 3
		
	ENDPROC

	PROCEDURE chkRunAfterBuild.Refresh
		This.Enabled = inlist(Thisform.nBuildAction, 2, 3)
		
	ENDPROC

	PROCEDURE cmdOK.Refresh
		This.Enabled = Thisform.nBuildAction = 1 or not empty(Thisform.cOutputFile)
		
	ENDPROC

	PROCEDURE cntFile.filechanged
		Thisform.RefreshForm()
		
	ENDPROC

	PROCEDURE cntFile.Refresh
		This.Enabled = Thisform.nBuildAction > 1
		dodefault()
		
	ENDPROC

	PROCEDURE opgBuildAction.anychange
		do case
			case Thisform.nBuildAction = 2
				Thisform.cntFile.cExtensions = "'Visual FoxPro Application (*.app), *.app'"
				Thisform.cOutputFile         = forceext(Thisform.cOutputFile, 'app')
			case Thisform.nBuildAction = 3
				Thisform.cntFile.cExtensions = "'Application (*.exe), *.exe'"
				Thisform.cOutputFile         = forceext(Thisform.cOutputFile, 'exe')
			case Thisform.nBuildAction >= 4
				Thisform.cntFile.cExtensions = "'DLL, *.dll'"
				Thisform.cOutputFile         = forceext(Thisform.cOutputFile, 'dll')
		endcase
		Thisform.RefreshForm()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS projectexplorercategoryeditor AS projectexplorermodaldialog OF "projectexplorerctrls.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lstCategories" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCategory" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCategory" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblColor" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="shpColor" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: omanager		&& A reference to a ProjectExplorerCategoryManager object
	*</DefinedPropArrayMethod>

	Caption = "Category Editor"
	DoCreate = .T.
	Height = 167
	Icon = images\projectexplorercategory.ico
	MaxButton = .F.
	MinButton = .F.
	Name = "projectexplorercategoryeditor"
	omanager = .NULL.		&& A reference to a ProjectExplorerCategoryManager object
	Width = 411
	_memberdata = <VFPData>
		<memberdata name="omanager" display="oManager"/>
		</VFPData>

	ADD OBJECT 'lblCategory' AS projectexplorerlabel WITH ;
		Caption = "\<Category", ;
		Left = 175, ;
		Name = "lblCategory", ;
		TabIndex = 2, ;
		Top = 13
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'lblColor' AS projectexplorerlabel WITH ;
		Caption = "Color", ;
		Left = 175, ;
		Name = "lblColor", ;
		TabIndex = 4, ;
		Top = 40
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'lstCategories' AS projectexplorerlistbox WITH ;
		Height = 150, ;
		IntegralHeight = .F., ;
		Left = 10, ;
		lrequeryoninit = .F., ;
		MoverBars = .T., ;
		Name = "lstCategories", ;
		RowSource = "", ;
		RowSourceType = 0, ;
		TabIndex = 1, ;
		Top = 10, ;
		Width = 155
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="listbox" />

	ADD OBJECT 'shpColor' AS projectexplorercolorselector WITH ;
		ccontrolsource = ProjectExplorerCategories.Color, ;
		Left = 235, ;
		Name = "shpColor", ;
		Top = 40
		*< END OBJECT: ClassLib="projectexplorerbutton.vcx" BaseClass="shape" />

	ADD OBJECT 'txtCategory' AS projectexplorertextbox WITH ;
		Height = 22, ;
		Left = 235, ;
		Name = "txtCategory", ;
		TabIndex = 3, ;
		Top = 10, ;
		Width = 169
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />
	
	PROCEDURE Activate
		* Make sure the Category table is open. We'll set the list's ListIndex to
		* itself to fire AnyChange which ensures the record pointer for the table is
		* correct.
		
		This.oManager.OpenCategoryTable()
		This.lstCategories.ListIndex = This.lstCategories.ListIndex
		
	ENDPROC

	PROCEDURE Init
		lparameters toManager
		This.oManager = toManager
		go top in ProjectExplorerCategories
		This.lstCategories.Requery()
		This.lstCategories.ListIndex = 1
		dodefault()
		
	ENDPROC

	PROCEDURE releasemembers
		This.oManager = .NULL.
		
	ENDPROC

	PROCEDURE lstCategories.anychange
		local lnIndex
		lnIndex = ascan(This.aItems, This.ListIndex, -1, -1, 3, 8)
		= seek(This.aItems[lnIndex, 4], 'ProjectExplorerCategories', 'ID')
		Thisform.RefreshForm()
		
	ENDPROC

	PROCEDURE lstCategories.OnMoveItem
		lparameters tnSource, ;
			tnShift, ;
			tnCurrentIndex, ;
			tnMoveBy
		local lnIndex, ;
			lnNewIndex
		lnIndex = ascan(This.aItems, tnCurrentIndex, -1, -1, 3, 8)
		= seek(This.aItems[lnIndex, 4], 'ProjectExplorerCategories', 'ID')
		lnNewIndex = tnCurrentIndex + tnMoveBy
		replace ORDER with lnNewIndex in ProjectExplorerCategories
		This.aItems[lnIndex, 3]    = ORDER
		This.aItems[lnNewIndex, 3] = tnCurrentIndex
		= seek(This.aItems[lnNewIndex, 4], 'ProjectExplorerCategories', 'ID')
		replace ORDER with tnCurrentIndex in ProjectExplorerCategories
		
	ENDPROC

	PROCEDURE lstCategories.Requery
		lparameters tlNoAction
		select Label, Color, Order, ID from ProjectExplorerCategories ;
			into array This.aItems order by Order
		for lnI = 1 to _tally
			This.aItems[lnI, 1] = trim(This.aItems[lnI, 1])
		next lnI
		dodefault(tlNoAction)
		Thisform.oManager.CheckImages()
		for lnI = 1 to This.ListCount
			This.Picture[lnI] = Thisform.oManager.GetFileNameForColor(This.aItems[lnI, 2])
		next lnI
		
	ENDPROC

	PROCEDURE shpColor.Click
		local lnColor, ;
			lcFile
		lnColor = This.FillColor
		dodefault()
		if lnColor <> This.FillColor
			lcFile = Thisform.oManager.CreateImageFile(This.FillColor)
			Thisform.lstCategories.Picture[Thisform.lstCategories.ListIndex] = lcFile
		endif lnColor <> This.FillColor
		
	ENDPROC

	PROCEDURE txtCategory.Refresh
		This.Value = ProjectExplorerCategories.Label
		
	ENDPROC

	PROCEDURE txtCategory.validation
		local lcValue, ;
			lnRecno, ;
			llFound, ;
			lnIndex
		lcValue = trim(This.Value)
		if empty(lcValue)
			messagebox('The category cannot be blank.', 16, 'Category Editor')
			This.Refresh()
			return .F.
		endif empty(lcValue)
		lnRecno = recno()
		locate for trim(Label) == lcValue and recno() <> lnRecno
		llFound = found()
		go lnRecno
		if llFound
			messagebox('That category is a duplicate.', 16, 'Category Editor')
			This.Refresh()
			return .F.
		endif llFound
		with Thisform.lstCategories
			lnIndex = ascan(.aItems, .ListIndex, -1, -1, 3, 8)
			.ListItem[lnIndex]  = lcValue
			.aItems[lnIndex, 1] = lcValue
		endwith
		replace Label with lcValue
		
	ENDPROC

ENDDEFINE

DEFINE CLASS projectexplorercategorymanager AS projectexplorercustom OF "projectexplorerctrls.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: checkimages		&& Ensures there's a image for each category's color
		*m: createimagefile		&& Creates an image file for the specified color
		*m: getfilenameforcolor		&& Gets the path and name of the file for the specified color
		*m: opencategorytable		&& Open the Category table
		*p: cmainfolder		&& The ProjectExplorer folder
		*p: cpath		&& The path for image files
	*</DefinedPropArrayMethod>

	cmainfolder = 		&& The ProjectExplorer folder
	cpath = 		&& The path for image files
	Name = "projectexplorercategorymanager"
	_memberdata = <VFPData>
		<memberdata name="checkimages" display="CheckImages"/>
		<memberdata name="createimagefile" display="CreateImageFile"/>
		<memberdata name="cpath" display="cPath"/>
		<memberdata name="getfilenameforcolor" display="GetFileNameForColor"/>
		<memberdata name="cmainfolder" display="cMainFolder"/>
		<memberdata name="opencategorytable" display="OpenCategoryTable"/>
		</VFPData>
	
	PROCEDURE checkimages		&& Ensures there's a image for each category's color
		*==============================================================================
		* Method:			CheckImages
		* Status:			Public
		* Purpose:			Ensures there's a image for each category's color
		* Author:			Doug Hennig
		* Last Revision:	03/24/2017
		* Parameters:		none
		* Returns:			.T.
		* Environment in:	This.cPath contains the path for image files
		*					ProjectExplorerCategories is open
		* Environment out:	image files for each record in ProjectExplorerCategories
		*						exists
		*==============================================================================
		
		select ProjectExplorerCategories
		scan
			This.CreateImageFile(COLOR)
		endscan
		
	ENDPROC

	PROCEDURE createimagefile		&& Creates an image file for the specified color
		*==============================================================================
		* Method:			CreateImageFile
		* Status:			Public
		* Purpose:			Creates an image file for the specified color
		* Author:			Doug Hennig
		* Last Revision:	03/24/2017
		* Parameters:		tnColor - the color to create the image for
		* Returns:			the path and name of the image file
		* Environment in:	see This.GetFileNameForColor()
		* Environment out:	the image file was created if it didn't exist
		*==============================================================================
		
		lparameters tnColor
		local lcFile, ;
			loBmp, ;
			loRect, ;
			loGfx, ;
			loColor, ;
			loBrush, ;
			loFormat
		lcFile = This.GetFileNameForColor(tnColor)
		if not file(lcFile)
			do System.app
			with _screen.System.Drawing
		
		* Create a bitmap and a rectangle of the desired size.
		
				loBmp  = .Bitmap.New(16, 16)
				loRect = loBmp.GetBounds()
		
		* Create a graphics object, create a brush with the desired color, and fill the
		* rectangle with it.
		
				loGfx   = .Graphics.FromImage(loBmp)
				loColor = .Color.FromRGB(tnColor)
				loBrush = .SolidBrush.New(loColor)
				loGfx.FillRectangle(loBrush, loRect)
		
		* Save the image to a file named for the color.
		
				loFormat = .Imaging.ImageFormat.Bmp
				loBmp.Save(lcFile, loFormat)
			endwith
		endif not file(lcFile)
		return lcFile
		
	ENDPROC

	PROCEDURE getfilenameforcolor		&& Gets the path and name of the file for the specified color
		*==============================================================================
		* Method:			GetFileNameForColor
		* Status:			Public
		* Purpose:			Gets the path and name of the file for the specified color
		* Author:			Doug Hennig
		* Last Revision:	03/24/2017
		* Parameters:		tnColor - the color to get the filename for
		* Returns:			the path and name of the file for the specified color
		* Environment in:	This.cPath contains the path for image files
		* Environment out:	none
		*==============================================================================
		
		lparameters tnColor
		return This.cPath + transform(tnColor) + '.bmp'
		
	ENDPROC

	PROCEDURE Init
		lparameters tcMainFolder
		local llReturn, ;
			loException as Exception
		
		* Save the passed parameter.
		
		This.cMainFolder = tcMainFolder
		
		* The path for category images is the ProjectExplorer subdirectory of the
		* user's temp folder. Create it if necessary.
		
		This.cPath = addbs(sys(2023)) + 'ProjectExplorer\'
		llReturn = directory(This.cPath)
		if not llReturn
			try
				md (This.cPath)
				llReturn = .T.
			catch to loException
				This.cErrorMessage = loException.Message
			endtry
		endif not llReturn
		
		* Open the Category table.
		
		if llReturn
			llReturn = This.OpenCategoryTable()
		endif llReturn
		
		* Ensure we have images for all categories.
		
		if llReturn
			This.CheckImages()
		endif llReturn
		
	ENDPROC

	PROCEDURE opencategorytable		&& Open the Category table
		*==============================================================================
		* Method:			OpenCategoryTable
		* Status:			Public
		* Purpose:			Open the Category table
		* Author:			Doug Hennig
		* Last Revision:	03/24/2017
		* Parameters:		none
		* Returns:			.T. if it succeeded
		* Environment in:	This.cMainFolder contains the ProjectExplorer folder
		* Environment out:	ProjectExplorerCategories was opened if it wasn't already
		*==============================================================================
		
		local llReturn, ;
			loException as Exception
		This.cErrorMessage = ''
		if not used('ProjectExplorerCategories')
			try
				use (This.cMainFolder + 'ProjectExplorerCategories') again shared in 0
				llReturn = .T.
			catch to loException
				This.cErrorMessage = loException.Message
			endtry
		endif not used('ProjectExplorerCategories')
		return llReturn
		
	ENDPROC

ENDDEFINE

DEFINE CLASS projectexplorereventtimer AS projectexplorertimer OF "projectexplorerctrls.vcx" 
 	*< CLASSDATA: Baseclass="timer" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: oitem		&& A reference to the item being edited when an edit window is closed
	*</DefinedPropArrayMethod>

	Enabled = .F.
	Interval = 200
	Name = "projectexplorereventtimer"
	oitem = .NULL.		&& A reference to the item being edited when an edit window is closed
	_memberdata = <VFPData>
		<memberdata name="oitem" display="oItem"/>
		</VFPData>
	
	PROCEDURE releasemembers
		This.oItem = .NULL.
		
	ENDPROC

	PROCEDURE Timer
		local loItem
		This.Enabled = .F.
		loItem       = This.oItem
		This.oItem   = .NULL.
		if loItem.New
			Thisform.AfterNewItem(loItem)
		else
			Thisform.AfterEditItem(loItem)
		endif loItem.New
		
	ENDPROC

ENDDEFINE

DEFINE CLASS projectexplorerform AS projectexplorerexplorerformtreeview OF "projectexplorerexplorer.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="oProjectToolbar" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oProjectInfo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oEventTimer" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.projectexplorerpage1.Classproperties1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.projectexplorerpage2.Projectitemproperties1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.projectexplorerpage3.Projectitemproperties1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.projectexplorerpage4.Formproperties1" UniqueID="" Timestamp="" />

	#INCLUDE "projectexplorer.h"
	*<DefinedPropArrayMethod>
		*m: addfiletoversioncontrol		&& Adds a file to version control
		*m: additem		&& Adds an item to the project
		*m: addprojecttosolution		&& Adds a project to the solution
		*m: afteredititem		&& Executed after the item was edited
		*m: afternewitem		&& Executed after an item was created
		*m: assigntags		&& Assigns tags to items in bulk
		*m: buildproject		&& Builds the project
		*m: buildprojectdialog		&& Displays the build dialog before building the project
		*m: buildprojectfromdefaults		&& Builds the project from default settings
		*m: buildsolutionfromdefaults		&& Builds the solution from default settings
		*m: canbuildproject		&& Returns .T. if the project can be built
		*m: cancommitorrevert		&& Returns .T. if the selected item can be committed or reverted
		*m: candisplayrevisionhistory		&& Returns .T. if we can display revision history for the selected item
		*m: candisplayvisualdiff		&& .T. if we can display the visual diff for the selected item
		*m: checkitemfilter		&& Returns .T. if the specified item matches the tags filter specified in cFilterTags and filter specified in cItemFilter
		*m: cleanupsolution		&& Cleans up all projects in the solution
		*m: commit		&& Commits changes to the selected file
		*m: commitall		&& Commits changes to all files
		*m: csolutionfolder_access
		*m: editcategories		&& Display the Category Editor
		*m: edititem		&& Edits the selected item
		*m: editsolutionproperties		&& Edits solution properties
		*m: edittags		&& Display the Tag Editor
		*m: editwindowclosed		&& Fired when a VFP IDE edit window is closed
		*m: excludefile		&& Toggles the Exclude setting for the selected item
		*m: expand		&& Expands or collapses the form
		*m: getcommitmessage		&& Gets a commit message
		*m: getcurrentdatabase		&& Gets the current database given the selected node
		*m: getheaderid		&& Gets the ID for the desired header
		*m: getimageforitem		&& Gets the image to use in the TreeView for the specified item
		*m: getitemfornode		&& Gets the item for the specified node key
		*m: getitemstatus		&& Gets the version control status for the specified item and updates its TreeView image
		*m: getnodeforitem		&& Gets the TreeView node for the specified item
		*m: getnodekey		&& Gets the node key for the selected item
		*m: getoptions		&& Displays the Options dialog
		*m: getprojectmanagersettings		&& Gets VFP Project Manager default settings
		*m: gettextforitem		&& Gets the text for the TreeView node for the specified item
		*m: loadsolution		&& Loads the solution into the TreeView
		*m: newitem		&& Creates a new item
		*m: opensolution		&& Opens a solution
		*m: removefilefromversioncontrol		&& Removes the current file from version control
		*m: removeitem		&& Removes the selected item from the project
		*m: removeprojectfromsolution		&& Removes a project from the solution
		*m: repositorybrowser		&& Displays the repository browser
		*m: resetsortandfilter		&& Resets the sort and filter to default
		*m: revert		&& Reverts changes to the item
		*m: revertfile		&& Reverts changes to the file via version control
		*m: revisionhistory		&& Displays the revision history for the selected file
		*m: runitem		&& Runs the selected item
		*m: savesettings		&& Save the properties of the current object
		*m: selectnodeforfile		&& Selects a node for the specified file
		*m: selectproject		&& Selects the project associated with the selected item
		*m: setmain		&& Toggles the MainFile setting for the selected item
		*m: settoolbarcontrollocation		&& Sets the specified control at the rightmost position of the toolbar
		*m: showerrormessage		&& Displays an error message
		*m: showmessage		&& Displays a message
		*m: sortfilter		&& Displays the sort and filter dialog
		*m: updatenode		&& Updates the selected node in the TreeView
		*m: visualdiff		&& Displays a visual diff for the selected file
		*m: yesno		&& Displays a Yes/No dialog and returns .T. if the user chose Yes
		*p: ccommitmessage		&& The last commit message used
		*p: ccurrpath		&& The current path
		*p: cdefaultversioncontrolprovider		&& The default version control provider
		*p: cexpandednodecursor		&& The name of a cursor containing expanded nodes for each tag
		*p: cfiltertags		&& A comma-delimited list of tags to use as a filter for the items
		*p: cfoxbin2prglocation		&& The folder where FoxBin2PRG is located
		*p: citemfilter		&& The item filter to use
		*p: clastfiltertag		&& The previous filter tag
		*p: cmainfolder		&& The main folder Project Explorer is running in
		*p: cpathtouse		&& The path to use when in ProjectExplorer
		*p: cpreviousfiltertags		&& The previous filter tags value
		*p: cselectedtype		&& The type of the selected node
		*p: cselectnode		&& The nodes to select in the TreeView because of drag and drop
		*p: csettingsfile		&& The name and path for the Project Explorer settings file
		*p: csolutionfolder		&& The folder for the selected solution
		*p: ctestcommitmessage		&& The auto-commit message for unit tests
		*p: ctreeviewsortexpression		&& The expression to sort the TreeView
		*p: cversionnumber
		*p: laddfiletoversioncontrolonadd		&& .T. to add a file to version control when it's added to a project
		*p: laddindebugmode		&& .T. to display messages when addins are executed
		*p: lallowanyfiletype		&& .T. for the Add and New buttons to allow any file type or .F. for only a file of the selected type
		*p: ldisplayfullpath		&& .T. to display the full path for files
		*p: lexpanded		&& .T. if the form is expanded, .F. if collapsed
		*p: lignorefilter		&& .T. to ignore the item filter, likely because it's invalid
		*p: lmodifyondblclick		&& .T. to modify a file when double-clicked, .F. to run it
		*p: lremovefilefromversioncontrolonremove		&& .T. to remove a file from version control when it's removed from project
		*p: lsolutionopen		&& .T if the solution is open
		*p: lsorttreeviewdescending		&& .T. to sort the TreeView descending, .F. for ascending
		*p: lusecontainericons		&& .T. to display a class' container icon
		*p: nsavedcollapsewidth		&& The width of the form the last time it was collapsed
		*p: nsavedminwidth		&& The MinWidth when the form is expanded
		*p: nsavedtreeviewwidth		&& The TreeView container width the last time the form was expanded
		*p: nsavedwidth		&& The Width the last time the form was expanded
		*p: oaddins		&& A reference to a ProjectAddins object
		*p: ocategorymanager		&& A reference to a ProjectExplorerCategoryManager object
		*p: oevents		&& A reference to a ProjectExplorerWindowManager object
		*p: oitem
		*p: ooperations		&& A reference to a ProjectOperations object
		*p: oproject		&& A reference to the currently selected ProjectEngine object
		*p: oprojectsettings		&& A reference to a ProjectSettings object for the selected project
		*p: oregistry		&& A reference to a ProjectExplorerRegistry object
		*p: osolution		&& A reference to a ProjectExplorerSolution object
		*p: owindows		&& A collection of open IDE windows
		*a: aexpandednodes[1,0]		&& Nodes to expand in the TreeView because of drag and drop
		*a: aheaders[1,0]		&& An array of headers
	*</DefinedPropArrayMethod>

	BindControls = .F.
	Caption = "Project Explorer"
	ccommitmessage = 		&& The last commit message used
	ccurrpath = 		&& The current path
	cdefaultversioncontrolprovider = 		&& The default version control provider
	cexpandednodecursor = 		&& The name of a cursor containing expanded nodes for each tag
	cfiltertags = 		&& A comma-delimited list of tags to use as a filter for the items
	cfoxbin2prglocation = 		&& The folder where FoxBin2PRG is located
	citemfilter = 		&& The item filter to use
	clastfiltertag = 		&& The previous filter tag
	cmainfolder = 		&& The main folder Project Explorer is running in
	cpathtouse = 		&& The path to use when in ProjectExplorer
	cpreviousfiltertags = 		&& The previous filter tags value
	cselectedtype = 		&& The type of the selected node
	cselectnode = 		&& The nodes to select in the TreeView because of drag and drop
	csettingsfile = 		&& The name and path for the Project Explorer settings file
	csolutionfolder = 		&& The folder for the selected solution
	ctestcommitmessage = 		&& The auto-commit message for unit tests
	ctreeviewsortexpression = upper(TEXT)		&& The expression to sort the TreeView
	cversionnumber = 1.0.6536
	Desktop = .F.
	DoCreate = .T.
	Height = 530
	Icon = images\projectexplorer.ico
	laddfiletoversioncontrolonadd = .F.		&& .T. to add a file to version control when it's added to a project
	laddindebugmode = .F.		&& .T. to display messages when addins are executed
	lallowanyfiletype = .F.		&& .T. for the Add and New buttons to allow any file type or .F. for only a file of the selected type
	ldisplayfullpath = .F.		&& .T. to display the full path for files
	lexpanded = .T.		&& .T. if the form is expanded, .F. if collapsed
	lignorefilter = .F.		&& .T. to ignore the item filter, likely because it's invalid
	lloadtreeviewatstartup = .F.
	lmodifyondblclick = .F.		&& .T. to modify a file when double-clicked, .F. to run it
	lremovefilefromversioncontrolonremove = .F.		&& .T. to remove a file from version control when it's removed from project
	lsolutionopen = .F.		&& .T if the solution is open
	lsorttreeviewdescending = .F.		&& .T. to sort the TreeView descending, .F. for ascending
	lusecontainericons = .F.		&& .T. to display a class' container icon
	MinHeight = 530
	MinWidth = 686
	Name = "projectexplorerform"
	nsavedcollapsewidth = 0		&& The width of the form the last time it was collapsed
	nsavedminwidth = 0		&& The MinWidth when the form is expanded
	nsavedtreeviewwidth = 0		&& The TreeView container width the last time the form was expanded
	nsavedwidth = 0		&& The Width the last time the form was expanded
	oaddins = .NULL.		&& A reference to a ProjectAddins object
	ocategorymanager = .NULL.		&& A reference to a ProjectExplorerCategoryManager object
	oevents = .NULL.		&& A reference to a ProjectExplorerWindowManager object
	oitem = .NULL.
	ooperations = .NULL.		&& A reference to a ProjectOperations object
	oproject = .NULL.		&& A reference to the currently selected ProjectEngine object
	oprojectsettings = .NULL.		&& A reference to a ProjectSettings object for the selected project
	oregistry = .NULL.		&& A reference to a ProjectExplorerRegistry object
	osolution = .NULL.		&& A reference to a ProjectExplorerSolution object
	owindows = .NULL.		&& A collection of open IDE windows
	Width = 724
	_memberdata = <VFPData>
		<memberdata name="cregistrykey" type="property" display="cRegistryKey"/>
		<memberdata name="ctoolbarclass" type="property" display="cToolbarClass"/>
		<memberdata name="ctoolbarlibrary" type="property" display="cToolbarLibrary"/>
		<memberdata name="nsplitterleft" type="property" display="nSplitterLeft"/>
		<memberdata name="otoolbar" type="property" display="oToolbar"/>
		<memberdata name="updatestatepanel" type="method" display="UpdateStatePanel"/>
		<memberdata name="updateprogressbar" type="method" display="UpdateProgressBar"/>
		<memberdata name="nstatepanelwidth" type="property" display="nStatePanelWidth"/>
		<memberdata name="lstatepanelautosize" type="property" display="lStatePanelAutoSize"/>
		<memberdata name="cstatepanelname" type="property" display="cStatePanelName"/>
		<memberdata name="hideprogressbar" type="method" display="HideProgressBar"/>
		<memberdata name="setupstatusbar" type="method" display="SetupStatusBar"/>
		<memberdata name="restoreformsize" type="method" display="RestoreFormSize"/>
		<memberdata name="updatemessagepanel" type="method" display="UpdateMessagePanel"/>
		<memberdata name="saveformsize" type="method" display="SaveFormSize"/>
		<memberdata name="cdefaultstatemessage" type="property" display="cDefaultStateMessage"/>
		<memberdata name="displayproperties" type="method" display="DisplayProperties"/>
		<memberdata name="ccurrentnodeid" type="property" display="cCurrentNodeID"/>
		<memberdata name="ccurrentnodekey" type="property" display="cCurrentNodeKey"/>
		<memberdata name="ccurrentnodetype" type="property" display="cCurrentNodeType"/>
		<memberdata name="cstateiconready" type="property" display="cStateIconReady"/>
		<memberdata name="cstateiconbusy" type="property" display="cStateIconBusy"/>
		<memberdata name="statusbarclick" type="method" display="StatusBarClick"/>
		<memberdata name="cgobackicon" type="property" display="cGoBackIcon"/>
		<memberdata name="luseformfont" type="property" display="lUseFormFont"/>
		<memberdata name="oitem" type="property" display="oItem"/>
		<memberdata name="edititem" type="method" display="EditItem"/>
		<memberdata name="runitem" type="method" display="RunItem"/>
		<memberdata name="oprojectsettings" display="oProjectSettings"/>
		<memberdata name="savesettings" display="SaveSettings"/>
		<memberdata name="omenu" display="oMenu"/>
		<memberdata name="cfiltertags" display="cFilterTags"/>
		<memberdata name="updatenode" display="UpdateNode"/>
		<memberdata name="oaddins" display="oAddins"/>
		<memberdata name="ooperations" display="oOperations"/>
		<memberdata name="buildproject" display="BuildProject"/>
		<memberdata name="buildprojectdialog" display="BuildProjectDialog"/>
		<memberdata name="buildprojectfromdefaults" display="BuildProjectFromDefaults"/>
		<memberdata name="selectproject" display="SelectProject"/>
		<memberdata name="cmainfolder" display="cMainFolder"/>
		<memberdata name="addprojecttosolution" display="AddProjectToSolution"/>
		<memberdata name="removeprojectfromsolution" display="RemoveProjectFromSolution"/>
		<memberdata name="yesno" display="YesNo"/>
		<memberdata name="loadsolution" display="LoadSolution"/>
		<memberdata name="canbuildproject" display="CanBuildProject"/>
		<memberdata name="buildsolutionfromdefaults" display="BuildSolutionFromDefaults"/>
		<memberdata name="removeitem" display="RemoveItem"/>
		<memberdata name="additem" display="AddItem"/>
		<memberdata name="getprojectmanagersettings" display="GetProjectManagerSettings"/>
		<memberdata name="lmodifyondblclick" display="lModifyOnDblClick"/>
		<memberdata name="lusecontainericons" display="lUseContainerIcons"/>
		<memberdata name="laddfiletoversioncontrolonadd" display="lAddFileToVersionControlOnAdd"/>
		<memberdata name="lremovefilefromversioncontrolonremove" display="lRemoveFileFromVersionControlOnRemove"/>
		<memberdata name="csettingsfile" display="cSettingsFile"/>
		<memberdata name="addfiletoversioncontrol" display="AddFileToVersionControl"/>
		<memberdata name="removefilefromversioncontrol" display="RemoveFileFromVersionControl"/>
		<memberdata name="revertfile" display="RevertFile"/>
		<memberdata name="revisionhistory" display="RevisionHistory"/>
		<memberdata name="visualdiff" display="VisualDiff"/>
		<memberdata name="commit" display="Commit"/>
		<memberdata name="repositorybrowser" display="RepositoryBrowser"/>
		<memberdata name="getoptions" display="GetOptions"/>
		<memberdata name="cdefaultversioncontrolprovider" display="cDefaultVersionControlProvider"/>
		<memberdata name="ldisplayfullpath" display="lDisplayFullPath"/>
		<memberdata name="editwindowclosed" display="EditWindowClosed"/>
		<memberdata name="oevents" display="oEvents"/>
		<memberdata name="owindows" display="oWindows"/>
		<memberdata name="oproject" display="oProject"/>
		<memberdata name="osolution" display="oSolution"/>
		<memberdata name="ccurrpath" display="cCurrPath"/>
		<memberdata name="oregistry" display="oRegistry"/>
		<memberdata name="showerrormessage" display="ShowErrorMessage"/>
		<memberdata name="expand" display="Expand"/>
		<memberdata name="nsavedcollapsewidth" display="nSavedCollapseWidth"/>
		<memberdata name="nsavedminwidth" display="nSavedMinWidth"/>
		<memberdata name="nsavedwidth" display="nSavedWidth"/>
		<memberdata name="nsavedtreeviewwidth" display="nSavedTreeViewWidth"/>
		<memberdata name="lexpanded" display="lExpanded"/>
		<memberdata name="revert" display="Revert"/>
		<memberdata name="laddindebugmode" display="lAddinDebugMode"/>
		<memberdata name="showmessage" display="ShowMessage"/>
		<memberdata name="edittags" display="EditTags"/>
		<memberdata name="ctreeviewsortexpression" display="cTreeViewSortExpression"/>
		<memberdata name="sortfilter" display="SortFilter"/>
		<memberdata name="citemfilter" display="cItemFilter"/>
		<memberdata name="lignorefilter" display="lIgnoreFilter"/>
		<memberdata name="checkitemfilter" display="CheckItemFilter"/>
		<memberdata name="getnodeforitem" display="GetNodeForItem"/>
		<memberdata name="editcategories" display="EditCategories"/>
		<memberdata name="ocategorymanager" display="oCategoryManager"/>
		<memberdata name="cselectedtype" display="cSelectedType"/>
		<memberdata name="aheaders[1]" display="aHeaders[1]"/>
		<memberdata name="newitem" display="NewItem"/>
		<memberdata name="csolutionfolder" display="cSolutionFolder"/>
		<memberdata name="csolutionfolder_access" display="cSolutionFolder_Access"/>
		<memberdata name="getcurrentdatabase" display="GetCurrentDatabase"/>
		<memberdata name="getimageforitem" display="GetImageForItem"/>
		<memberdata name="getheaderid" display="GetHeaderID"/>
		<memberdata name="cpathtouse" display="cPathToUse"/>
		<memberdata name="commitall" display="CommitAll"/>
		<memberdata name="getcommitmessage" display="GetCommitMessage"/>
		<memberdata name="editsolutionproperties" display="EditSolutionProperties"/>
		<memberdata name="cfoxbin2prglocation" display="cFoxBin2PRGLocation"/>
		<memberdata name="excludefile" display="ExcludeFile"/>
		<memberdata name="setmain" display="SetMain"/>
		<memberdata name="cleanupsolution" display="CleanupSolution"/>
		<memberdata name="aheaders" display="aHeaders"/>
		<memberdata name="lsorttreeviewdescending" display="lSortTreeViewDescending"/>
		<memberdata name="getnodekey" display="GetNodeKey"/>
		<memberdata name="getitemfornode" display="GetItemForNode"/>
		<memberdata name="afteredititem" display="AfterEditItem"/>
		<memberdata name="afternewitem" display="AfterNewItem"/>
		<memberdata name="clastfiltertag" display="cLastFilterTag"/>
		<memberdata name="cexpandednodecursor" display="cExpandedNodeCursor"/>
		<memberdata name="aexpandednodes" display="aExpandedNodes"/>
		<memberdata name="cselectnode" display="cSelectNode"/>
		<memberdata name="getitemstatus" display="GetItemStatus"/>
		<memberdata name="cancommitorrevert" display="CanCommitOrRevert"/>
		<memberdata name="candisplayrevisionhistory" display="CanDisplayRevisionHistory"/>
		<memberdata name="candisplayvisualdiff" display="CanDisplayVisualDiff"/>
		<memberdata name="ccommitmessage" display="cCommitMessage"/>
		<memberdata name="ctestcommitmessage" display="cTestCommitMessage"/>
		<memberdata name="assigntags" display="AssignTags"/>
		<memberdata name="opensolution" display="OpenSolution"/>
		<memberdata name="settoolbarcontrollocation" display="SetToolbarControlLocation"/>
		<memberdata name="selectnodeforfile" display="SelectNodeForFile"/>
		</VFPData>
	opersist.Left = 700
	opersist.Name = "opersist"
	opersist.Top = 0
	oSplitter.cobject2name = pgfProperties,oProjectInfo
	oSplitter.Height = 504
	oSplitter.Left = 210
	oSplitter.Name = "oSplitter"
	oSplitter.nobject2minsize = 510
	oSplitter.Top = 26
	oTreeViewContainer.ccursorstructure = ID C(127), TYPE C(10), PARENTID C(127), PARENTTYPE C(10), TEXT C(60), IMAGE C(60), SELIMAGE C(60), EXPIMAGE C(60), SORTED L, FORECOLOR I, BOLD L, NODEKEY C(127), PAGE N(1), ORDER I, LASTMOD T, PROJECT C(127)
	oTreeViewContainer.cregistrykeysuffix = Files
	oTreeViewContainer.Height = 504
	oTreeViewContainer.lallowdelete = .T.
	oTreeViewContainer.lsortrootnodes = .F.
	oTreeViewContainer.Name = "oTreeViewContainer"
	oTreeViewContainer.oImageList.Left = 160
	oTreeViewContainer.oImageList.Name = "oImageList"
	oTreeViewContainer.oImageList.Top = 0
	oTreeViewContainer.oStack.Name = "oStack"
	oTreeViewContainer.oTree.Height = 504
	oTreeViewContainer.oTree.Left = 0
	oTreeViewContainer.oTree.Name = "oTree"
	oTreeViewContainer.oTree.Width = 210
	oTreeViewContainer.tmrReload.Left = 162
	oTreeViewContainer.tmrReload.Name = "tmrReload"
	oTreeViewContainer.tmrSync.Left = 160
	oTreeViewContainer.tmrSync.Name = "tmrSync"
	oTreeViewContainer.Top = 27
	pgfProperties.ErasePage = .T.
	pgfProperties.Height = 505
	pgfProperties.Left = 220
	pgfProperties.Name = "pgfProperties"
	pgfProperties.PageCount = 4
	pgfProperties.projectexplorerpage1.Name = "projectexplorerpage1"
	pgfProperties.Projectexplorerpage2.Caption = "projectexplorerpage2"
	pgfProperties.Projectexplorerpage2.Name = "projectexplorerpage2"
	pgfProperties.Projectexplorerpage3.Caption = "projectexplorerpage3"
	pgfProperties.Projectexplorerpage3.Name = "projectexplorerpage3"
	pgfProperties.Projectexplorerpage4.Caption = "projectexplorerpage4"
	pgfProperties.Projectexplorerpage4.Name = "projectexplorerpage4"
	pgfProperties.Top = 26
	pgfProperties.Width = 505

	ADD OBJECT 'oEventTimer' AS projectexplorereventtimer WITH ;
		Left = 680, ;
		Name = "oEventTimer", ;
		Top = 0
		*< END OBJECT: ClassLib="projectexplorerui.vcx" BaseClass="timer" />

	ADD OBJECT 'oProjectInfo' AS projectinfo WITH ;
		Height = 505, ;
		Left = 220, ;
		Name = "oProjectInfo", ;
		Top = 26, ;
		Width = 505, ;
		cmdRevert.Name = "cmdRevert", ;
		cmdSave.Name = "cmdSave", ;
		pgfProperties.ErasePage = .T., ;
		pgfProperties.Name = "pgfProperties", ;
		pgfProperties.projectexplorerpage1.chkDebug.Alignment = 0, ;
		pgfProperties.projectexplorerpage1.chkDebug.Name = "chkDebug", ;
		pgfProperties.projectexplorerpage1.chkEncrypted.Alignment = 0, ;
		pgfProperties.projectexplorerpage1.chkEncrypted.Name = "chkEncrypted", ;
		pgfProperties.projectexplorerpage1.chkIcon.Alignment = 0, ;
		pgfProperties.projectexplorerpage1.chkIcon.Name = "chkIcon", ;
		pgfProperties.projectexplorerpage1.chkProjectHook.Alignment = 0, ;
		pgfProperties.projectexplorerpage1.chkProjectHook.Name = "chkProjectHook", ;
		pgfProperties.projectexplorerpage1.cmdProjectHook.Name = "cmdProjectHook", ;
		pgfProperties.projectexplorerpage1.edtUser.Name = "edtUser", ;
		pgfProperties.projectexplorerpage1.imgIcon.Name = "imgIcon", ;
		pgfProperties.projectexplorerpage1.lblAddress.Name = "lblAddress", ;
		pgfProperties.projectexplorerpage1.lblAuthor.Name = "lblAuthor", ;
		pgfProperties.projectexplorerpage1.lblCity.Name = "lblCity", ;
		pgfProperties.projectexplorerpage1.lblCompany.Name = "lblCompany", ;
		pgfProperties.projectexplorerpage1.lblCountry.Name = "lblCountry", ;
		pgfProperties.projectexplorerpage1.lblHome.Name = "lblHome", ;
		pgfProperties.projectexplorerpage1.lblLastBuilt.Name = "lblLastBuilt", ;
		pgfProperties.projectexplorerpage1.lblPostalCode.Name = "lblPostalCode", ;
		pgfProperties.projectexplorerpage1.lblProject.Name = "lblProject", ;
		pgfProperties.projectexplorerpage1.lblRegion.Name = "lblRegion", ;
		pgfProperties.projectexplorerpage1.lblUser.Name = "lblUser", ;
		pgfProperties.projectexplorerpage1.Name = "projectexplorerpage1", ;
		pgfProperties.projectexplorerpage1.txtAddress.Name = "txtAddress", ;
		pgfProperties.projectexplorerpage1.txtAuthor.Name = "txtAuthor", ;
		pgfProperties.projectexplorerpage1.txtCity.Name = "txtCity", ;
		pgfProperties.projectexplorerpage1.txtCompany.Name = "txtCompany", ;
		pgfProperties.projectexplorerpage1.txtCountry.Name = "txtCountry", ;
		pgfProperties.projectexplorerpage1.txtHome.Name = "txtHome", ;
		pgfProperties.projectexplorerpage1.txtLastBuilt.Name = "txtLastBuilt", ;
		pgfProperties.projectexplorerpage1.txtPostalCode.Name = "txtPostalCode", ;
		pgfProperties.projectexplorerpage1.txtProject.Name = "txtProject", ;
		pgfProperties.projectexplorerpage1.txtProjectHook.Name = "txtProjectHook", ;
		pgfProperties.projectexplorerpage1.txtRegion.Name = "txtRegion", ;
		pgfProperties.projectexplorerpage2.chkAutoIncrement.Alignment = 0, ;
		pgfProperties.projectexplorerpage2.chkAutoIncrement.Name = "chkAutoIncrement", ;
		pgfProperties.projectexplorerpage2.ctrVersionInfo.lblLabel.Name = "lblLabel", ;
		pgfProperties.projectexplorerpage2.ctrVersionInfo.Name = "ctrVersionInfo", ;
		pgfProperties.projectexplorerpage2.ctrVersionInfo.shpBox.Name = "shpBox", ;
		pgfProperties.projectexplorerpage2.ctrVersionNumber.lblLabel.Name = "lblLabel", ;
		pgfProperties.projectexplorerpage2.ctrVersionNumber.Name = "ctrVersionNumber", ;
		pgfProperties.projectexplorerpage2.ctrVersionNumber.shpBox.Name = "shpBox", ;
		pgfProperties.projectexplorerpage2.lblBuildVersion.Name = "lblBuildVersion", ;
		pgfProperties.projectexplorerpage2.lblMajorVersion.Name = "lblMajorVersion", ;
		pgfProperties.projectexplorerpage2.lblMinorVersion.Name = "lblMinorVersion", ;
		pgfProperties.projectexplorerpage2.lblVersionComments.Name = "lblVersionComments", ;
		pgfProperties.projectexplorerpage2.lblVersionCompany.Name = "lblVersionCompany", ;
		pgfProperties.projectexplorerpage2.lblVersionCopyright.Name = "lblVersionCopyright", ;
		pgfProperties.projectexplorerpage2.lblVersionDescription.Name = "lblVersionDescription", ;
		pgfProperties.projectexplorerpage2.lblVersionLanguage.Name = "lblVersionLanguage", ;
		pgfProperties.projectexplorerpage2.lblVersionProduct.Name = "lblVersionProduct", ;
		pgfProperties.projectexplorerpage2.lblVersionTrademarks.Name = "lblVersionTrademarks", ;
		pgfProperties.projectexplorerpage2.Name = "projectexplorerpage2", ;
		pgfProperties.projectexplorerpage2.txtBuildVersion.Name = "txtBuildVersion", ;
		pgfProperties.projectexplorerpage2.txtMajorVersion.Name = "txtMajorVersion", ;
		pgfProperties.projectexplorerpage2.txtMinorVersion.Name = "txtMinorVersion", ;
		pgfProperties.projectexplorerpage2.txtVersionComments.Name = "txtVersionComments", ;
		pgfProperties.projectexplorerpage2.txtVersionCompany.Name = "txtVersionCompany", ;
		pgfProperties.projectexplorerpage2.txtVersionCopyright.Name = "txtVersionCopyright", ;
		pgfProperties.projectexplorerpage2.txtVersionDescription.Name = "txtVersionDescription", ;
		pgfProperties.projectexplorerpage2.txtVersionLanguage.Name = "txtVersionLanguage", ;
		pgfProperties.projectexplorerpage2.txtVersionProduct.Name = "txtVersionProduct", ;
		pgfProperties.projectexplorerpage2.txtVersionTrademarks.Name = "txtVersionTrademarks", ;
		pgfProperties.projectexplorerpage3.cboInstancing.Name = "cboInstancing", ;
		pgfProperties.projectexplorerpage3.cntClasses.lblLabel.Name = "lblLabel", ;
		pgfProperties.projectexplorerpage3.cntClasses.Name = "cntClasses", ;
		pgfProperties.projectexplorerpage3.cntClasses.shpBox.Name = "shpBox", ;
		pgfProperties.projectexplorerpage3.cntHelp.cmdGetFile.Name = "cmdGetFile", ;
		pgfProperties.projectexplorerpage3.cntHelp.lblFile.Name = "lblFile", ;
		pgfProperties.projectexplorerpage3.cntHelp.Name = "cntHelp", ;
		pgfProperties.projectexplorerpage3.cntHelp.txtFile.Name = "txtFile", ;
		pgfProperties.projectexplorerpage3.lblDescription.Name = "lblDescription", ;
		pgfProperties.projectexplorerpage3.lblHelpID.Name = "lblHelpID", ;
		pgfProperties.projectexplorerpage3.lblInstancing.Name = "lblInstancing", ;
		pgfProperties.projectexplorerpage3.lblLibrary.Name = "lblLibrary", ;
		pgfProperties.projectexplorerpage3.lblName.Name = "lblName", ;
		pgfProperties.projectexplorerpage3.lblProjectName.Name = "lblProjectName", ;
		pgfProperties.projectexplorerpage3.lblTypelibDesc.Name = "lblTypelibDesc", ;
		pgfProperties.projectexplorerpage3.lstClasses.Name = "lstClasses", ;
		pgfProperties.projectexplorerpage3.Name = "projectexplorerpage3", ;
		pgfProperties.projectexplorerpage3.txtDescription.Name = "txtDescription", ;
		pgfProperties.projectexplorerpage3.txtHelpID.Name = "txtHelpID", ;
		pgfProperties.projectexplorerpage3.txtLibrary.Name = "txtLibrary", ;
		pgfProperties.projectexplorerpage3.txtName.Name = "txtName", ;
		pgfProperties.projectexplorerpage3.txtProjectName.Name = "txtProjectName", ;
		pgfProperties.projectexplorerpage3.txtTypelibDesc.Name = "txtTypelibDesc"
		*< END OBJECT: ClassLib="projectexplorerui.vcx" BaseClass="container" />

	ADD OBJECT 'oProjectToolbar' AS projectexplorertoolbar WITH ;
		Left = 0, ;
		Name = "oProjectToolbar", ;
		Top = 0, ;
		cboTagFilter.Name = "cboTagFilter", ;
		cmdAdd.Name = "cmdAdd", ;
		cmdBack.cmdMain.Name = "cmdMain", ;
		cmdBack.cmdMenu.Name = "cmdMenu", ;
		cmdBack.Name = "cmdBack", ;
		cmdBuild.cmdMain.Name = "cmdMain", ;
		cmdBuild.cmdMenu.Name = "cmdMenu", ;
		cmdBuild.Name = "cmdBuild", ;
		cmdEdit.Name = "cmdEdit", ;
		cmdExpand.Name = "cmdExpand", ;
		cmdFilter.Alignment = 0, ;
		cmdFilter.Name = "cmdFilter", ;
		cmdMenu.Name = "cmdMenu", ;
		cmdNew.Name = "cmdNew", ;
		cmdRemove.Name = "cmdRemove", ;
		cmdRun.Name = "cmdRun"
		*< END OBJECT: ClassLib="projectexplorerui.vcx" BaseClass="container" />

	ADD OBJECT 'pgfProperties.projectexplorerpage1.Classproperties1' AS classproperties WITH ;
		Left = 10, ;
		Name = "Classproperties1", ;
		Top = 8, ;
		cboColor.Name = "cboColor", ;
		cboTags.cboCombo.Name = "cboCombo", ;
		cboTags.Name = "cboTags", ;
		cboTags.oImageList.Height = 100, ;
		cboTags.oImageList.Left = 120, ;
		cboTags.oImageList.Name = "oImageList", ;
		cboTags.oImageList.Top = 40, ;
		cboTags.oImageList.Width = 100, ;
		cboTags.oTree.Height = 174, ;
		cboTags.oTree.Left = 5, ;
		cboTags.oTree.Name = "oTree", ;
		cboTags.oTree.Top = 29, ;
		cboTags.oTree.Width = 166, ;
		cboTags.shpTreeView.Name = "shpTreeView", ;
		chkExclude.Alignment = 0, ;
		chkExclude.ControlSource = "", ;
		chkExclude.Name = "chkExclude", ;
		chkMainFile.Alignment = 0, ;
		chkMainFile.Name = "chkMainFile", ;
		chkOLEPublic.Alignment = 0, ;
		chkOLEPublic.Name = "chkOLEPublic", ;
		cmdRevert.Name = "cmdRevert", ;
		cmdSave.Name = "cmdSave", ;
		ctrParent.lblLabel.Name = "lblLabel", ;
		ctrParent.Name = "ctrParent", ;
		ctrParent.shpBox.Name = "shpBox", ;
		edtDescription.ControlSource = "", ;
		edtDescription.Name = "edtDescription", ;
		edtUser.Name = "edtUser", ;
		imgIcon.Name = "imgIcon", ;
		imgToolbarIcon.Name = "imgToolbarIcon", ;
		lblBaseClass.Name = "lblBaseClass", ;
		lblColor.Name = "lblColor", ;
		lblDescription.Name = "lblDescription", ;
		lblIcon.Name = "lblIcon", ;
		lblIncludeFile.Name = "lblIncludeFile", ;
		lblLastModified.Name = "lblLastModified", ;
		lblname.Name = "lblname", ;
		lblParentClass.Name = "lblParentClass", ;
		lblParentLibrary.Name = "lblParentLibrary", ;
		lblPath.Name = "lblPath", ;
		lblTags.Name = "lblTags", ;
		lblToolbarIcon.Name = "lblToolbarIcon", ;
		lblUser.Name = "lblUser", ;
		txtBaseClass.Name = "txtBaseClass", ;
		txtIncludeFile.Name = "txtIncludeFile", ;
		txtLastModified.ControlSource = "", ;
		txtLastModified.Name = "txtLastModified", ;
		txtName.ControlSource = "", ;
		txtName.Name = "txtName", ;
		txtParentClass.ControlSource = "", ;
		txtParentClass.Name = "txtParentClass", ;
		txtParentLibrary.ControlSource = "", ;
		txtParentLibrary.Name = "txtParentLibrary", ;
		txtPath.ControlSource = "", ;
		txtPath.Name = "txtPath"
		*< END OBJECT: ClassLib="projectexplorerui.vcx" BaseClass="container" />

	ADD OBJECT 'pgfProperties.projectexplorerpage2.Projectitemproperties1' AS projectitemproperties WITH ;
		Left = 10, ;
		Name = "Projectitemproperties1", ;
		Top = 8, ;
		cboColor.Name = "cboColor", ;
		cboTags.cboCombo.Name = "cboCombo", ;
		cboTags.Name = "cboTags", ;
		cboTags.oImageList.Height = 100, ;
		cboTags.oImageList.Left = 120, ;
		cboTags.oImageList.Name = "oImageList", ;
		cboTags.oImageList.Top = 40, ;
		cboTags.oImageList.Width = 100, ;
		cboTags.oTree.Height = 174, ;
		cboTags.oTree.Left = 5, ;
		cboTags.oTree.Name = "oTree", ;
		cboTags.oTree.Top = 29, ;
		cboTags.oTree.Width = 166, ;
		cboTags.shpTreeView.Name = "shpTreeView", ;
		chkExclude.Alignment = 0, ;
		chkExclude.ControlSource = "", ;
		chkExclude.Name = "chkExclude", ;
		chkMainFile.Alignment = 0, ;
		chkMainFile.Name = "chkMainFile", ;
		cmdRevert.Name = "cmdRevert", ;
		cmdSave.Name = "cmdSave", ;
		edtDescription.ControlSource = "", ;
		edtDescription.Name = "edtDescription", ;
		edtUser.Name = "edtUser", ;
		lblColor.Name = "lblColor", ;
		lblDescription.Name = "lblDescription", ;
		lblLastModified.Name = "lblLastModified", ;
		lblname.Name = "lblname", ;
		lblPath.Name = "lblPath", ;
		lblTags.Name = "lblTags", ;
		lblUser.Name = "lblUser", ;
		txtLastModified.ControlSource = "", ;
		txtLastModified.Name = "txtLastModified", ;
		txtName.ControlSource = "", ;
		txtName.Name = "txtName", ;
		txtPath.ControlSource = "", ;
		txtPath.Name = "txtPath"
		*< END OBJECT: ClassLib="projectexplorerui.vcx" BaseClass="container" />

	ADD OBJECT 'pgfProperties.projectexplorerpage3.Projectitemproperties1' AS projectitemproperties WITH ;
		Left = 10, ;
		Name = "Projectitemproperties1", ;
		Top = 8, ;
		cboColor.Name = "cboColor", ;
		cboTags.cboCombo.Name = "cboCombo", ;
		cboTags.Name = "cboTags", ;
		cboTags.oImageList.Height = 100, ;
		cboTags.oImageList.Left = 120, ;
		cboTags.oImageList.Name = "oImageList", ;
		cboTags.oImageList.Top = 40, ;
		cboTags.oImageList.Width = 100, ;
		cboTags.oTree.Height = 174, ;
		cboTags.oTree.Left = 5, ;
		cboTags.oTree.Name = "oTree", ;
		cboTags.oTree.Top = 29, ;
		cboTags.oTree.Width = 166, ;
		cboTags.shpTreeView.Name = "shpTreeView", ;
		chkExclude.Alignment = 0, ;
		chkExclude.ControlSource = "", ;
		chkExclude.Name = "chkExclude", ;
		chkMainFile.Alignment = 0, ;
		chkMainFile.Name = "chkMainFile", ;
		cmdRevert.Name = "cmdRevert", ;
		cmdSave.Name = "cmdSave", ;
		edtDescription.ControlSource = "", ;
		edtDescription.Name = "edtDescription", ;
		edtUser.Name = "edtUser", ;
		lblColor.Name = "lblColor", ;
		lblDescription.Name = "lblDescription", ;
		lblLastModified.Name = "lblLastModified", ;
		lblname.Name = "lblname", ;
		lblPath.Name = "lblPath", ;
		lblTags.Name = "lblTags", ;
		lblUser.Name = "lblUser", ;
		txtLastModified.ControlSource = "", ;
		txtLastModified.Name = "txtLastModified", ;
		txtName.ControlSource = "", ;
		txtName.Name = "txtName", ;
		txtPath.ControlSource = "", ;
		txtPath.Name = "txtPath"
		*< END OBJECT: ClassLib="projectexplorerui.vcx" BaseClass="container" />

	ADD OBJECT 'pgfProperties.projectexplorerpage4.Formproperties1' AS formproperties WITH ;
		Left = 10, ;
		Name = "Formproperties1", ;
		Top = 8, ;
		cboColor.Name = "cboColor", ;
		cboTags.cboCombo.Name = "cboCombo", ;
		cboTags.Name = "cboTags", ;
		cboTags.oImageList.Height = 100, ;
		cboTags.oImageList.Left = 120, ;
		cboTags.oImageList.Name = "oImageList", ;
		cboTags.oImageList.Top = 40, ;
		cboTags.oImageList.Width = 100, ;
		cboTags.oTree.Height = 174, ;
		cboTags.oTree.Left = 5, ;
		cboTags.oTree.Name = "oTree", ;
		cboTags.oTree.Top = 29, ;
		cboTags.oTree.Width = 166, ;
		cboTags.shpTreeView.Name = "shpTreeView", ;
		chkExclude.Alignment = 0, ;
		chkExclude.ControlSource = "", ;
		chkExclude.Name = "chkExclude", ;
		chkMainFile.Alignment = 0, ;
		chkMainFile.Name = "chkMainFile", ;
		cmdRevert.Name = "cmdRevert", ;
		cmdSave.Name = "cmdSave", ;
		edtDescription.ControlSource = "", ;
		edtDescription.Name = "edtDescription", ;
		edtUser.Name = "edtUser", ;
		lblClass.Name = "lblClass", ;
		lblColor.Name = "lblColor", ;
		lblDescription.Name = "lblDescription", ;
		lblIncludeFile.Name = "lblIncludeFile", ;
		lblLastModified.Name = "lblLastModified", ;
		lblLibrary.Name = "lblLibrary", ;
		lblname.Name = "lblname", ;
		lblPath.Name = "lblPath", ;
		lblTags.Name = "lblTags", ;
		lblUser.Name = "lblUser", ;
		txtClass.ControlSource = "", ;
		txtClass.Name = "txtClass", ;
		txtIncludeFile.Name = "txtIncludeFile", ;
		txtLastModified.ControlSource = "", ;
		txtLastModified.Name = "txtLastModified", ;
		txtLibrary.ControlSource = "", ;
		txtLibrary.Name = "txtLibrary", ;
		txtName.ControlSource = "", ;
		txtName.Name = "txtName", ;
		txtPath.ControlSource = "", ;
		txtPath.Name = "txtPath"
		*< END OBJECT: ClassLib="projectexplorerui.vcx" BaseClass="container" />
	
	PROCEDURE Activate
		* Make sure the path is set so we can find our files.
		
		set path to (This.cPathToUse)
		
		* Call any addins.
		
		if not This.oAddins.ExecuteAddin('OnActivate', This)
			return
		endif not This.oAddins.ExecuteAddin('OnActivate', This)
		
		* Do the usual behavior.
		
		dodefault()
		
	ENDPROC

	PROCEDURE addfiletoversioncontrol		&& Adds a file to version control
		*==============================================================================
		* Method:			AddFileToVersionControl
		* Status:			Public
		* Purpose:			Adds a file to version control
		* Author:			Doug Hennig
		* Last Revision:	04/28/2017
		* Parameters:		toItem - the item to add to version control (optional: if
		*						it isn't specified, the current file is used)
		*					tlNoAutoCommit - .T. to not auto-commit the changes
		* Returns:			.T.
		* Environment in:	This.oSolution contains a reference to a
		*						ProjectExplorerSolution object
		* Environment out:	the file for the selected item was added to version control
		*					the image for the item in the TreeView was changed
		*==============================================================================
		
		* Bug out if we can't do it or it's already in version control.
		
		lparameters toItem, ;
			tlNoAutoCommit
		local loItem
		loItem = iif(vartype(toItem) = 'O', toItem, This.oItem)
		if not This.oSolution.lHaveVersionControl or ;
			vartype(loItem) <> 'O' or not loItem.IsFile or ;
			(not inlist(loItem.VersionControlStatus, ccVC_STATUS_IGNORED, ;
			ccVC_STATUS_UNTRACKED, ccVC_STATUS_REMOVED) and ;
			not empty(loItem.VersionControlStatus))
			return
		endif not This.oSolution.lHaveVersionControl ...
		
		* Add the file to version control and update its status.
		
		This.oSolution.oVersionControl.AddFile(loItem.Path)
		This.GetItemStatus(loItem)
		
	ENDPROC

	PROCEDURE additem		&& Adds an item to the project
		*==============================================================================
		* Method:			AddItem
		* Status:			Public
		* Purpose:			Adds an item to the project
		* Author:			Doug Hennig
		* Last Revision:	11/23/2017
		* Parameters:		tcFile - the name of the file to add (optional: the user
		*						is prompted for a file if it isn't passed)
		* Returns:			.T. if it succeeds
		* Environment in:	This.cSelectedType contains the type of the selected node
		*						in the TreeView
		*					This.lAllowAnyFileType is .T. to allow any file type or .F.
		*						for only a file of the selected type
		*					This.oOperations contains a reference to a
		*						ProjectOperations object
		*					This.oProject contains a reference to a ProjectEngine
		*						object
		* Environment out:	the file the user selected was added to the project and all
		*						associated collections and tables/cursors
		*					if a database was selected and the user chose a table, it's
		*						added to the database
		*==============================================================================
		
		lparameters tcFile
		local loProject, ;
			loSolution, ;
			lcType, ;
			lnType, ;
			lnDefault, ;
			lcExt, ;
			lnI, ;
			lcCurrExt, ;
			lcFile, ;
			loItem, ;
			llReturn, ;
			lnItems, ;
			loDBCItem, ;
			laItems[1], ;
			loFile, ;
			loException, ;
			loCommitItem, ;
			lcProjectID, ;
			lcParentID, ;
			lcHeaderID, ;
			lcHeaderKey, ;
			lcProjectKey, ;
			lcKey
		
		* Get the file extension for the file to add.
		
		loProject  = This.oProject
		loSolution = This.oSolution
		lcType     = This.cSelectedType
		lnType     = ascan(This.aHeaders, lcType, -1, -1, 1, 14)
		lnDefault  = 0
		do case
			case (vartype(tcFile) <> 'C' or empty(tcFile)) and This.lAllowAnyFileType
				lcExt = ''
				for lnI = 1 to alen(This.aHeaders, 1)
					if not empty(This.aHeaders[lnI, 9])
						lcCurrExt = strtran(This.aHeaders[lnI, 9], ';All Files (*.*):*')
						lcExt     = lcExt + iif(empty(lcExt), '', ';') + lcCurrExt
						if This.aHeaders[lnI, 1] = lcType
							lnDefault = occurs(';', lcExt) + iif(';' $ lcCurrExt, 0, 1)
						endif This.aHeaders[lnI, 1] = lcType
					endif not empty(This.aHeaders[lnI, 9])
				next lnI
				lcExt = lcExt + ';Visual Class Library (*.vcx):VCX;All Files (*.*):*'
			case lnType > 0
				lcExt = This.aHeaders[lnType, 9]
			case inlist(lcType, FILETYPE_FIELD, FILETYPE_INDEX)
				lcExt  = 'Table (*.dbf):DBF'
				lcType = This.oItem.ParentType
			otherwise
				lcExt = 'Visual Class Library (*.vcx):VCX'
		endcase
		
		* Get the file to add. If one was selected, add it to the project and then to
		* the collection and reload the solution. Note that we make sure the tags
		* filter is set so the new item is visible and then we select it in the
		* TreeView.
		
		if not empty(lcExt)
			if vartype(tcFile) = 'C' and not empty(tcFile)
				lcFile = tcFile
			else
				lcFile = GetFileName(lcExt, This.cSolutionFolder, '', .F., lnDefault)
			endif vartype(tcFile) = 'C' ...
			if not empty(lcFile)
		
		* See if the file is already in the project. If not, we'll add it. If the user
		* can select any type of file, see what type they picked.
		
				if type('loProject.oProject.Files(lcFile)') = 'U'
					if This.lAllowAnyFileType
						lcExt  = upper(justext(lcFile))
						lcType = ''
						if lcExt = 'VCX'
							lcType = FILETYPE_CLASSLIB
							lnType = 0
						else
							for lnI = 1 to alen(This.aHeaders, 1)
								if not empty(This.aHeaders[lnI, 9]) and ;
									lcExt $ This.aHeaders[lnI, 9]
									lnType = lnI
									lcType = This.aHeaders[lnI, 1]
									exit
								endif not empty(This.aHeaders[lnI, 9]) ...
							next lnI
						endif lcExt = 'VCX'
						if empty(lcType)
							lcType = FILETYPE_OTHER
							lnType = ascan(This.aHeaders, lcType, -1, -1, 1, 14)
						endif empty(lcType)
					endif This.lAllowAnyFileType
		
		* If we're adding a table to a database container, do that first and reload the
		* database so we pick up the new table.
		
					llReturn = .T.
					lnItems  = 0
					if lcType = FILETYPE_TABLE_IN_DBC
						try
							loDBCItem = This.GetCurrentDatabase()
							open database (loDBCItem.Path) shared
							CloseFile(lcFile)
							add table (lcFile)
		
		* If we're using version control, auto-commit the DBC or regenerate its
		* text equivalent.
		
							do case
								case not This.oSolution.lHaveVersionControl
								case This.oSolution.lAutoCommitChanges
									laItems[1] = loDBCItem
									lnItems    = 1
								case This.oSolution.nIncludeInVersionControl > 1
									This.oSolution.oVersionControl.ConvertBinaryToText(loDBCItem.Path)
							endcase
							This.GetItemStatus(loDBCItem)
							loFile = loProject.oProject.Files(loDBCItem.Path)
							This.oProject.AddFileToCollection(loFile, .T.)
							loItem = loProject.oProjectItems.Item(loDBCItem.Key + ;
								ccKEY_SEPARATOR + lower(juststem(lcFile)))
						catch to loException
							This.ShowErrorMessage('Cannot add table to the ' + ;
								'database. The error message is:' + ccCRLF + ccCRLF + ;
								loException.Message)
							llReturn = .F.
						endtry
					else
		
		* For any other type of file, add it to the project and our collection.
		
						loFile   = This.oOperations.AddItem(loProject.oProject, ;
							lcFile, lcType)
						llReturn = empty(This.oOperations.cErrorMessage)
						if llReturn
							loItem = loProject.AddFileToCollection(loFile)
						else
							This.ShowErrorMessage(This.oOperations.cErrorMessage)
						endif llReturn
		
		* If we're using version control, auto-commit the project or regenerate its
		* text equivalent.
		
						do case
							case not This.oSolution.lHaveVersionControl
							case This.oSolution.lAutoCommitChanges
								lnItems = lnItems + 1
								dimension laItems[lnItems]
								laItems[lnItems] = loProject.oProjectItem
							case This.oSolution.nIncludeInVersionControl > 1
								This.oSolution.oVersionControl.ConvertBinaryToText(loProject.cProject)
								This.GetItemStatus(loProject.oProjectItem)
							otherwise
								This.GetItemStatus(loProject.oProjectItem)
						endcase
					endif lcType = FILETYPE_TABLE_IN_DBC
					if llReturn
		
		* If we're supposed to, add the file to version control.
		
						if This.lAddFileToVersionControlOnAdd
							This.AddFileToVersionControl(loItem)
						endif This.lAddFileToVersionControlOnAdd
		
		* Now do the commits.
		
						if loSolution.lHaveVersionControl and ;
							loSolution.lAutoCommitChanges
							loSolution.CommitItems(loSolution.cFileAddMessage, ;
								@laItems)
							for each loCommitItem in laItems foxobject
								This.GetItemStatus(loCommitItem, .T.)
							next loItem
						endif loSolution.lHaveVersionControl ...
		
		* Reload the solution and select the node for the new item (make sure its
		* parent node is expanded).
		
						This.cFilterTags = loItem.Tags.Item(1)
						This.LoadSolution()
						lcProjectID  = loProject.oProjectItem.Key
						lcParentID   = iif(empty(loItem.ParentKey), lcProjectID, ;
							lcProjectID + ccKEY_SEPARATOR + loItem.ParentKey)
						lcHeaderID   = This.GetHeaderID(lnType, lcParentID)
						lcHeaderKey  = This.oTreeViewContainer.GetNodeKey(ccHEADER_TYPE, ;
							lcHeaderID)
						lcProjectKey = This.oTreeViewContainer.GetNodeKey(ccHEADER_TYPE, ;
							lcProjectID)
						This.oTreeViewContainer.TreeExpand(lcProjectKey, .T.)
						This.oTreeViewContainer.TreeExpand(lcHeaderKey, .T.)
						lcKey = This.oTreeViewContainer.GetNodeKey(loItem.Type, ;
							This.GetNodeKey(loItem))
						This.oTreeViewContainer.SelectNode(lcKey)
					endif llReturn
				else
					This.ShowErrorMessage('That file is already in the project.')
				endif type('This.oProject.oProject.Files(lcFile)') = 'U'
			endif not empty(lcFile)
		endif not empty(lcExt)
		return llReturn
		
	ENDPROC

	PROCEDURE addprojecttosolution		&& Adds a project to the solution
		*==============================================================================
		* Method:			AddProjectToSolution
		* Status:			Public
		* Purpose:			Adds a project to the solution
		* Author:			Doug Hennig
		* Last Revision:	11/23/2017
		* Parameters:		none
		* Returns:			.T.
		* Environment in:	This.oSolution contains a reference to a
		*						ProjectExplorerSolution object
		* Environment out:	the settings for the current object were saved if they were
		*						changed
		*					if the user selected a project and it was successfully
		*						added to the solution, the TreeView was reloaded
		*==============================================================================
		
		local lcFile, ;
			llOK
		
		* Let the user select a project. If they did, make sure it's in the same folder
		* structure as the other projects.
		
		lcFile = GetFileName('Project (*.pjx):PJX', This.cSolutionFolder)
		if not empty(lcFile)
			lcPath = justpath(lcFile)
			if lcPath $ upper(This.cSolutionFolder)
		
		* Add it to the solution.
		
				llOK = This.oSolution.AddProject(lcFile)
				do case
		
		* If everything worked, reload the TreeView.
		
					case llOK
						This.LoadSolution()
		
		* Display an error message if we have one.
		
					case not empty(This.oSolution.cErrorMessage)
						This.ShowErrorMessage(This.oSolution.cErrorMessage)
				endcase
			else
				This.ShowErrorMessage('A solution can only contain projects in ' + ;
					'the same folder structure.')
			endif not lcPath $ upper(This.cSolutionFolder)
		endif not empty(lcFile)
		
	ENDPROC

	PROCEDURE afteredititem		&& Executed after the item was edited
		*==============================================================================
		* Method:			AfterEditItem
		* Status:			Protected
		* Purpose:			Executed after the item was edited
		* Author:			Doug Hennig
		* Last Revision:	05/15/2017
		* Parameters:		toItem - a reference to the ProjectItem that was edited
		* Returns:			.T.
		* Environment in:	This.oSolution contains a reference to a
		*						ProjectExplorerSolution object
		* Environment out:	the properties of the item were refreshed
		*					the status and icon of the item may have been updated
		*					changes may have been committed
		*==============================================================================
		
		lparameters toItem
		local lcFile, ;
			lcChecksum, ;
			loProject, ;
			lcTableKey, ;
			loItem, ;
			llMetaData, ;
			laItems[1], ;
			lnItems
		
		* Do nothing if the item wasn't actually changed.
		
		lcFile = toItem.Path
		if toItem.HasParent
			lcFile = toItem.ParentPath
		endif toItem.HasParent
		lcChecksum = GetChecksum(lcFile)
		if toItem.Checksum == lcChecksum
			return
		endif toItem.Checksum == lcChecksum
		loProject = This.oSolution.oProjects.Item(toItem.Project)
		do case
		
		* If we were on a table in a database, save the table and get the database.
		
			case toItem.Type = FILETYPE_TABLE_IN_DBC
				lcTableKey = toItem.Key
				loItem     = loProject.GetItemParent(toItem)
		
		* If we were on a field or index in a table in a database or a view, get the
		* database.
		
			case inlist(toItem.Type, FILETYPE_FIELD, FILETYPE_INDEX) and ;
				inlist(toItem.ParentType, FILETYPE_TABLE_IN_DBC, FILETYPE_LOCAL_VIEW, ;
				FILETYPE_REMOTE_VIEW)
				lcTableKey = toItem.ParentKey
				loItem     = loProject.GetItemParent(toItem)
				loItem     = loProject.GetItemParent(loItem)
		
		* If the item has a parent, get it.
		
			case toItem.HasParent
				loItem = loProject.GetItemParent(toItem)
		
		* For anything else, we'll use the editing item.
		
			otherwise
				loItem = toItem
		endcase
		
		* If we're supposed to reload the item after editing it, do so. Otherwise,
		* update the item's properties.
		
		if not toItem.New and loItem.ReloadAfterEdit and ;
			toItem.Type <> FILETYPE_CONNECTION
			loProject.RemoveFileFromCollection(loItem, .T.)
			loItem     = loProject.AddFileToCollection(loItem)
			llMetaData = .T.
			This.LoadSolution(.T.)
		else
			toItem.GetProperties(loProject.oProject)
		endif not toItem.New ...
		if This.oSolution.lHaveVersionControl
		
		* Put the item into the array of items to auto-commit or get the status for.
		* If this is a table in a database, handle the table too. If there were changes
		* to the project meta data, commit it too.
		
			laItems[1] = loItem
			lnItems    = 1
			if not empty(lcTableKey)
				dimension laItems[2]
				laItems[2] = loProject.oProjectItems.Item(lcTableKey)
				lnItems    = 2
			endif not empty(lcTableKey)
			if This.oSolution.lAutoCommitChanges
				lcMessage = This.GetCommitMessage()
				if not empty(lcMessage)
					if llMetaData
						lnItems = lnItems + 1
						dimension laItems[lnItems]
						laItems[lnItems] = loProject.cMetaDataTable
					endif llMetaData
					This.cCommitMessage = lcMessage
					This.oSolution.CommitItems(lcMessage, @laItems)
				endif not empty(lcMessage)
		
		* If we're not auto-committing, regenerate the text for the files if necessary,
		* then get the item status.
		
			else
				for each loItem in laItems foxobject
					if This.oSolution.nIncludeInVersionControl > 1
						lcFile = loItem.Path
						if IsVFPBinaryFile(lcFile)
							This.oSolution.oVersionControl.ConvertBinaryToText(lcFile)
						endif IsVFPBinaryFile(lcFile)
					endif This.oSolution.nIncludeInVersionControl > 1
					This.GetItemStatus(loItem)
				next loItem
			endif This.oSolution.lAutoCommitChanges
		endif This.oSolution.lHaveVersionControl
		
		* If we're still positioned to the same item, update the clone and the image
		* for the item (in the case of a class, which could have a new container icon).
		
		if vartype(This.oItem) = 'O' and This.oItem.Key == toItem.Key
			if toItem.Type = FILETYPE_CLASS
				This.GetItemStatus(toItem)
			endif toItem.Type = FILETYPE_CLASS
			This.oItem = toItem.Clone()
			This.RefreshForm()
		endif vartype(This.oItem) = 'O' ...
		
		* Execute any addin.
		
		This.oAddins.ExecuteAddin('AfterModifyItem', toItem)
		
	ENDPROC

	PROCEDURE afternewitem		&& Executed after an item was created
		*==============================================================================
		* Method:			AfterNewItem
		* Status:			Public
		* Purpose:			Executed after an item was created
		* Author:			Doug Hennig
		* Last Revision:	06/09/2017
		* Parameters:		toItem - a reference to the ProjectItem that was edited
		* Returns:			.T.
		* Environment in:	This.oSolution contains a reference to a
		*						ProjectExplorerSolution object
		*					This.oOperations contains a reference to a
		*						ProjectOperations object
		* Environment out:	the item is added to the project and the ProjectItems
		*						collection and the TreeView is reloaded
		*					see This.AfterEditItem()
		*==============================================================================
		
		lparameters toItem
		local loProject, ;
			lcType, ;
			loFile, ;
			loDBC, ;
			loItem, ;
			llUpdateProject, ;
			lcMessage, ;
			lcHeaderType, ;
			lcHeaderID, ;
			lcProjectID, ;
			lcParentID, ;
			lcHeaderKey, ;
			lcKey
		loProject = This.oSolution.oProjects.Item(toItem.Project)
		lcType    = toItem.Type
		do case
		
		* For a stored procedure, reload the database since the user may have removed,
		* renamed, or added stored procedures.
		
			case lcType = FILETYPE_STORED_PROCEDURE
				loFile = loProject.oProject.Files(toItem.Path)
				loDBC  = loProject.GetItemParent(toItem)
				loProject.RemoveFileFromCollection(loDBC, .T.)
				loProject.AddFileToCollection(loFile)
				loItem = toItem
		
		* For a table in a database, reload the database.
		
			case lcType = FILETYPE_TABLE_IN_DBC
				loFile = loProject.oProject.Files(toItem.ParentPath)
				loProject.AddFileToCollection(loFile)
				loItem = loProject.oProjectItems.Item(toItem.ParentKey + ;
					ccKEY_SEPARATOR + toItem.ItemName)
				if This.lAddFileToVersionControlOnAdd
					This.AddFileToVersionControl(loItem)
				endif This.lAddFileToVersionControlOnAdd
		
		* The file doesn't exist (for example, the user created a PRG but entered no
		* code so the file wasn't saved).
		
			case not file(toItem.Path)
				return
		
		* If this is a file, add it to the project if it isn't already (a VCX may
		* already be there, or not, when a class is created).
		
			case type('loProject.oProject.Files(toItem.Path)') <> 'O'
				llUpdateProject = .T.
				if lcType = FILETYPE_CLASS
					lcType = FILETYPE_CLASSLIB
				endif lcType = FILETYPE_CLASS
				loFile = This.oOperations.AddItem(loProject.oProject, toItem.Path, ;
					lcType)
				if empty(This.oOperations.cErrorMessage)
					loItem = loProject.AddFileToCollection(loFile)
		
		* If we're supposed to, add the file to version control.
		
					if This.lAddFileToVersionControlOnAdd
						This.AddFileToVersionControl(loItem)
					endif This.lAddFileToVersionControlOnAdd
				else
					This.ShowErrorMessage(This.oOperations.cErrorMessage)
					return .F.
				endif empty(This.oOperations.cErrorMessage)
		
		* If this is a class, get the newly added item.
		
				if toItem.Type = FILETYPE_CLASS
					loItem = loProject.oProjectItems.Item(loProject.oProjectItems.Count)
				endif toItem.Type = FILETYPE_CLASS
		
		* For a class in an existing VCX or for a connection or view, get the VCX or
		* DBC and add it to the collection (it isn't actually re-added but simply
		* re-read).
		
			otherwise
				loFile = loProject.oProject.Files(toItem.Path)
				loProject.AddFileToCollection(loFile)
				loItem = loProject.oProjectItems.Item(loProject.oProjectItems.Count)
				if toItem.HasChildren
					loItem = loProject.GetItemParent(loItem)
						&& since the last item in the collection is a field in a view,
						&& get the view
				endif toItem.HasChildren
		endcase
		
		* Finish the post-edit tasks.
		
		loItem.New = .T.
		This.AfterEditItem(loItem)
		loItem.New = .F.
		
		* If we're using version control, auto-commit the project or regenerate its
		* text equivalent.
		
		do case
			case not This.oSolution.lHaveVersionControl or not llUpdateProject
			case This.oSolution.lAutoCommitChanges
				lcMessage = This.cCommitMessage
				if not empty(lcMessage)
					This.oSolution.CommitFile(lcMessage, loProject.cProject)
					This.GetItemStatus(loProject.oProjectItem)
				endif not empty(lcMessage)
			case This.oSolution.nIncludeInVersionControl > 1
				This.oSolution.oVersionControl.ConvertBinaryToText(loProject.cProject)
				This.GetItemStatus(loProject.oProjectItem)
			otherwise
				This.GetItemStatus(loProject.oProjectItem)
		endcase
		
		* Reload the solution and select the node for the new item (make sure its
		* parent node is expanded).
		
		if loItem.Tags.Count > 0
			This.cFilterTags = loItem.Tags.Item(1)
		endif loItem.Tags.Count > 0
		This.LoadSolution()
		if loItem.Type = FILETYPE_CLASS
			lcHeaderType = FILETYPE_CLASSLIB
			lcHeaderID   = loItem.ParentKey
		else
			lcHeaderType = ccHEADER_TYPE
			lcProjectID  = loProject.oProjectItem.Key
			lcParentID   = iif(empty(loItem.ParentKey), lcProjectID, ;
				lcProjectID + ccKEY_SEPARATOR + loItem.ParentKey)
			lcHeaderID   = This.GetHeaderID(loItem.Type, lcParentID)
		endif loItem.Type = FILETYPE_CLASS
		lcHeaderKey = This.oTreeViewContainer.GetNodeKey(lcHeaderType, lcHeaderID)
		This.oTreeViewContainer.TreeExpand(lcHeaderKey, .T.)
		lcKey = This.oTreeViewContainer.GetNodeKey(loItem.Type, ;
			This.GetNodeKey(loItem))
		This.oTreeViewContainer.SelectNode(lcKey)
		
	ENDPROC

	PROCEDURE assigntags		&& Assigns tags to items in bulk
		*==============================================================================
		* Method:			AssignTags
		* Status:			Public
		* Purpose:			Assigns tags to items in bulk
		* Author:			Doug Hennig
		* Last Revision:	11/02/2017
		* Parameters:		none
		* Returns:			.T.
		* Environment in:	This.oSolution contains a reference to a
		*						ProjectExplorerSolution object
		* Environment out:	each item in each project in the solution matching the
		*						filter specified by the user has the specified tags
		*						added
		*==============================================================================
		
		local loForm, ;
			lcFilter, ;
			lcTags, ;
			luValue, ;
			llOK, ;
			loException, ;
			lcMessage, ;
			lnTags, ;
			laTags[1], ;
			loProject, ;
			lnFiles, ;
			laFiles[1], ;
			loItem, ;
			lnI, ;
			lcTag, ;
			loVersionControl
		private Item
		loForm = newobject('ProjectExplorerAssignTag', This.ClassLibrary)
		loForm.Show()
		if vartype(loForm) = 'O'
			lcFilter = loForm.cFilter
			lcTags   = loForm.cTags
		
		* Check that the filter is valid.
			
			Item = This.oProject.oProjectItems.Item(1)
			try
				luValue = evaluate(lcFilter)
				llOK    = vartype(luValue) = 'L'
			catch to loException
			endtry
			if llOK
		
		* If we're auto-commiting changes, get the commit message.
		
				if This.oSolution.lAutoCommitChanges
					lcMessage = This.GetCommitMessage()
				endif This.oSolution.lAutoCommitChanges
				lnTags = alines(laTags, lcTags, 5)
		
		* Add the tags to each item in each project in the solution that matches the
		* filter.
		
				lnFiles = 0
				for each loProject in This.oSolution.oProjects foxobject
					lnFiles = lnFiles + 1
					dimension laFiles[lnFiles]
					laFiles[lnFiles] = loProject.cMetaDataTable
					for each loItem in loProject.oProjectItems foxobject
						Item = loItem
						if evaluate(lcFilter)
							lcTags = loItem.GetTagString()
							for lnI = 1 to lnTags
								lcTag = laTags[lnI]
								if not lcTag + ccCRLF $ lcTags
									lcTags = lcTags + lcTag + ccCRLF
								endif not lcTag + ccCRLF $ lcTags
							next lnI
							loItem.SaveTagString(lcTags)
							loProject.SaveProjectItem(loItem, lcMessage, .T.)
						endif evaluate(lcFilter)
					next loItem
				next loProject
				loVersionControl = This.oSolution.oVersionControl
				do case
		
		* We don't have version control.
		
					case not This.oSolution.lHaveVersionControl
		
		* If we're supposed to commit changes, commit the meta data tables.
		
					case loVersionControl.lAutoCommitChanges and ;
						not empty(tcMessage)
						loVersionControl.CommitFiles(tcMessage, @laFiles)
		
		* If we're not committing the changes, regenerate the text equivalents of the
		* meta data tables.
		
					case not loVersionControl.lAutoCommitChanges and ;
						loVersionControl.nIncludeInVersionControl > 1
						for lnI = 1 to lnFiles
							loVersionControl.ConvertBinaryToText(laFiles[lnI])
						next lnI
				endcase
		
		* Update the clone and refresh the selected item if it was one of the items
		* changed.
		
				if vartype(This.oItem) = 'O'
					Item = This.oItem
					if evaluate(lcFilter)
						loItem = This.oProject.oProjectItems.Item(This.oItem.Key)
						This.oItem = loItem.Clone()
						This.RefreshForm()
					endif evaluate(lcFilter)
				endif vartype(This.oItem) = 'O' ...
			else
				This.ShowErrorMessage('The filter condition is invalid.' + ;
					iif(vartype(loException) = 'O', ' The error message is:' + ;
					ccCRLF + ccCRLF + loException.Message, ''))
			endif llOK
		endif vartype(loForm) = 'O'
		
	ENDPROC

	PROTECTED PROCEDURE buildproject		&& Builds the project
		*==============================================================================
		* Method:			BuildProject
		* Status:			Protected
		* Purpose:			Builds the project
		* Author:			Doug Hennig
		* Last Revision:	09/15/2017
		* Parameters:		tcOutputName    - the name of the file to create
		*					tnBuildAction   - the build action to use
		*					tlRebuildAll    - .T. to recompile all files
		*					tlShowErrors    - .T. to display errors
		*					tlBuildNewGUIDs - .T. to regenerate component IDs
		*					tlRunAfterBuild - .T. to run after build
		*					toProject       - a reference to the ProjectEngine object
		*						for the project to build (optional: if it isn't passed,
		*						This.oProject is used)
		* Returns:			.T.
		* Environment in:	This.oOperations contains a reference to a
		*						ProjectOperations object
		*					This.oProject contains a reference to a ProjectEngine
		*						object
		* Environment out:	the project may have been built
		*==============================================================================
		
		lparameters tcOutputName, ;
			tnBuildAction, ;
			tlRebuildAll, ;
			tlShowErrors, ;
			tlBuildNewGUIDs, ;
			tlRunAfterBuild, ;
			toProject
		local loProject, ;
			llOK, ;
			lcMessage, ;
			lcDelimiters, ;
			lnLen, ;
			loException as Exception
		private Project
		
		* If a project was passed, use it. Otherwise, use the selected project.
		
		if vartype(toProject) = 'O'
			loProject = toProject
		else
			loProject = This.oProject
		endif vartype(toProject) = 'O'
		
		* Build the project.
		
		llOK = This.oOperations.BuildProject(loProject.oProject, ;
			tcOutputName, tnBuildAction, tlRebuildAll, tlShowErrors, ;
			tlBuildNewGUIDs)
		if llOK
			do case
		
		* We don't have version control.
		
				case not This.oSolution.lHaveVersionControl
		
		* Commit the project if we're supposed to.
		
				case This.oSolution.lAutoCommitChanges
					lcMessage = This.oSolution.cBuildMessage
					if not empty(lcMessage)
						Project      = loProject.oProject
						lcDelimiters = set('TEXTMERGE', 1)
						lnLen        = len(lcDelimiters)/2
						set textmerge delimiters to '{', '}'
						lcMessage = textmerge(lcMessage)
						set textmerge delimiters to left(lcDelimiters, lnLen), ;
							right(lcDelimiters, lnLen)
					endif not empty(lcMessage)
					This.Commit(loProject.oProjectItem, lcMessage)
		
		* Regenerate the text if we're supposed to and update the status.
		
				otherwise
					if This.oSolution.nIncludeInVersionControl > 1
						This.oSolution.oVersionControl.ConvertBinaryToText(loProject.cProject)
					endif This.oSolution.nIncludeInVersionControl > 1
					This.GetItemStatus(loProject.oProjectItem)
			endcase
		
		* An addin could have changed properties of the project, so get the settings
		* again just in case.
		
			This.SelectProject()
				&& this sets oProjectSettings to the correct object
			This.oProjectSettings.GetSettings()
			This.RefreshForm()
		
		* Run the output file if we're supposed to.
		
			do case
				case tlRunAfterBuild and tnBuildAction = 2
					try
						do (tcOutputName)
					catch to loException
						This.ShowErrorMessage('The application could not be run after it ' + ;
							'was built. The error message is:' + ccCRLF + ccCRLF + ;
							loException.Message)
					endtry
				case tlRunAfterBuild and tnBuildAction = 3
					ExecuteFile(tcOutputName)
			endcase
		else
			do case
				case This.oOperations.nErrorCode = 1640
					lcMessage = 'To resolve this problem, run Visual FoxPro ' + ;
						'as Administrator and build the project again.'
			endcase
			This.ShowErrorMessage('The build failed. The error message is:' + ccCRLF + ;
				ccCRLF + This.oOperations.cErrorMessage + ;
				iif(empty(lcMessage), '', ccCRLF + ccCRLF + lcMessage))
		endif llOK
		
	ENDPROC

	PROCEDURE buildprojectdialog		&& Displays the build dialog before building the project
		*==============================================================================
		* Method:			BuildProjectDialog
		* Status:			Public
		* Purpose:			Displays the build dialog before building the project
		* Author:			Doug Hennig
		* Last Revision:	04/05/2017
		* Parameters:		toProject - a reference to the ProjectEngine object for
		*						the project to build (optional: if it isn't passed,
		*						This.oProject is used)
		* Returns:			none
		* Environment in:	This.oProject contains a reference to a ProjectEngine
		*						object
		* Environment out:	the project may have been build and defaults saved
		*==============================================================================
		
		lparameters toProject
		local loProject, ;
			loForm
		
		* If a project was passed, use it. Otherwise, use the selected project.
		
		if vartype(toProject) = 'O'
			loProject = toProject
		else
			loProject = This.oProject
		endif vartype(toProject) = 'O'
		
		* Create a build options dialog and set the default values.
		
		loForm = newobject('ProjectExplorerBuildOptions', This.ClassLibrary, '', ;
			loProject.cProject)
		with loProject.oProjectSettings
			loForm.nBuildAction   = max(.BuildAction, 1)
			loForm.lRecompile     = .Recompile
			loForm.lDisplayErrors = .DisplayErrors
			loForm.lRegenerate    = .RegenerateGUIDs
			loForm.lRunAfterBuild =	.RunAfterBuild
			loForm.cOutputFile    = GetProperFileCase(fullpath(evl(.OutputFile, ;
				forceext(loProject.cProject, 'exe')), This.oSolution.cSolutionFile))
		endwith
		loForm.Show()
		if vartype(loForm) = 'O'
		
		* Save the values chosen by the user as defaults next time.
		
			with loProject.oProjectSettings
				.OutputFile      = GetRelativePath(loForm.cOutputFile, ;
					This.oSolution.cSolutionFile)
				.BuildAction     = loForm.nBuildAction
				.Recompile       = loForm.lRecompile
				.DisplayErrors   = loForm.lDisplayErrors
				.RegenerateGUIDs = loForm.lRegenerate
				.RunAfterBuild   = loForm.lRunAfterBuild
			endwith
			This.oSolution.SaveSolution()
		
		* Build the project.
		
			This.BuildProject(loForm.cOutputFile, loForm.nBuildAction, ;
				loForm.lRecompile, loForm.lDisplayErrors, loForm.lRegenerate, ;
				loForm.lRunAfterBuild, loProject)
		endif vartype(loForm) = 'O'
		
	ENDPROC

	PROCEDURE buildprojectfromdefaults		&& Builds the project from default settings
		*==============================================================================
		* Method:			BuildProjectFromDefaults
		* Status:			Public
		* Purpose:			Builds the project from default settings
		* Author:			Doug Hennig
		* Last Revision:	04/05/2017
		* Parameters:		tlRebuild - .T. to rebuild the project
		*					toProject - a reference to the ProjectEngine object for
		*						the project to build (optional: if it isn't passed,
		*						This.oProject is used)
		* Returns:			.T.
		* Environment in:	This.oProject contains a reference to a ProjectEngine
		*						object
		*					This.oProjectSettings contains the default build settings
		*						to use
		* Environment out:	the project may have been built
		*==============================================================================
		
		lparameters tlRebuild, ;
			toProject
		local loProject, ;
			llHaveBuildDefaults, ;
			lnBuildAction, ;
			llRecompile, ;
			llDisplayErrors, ;
			llRegenerate, ;
			llRunAfterBuild, ;
			lcOutputName
		
		* If a project was passed, use it. Otherwise, use the selected project.
		
		if vartype(toProject) = 'O'
			loProject = toProject
		else
			loProject = This.oProject
		endif vartype(toProject) = 'O'
		
		* If there are saved build values, use them.
		
		with loProject.oProjectSettings
			llHaveBuildDefaults = .BuildAction > 0
			lnBuildAction       = iif(tlRebuild, 1, .BuildAction)
			llRecompile         = .Recompile
			llDisplayErrors     = .DisplayErrors
			llRegenerate        = .RegenerateGUIDs
			llRunAfterBuild     = .RunAfterBuild
			lcOutputName        = GetProperFileCase(fullpath(evl(.OutputFile, ;
				forceext(loProject.cProject, 'exe')), This.oSolution.cSolutionFile))
		endwith
		if llHaveBuildDefaults
			This.BuildProject(lcOutputName, lnBuildAction, llRecompile, ;
				llDisplayErrors, llRegenerate, llRunAfterBuild, loProject)
		else
		
		* If there aren't any saved values, get them from the user.
		
			This.BuildProjectDialog(loProject)
		endif llHaveBuildDefaults
		
	ENDPROC

	PROCEDURE buildsolutionfromdefaults		&& Builds the solution from default settings
		*==============================================================================
		* Method:			BuildSolutionFromDefaults
		* Status:			Public
		* Purpose:			Builds the solution from default settings
		* Author:			Doug Hennig
		* Last Revision:	04/05/2017
		* Parameters:		tlRebuild - .T. to rebuild the solution
		* Returns:			.T.
		* Environment in:	This.oSolution contains a reference to a
		*						ProjectExplorerSolution object
		* Environment out:	the projects in the solution may have been built
		*==============================================================================
		
		lparameters tlRebuild
		local loProject
		for each loProject in This.oSolution.oProjects foxobject
			This.BuildProjectFromDefaults(tlRebuild, loProject)
		next loProject
		
	ENDPROC

	PROCEDURE canbuildproject		&& Returns .T. if the project can be built
		*==============================================================================
		* Method:			CanBuildProject
		* Status:			Public
		* Purpose:			Returns .T. if the project can be built
		* Author:			Doug Hennig
		* Last Revision:	05/09/2017
		* Parameters:		none
		* Returns:			.T. if the project can be be built
		* Environment in:	This.oProject contains a reference to a ProjectEngine
		*						object
		* Environment out:	none
		*==============================================================================
		
		return vartype(This.oProject) = 'O' and ;
			This.oProject.oProjectItems.Count > 0 and ;
			not empty(This.oProject.oProject.MainFile)
	ENDPROC

	PROCEDURE cancommitorrevert		&& Returns .T. if the selected item can be committed or reverted
		*==============================================================================
		* Method:			CanCommitOrRevert
		* Status:			Public
		* Purpose:			Returns .T. if the selected item can be committed or
		*						reverted
		* Author:			Doug Hennig
		* Last Revision:	04/26/2017
		* Parameters:		none
		* Returns:			.T. if the selected item can be committed or reverted
		* Environment in:	This.oItem contains the selected ProjectItem
		*					This.oProject contains the selected project
		* Environment out:	none
		*==============================================================================
		
		local loItem
		loItem = iif(vartype(This.oItem) = 'O', This.oItem, This.oProject.oProjectItem)
		return loItem.IsFile and inlist(loItem.VersionControlStatus, ;
			ccVC_STATUS_MODIFIED, ccVC_STATUS_ADDED, ccVC_STATUS_REMOVED)
		
	ENDPROC

	PROCEDURE candisplayrevisionhistory		&& Returns .T. if we can display revision history for the selected item
		*==============================================================================
		* Method:			CanDisplayRevisionHistory
		* Status:			Public
		* Purpose:			Returns .T. if we can display revision history for the
		*						selected item
		* Author:			Doug Hennig
		* Last Revision:	04/26/2017
		* Parameters:		none
		* Returns:			.T. if we can display revision history for the selected
		*						item
		* Environment in:	This.oItem contains the selected ProjectItem
		*					This.oProject contains the selected project
		* Environment out:	none
		*==============================================================================
		
		local loItem
		loItem = iif(vartype(This.oItem) = 'O', This.oItem, This.oProject.oProjectItem)
		return loItem.IsFile and not empty(loItem.VersionControlStatus) and ;
			not inlist(loItem.VersionControlStatus, ccVC_STATUS_IGNORED, ;
			ccVC_STATUS_UNTRACKED)
		
	ENDPROC

	PROCEDURE candisplayvisualdiff		&& .T. if we can display the visual diff for the selected item
		*==============================================================================
		* Method:			CanDisplayVisualDiff
		* Status:			Public
		* Purpose:			.T. if we can display the visual diff for the selected
		*						item
		* Author:			Doug Hennig
		* Last Revision:	04/26/2017
		* Parameters:		none
		* Returns:			.T. if we can display the visual diff for the selected
		*						item
		* Environment in:	This.oItem contains the selected ProjectItem
		*					This.oProject contains the selected project
		* Environment out:	none
		*==============================================================================
		
		local loItem
		loItem = iif(vartype(This.oItem) = 'O', This.oItem, This.oProject.oProjectItem)
		return loItem.IsFile and loItem.VersionControlStatus = ccVC_STATUS_MODIFIED
		
	ENDPROC

	PROCEDURE checkitemfilter		&& Returns .T. if the specified item matches the tags filter specified in cFilterTags and filter specified in cItemFilter
		*==============================================================================
		* Method:			CheckTagsFilter
		* Status:			Public
		* Purpose:			Returns .T. if the specified item matches the tags filter
		*						specified in cFilterTags and filter specified in
		*						cItemFilter
		* Author:			Doug Hennig
		* Last revision:	09/15/2017
		* Parameters:		toItem - the ProjectItem to check
		* Returns:			.T. if the specified item matches the tags filter specified
		*						in cFilterTags and filter specified in cItemFilter
		* Environment in:	This.cFilterTags contains a comma-delimited list of tags to
		*						filter on
		*					This.cItemFilter contains the filter condition for items
		* Environment out:	none
		*==============================================================================
		
		lparameters toItem
		local laTags[1], ;
			lnTags, ;
			llReturn, ;
			lnI
		private Item
		
		* Create an array of tags we're filtering on.
		
		lnTags = alines(laTags, This.cFilterTags, 5, ',')
		
		* If a tag filter was specified, determine if this item matches the filter.
		
		if lnTags > 0
			llReturn = .F.
			for lnI = 1 to lnTags
				if toItem.Tags.GetKey(laTags[lnI]) > 0
					llReturn = .T.
					exit
				endif toItem.Tags.GetKey(laTags[lnI]) > 0
			next lnI
		else
			llReturn = .T.
		endif lnTags > 0
		
		* Now check the item filter if we're supposed to.
		
		if llReturn and not empty(This.cItemFilter) and not This.lIgnoreFilter
			Item = toItem
			try
				llReturn = evaluate(This.cItemFilter)
			catch to loException
				This.ShowErrorMessage('The filter condition is invalid. The error ' + ;
					'message is:' + ccCRLF + ccCRLF + loException.Message + ccCRLF + ;
					ccCRLF + 'The filter condition is being ignored.')
				This.lIgnoreFilter = .T.
			endtry
		endif llReturn ...
		return llReturn
		
	ENDPROC

	PROCEDURE cleanupsolution		&& Cleans up all projects in the solution
		*==============================================================================
		* Method:			CleanupSolution
		* Status:			Public
		* Purpose:			Cleans up all projects in the solution
		* Author:			Doug Hennig
		* Last Revision:	04/05/2017
		* Parameters:		none
		* Returns:			.T.
		* Environment in:	This.oSolution contains a reference to a
		*						ProjectExplorerSolution object
		* Environment out:	all projects were cleaned up
		*==============================================================================
		
		local llOK, ;
			loProject
		llOK = This.oSolution.CleanupSolution()
		if llOK
			for each loProject in This.oSolution.oProjects foxobject
				This.GetItemStatus(loProject.oProjectItem, .T.)
			next loProject
		else
			This.ShowErrorMessage(This.oSolution.cErrorMessage)
		endif llOK
		
	ENDPROC

	PROCEDURE commit		&& Commits changes to the selected file
		*==============================================================================
		* Method:			Commit
		* Status:			Public
		* Purpose:			Commits changes to the selected file
		* Author:			Doug Hennig
		* Last Revision:	04/28/2017
		* Parameters:		tuItem    - the item or file to commit (optional: if it
		*						isn't passed, the current file is committed)
		*					tcMessage - the message to use (optional: if it isn't
		*						passed, the user is prompted)
		* Returns:			.T.
		* Environment in:	This.oSolution contains a reference to a
		*						ProjectExplorerSolution object
		*					This.oProject contains a reference to a ProjectEngine
		*						object
		*					This.oAddins contains a reference to a ProjectAddins object
		* Environment out:	changes in the selected file were committed
		*==============================================================================
		
		lparameters tuItem, ;
			tcMessage
		local loSolution, ;
			loItem, ;
			lcFile, ;
			lcMessage, ;
			lcStatus
		
		* Bug out if we're not using version control.
		
		loSolution = This.oSolution
		if not loSolution.lHaveVersionControl
			return
		endif not loSolution.lHaveVersionControl
		
		* Figure out what to commit.
		
		do case
			case vartype(tuItem) = 'O'
				loItem = tuItem
				lcFile = loItem.Path
			case empty(tuItem) and vartype(This.oItem) = 'O'
				loItem = This.oItem
				lcFile = loItem.Path
			case empty(tuItem)
				loItem = This.oProject.oProjectItem
				lcFile = loItem.Path
			otherwise
				lcFile = tuItem
		endcase
		
		* Get the commit message if necessary.
		
		if empty(tcMessage)
			lcMessage = This.GetCommitMessage()
		else
			lcMessage = tcMessage
		endif empty(tcMessage)
		if not empty(lcMessage)
		
		* Commit the changes.
		
			lcStatus = loSolution.CommitFile(lcMessage, lcFile)
		
		* Update the status.
		
			do case
				case empty(lcStatus)
					This.ShowErrorMessage(loSolution.cErrorMessage)
				case vartype(loItem) = 'O'
					loItem.VersionControlStatus = lcStatus
					This.GetItemStatus(loItem, .T.)
				otherwise
			endcase
		endif not empty(lcMessage)
		
	ENDPROC

	PROCEDURE commitall		&& Commits changes to all files
		*==============================================================================
		* Method:			CommitAll
		* Status:			Public
		* Purpose:			Commits changes to all files
		* Author:			Doug Hennig
		* Last Revision:	04/03/2017
		* Parameters:		tcMessage - the message to use (optional: if it isn't
		*						passed, the user is prompted)
		* Returns:			.T.
		* Environment in:	This.oSolution contains a reference to a
		*						ProjectExplorerSolution object
		*					This.oProject contains a reference to a ProjectEngine
		*						object
		*					This.oAddins contains a reference to a ProjectAddins object
		* Environment out:	changes to all files were committed
		*==============================================================================
		
		lparameters tcMessage
		local loSolution, ;
			lcMessage
		
		* Bug out if we're not using version control.
		
		loSolution = This.oSolution
		if not loSolution.lHaveVersionControl
			return
		endif not loSolution.lHaveVersionControl
		
		* Get the commit message if necessary.
		
		if empty(tcMessage)
			lcMessage = This.GetCommitMessage()
		else
			lcMessage = tcMessage
		endif empty(tcMessage)
		if not empty(lcMessage)
		
		* Commit the changes then reload the solution with the status for all files.
		
			if loSolution.CommitAllFiles(lcMessage)
				This.LoadSolution(.T.)
			else
				This.ShowErrorMessage(loSolution.cErrorMessage)
			endif loSolution.CommitAllFiles(lcMessage)
		endif not empty(lcMessage)
		
	ENDPROC

	PROCEDURE csolutionfolder_access
		local lcPath
		lcPath = justpath(This.oSolution.cSolutionFile)
		if empty(lcPath)
			lcPath = justpath(GetProperFileCase(fullpath(This.oSolution.cSolutionFile)))
		endif empty(lcPath)
		return lcPath
		
	ENDPROC

	PROCEDURE displayproperties
		lparameters tnPage
		local lcType, ;
			lnType, ;
			lcKey, ;
			loItem
		
		* Flag that nothing has changed.
		
		This.lChanged = .F.
		
		* Get a reference to the selected object and set cSelectedType to the type of
		* item selected.
		
		This.SelectProject()
		if This.cCurrentNodeType = ccHEADER_TYPE
			This.oItem = .NULL.
			lcType     = strextract(This.cCurrentNodeID, '', ccKEY_SEPARATOR)
			lnType     = ascan(This.aHeaders, lcType, -1, -1, 2, 14)
			if lnType > 0
				This.cSelectedType = This.aHeaders[lnType, 1]
			else
				This.cSelectedType = ''
			endif lnType > 0
		
		* Handle whether we're displaying project properties or not.
		
			if tnPage = 9
				This.pgfProperties.Visible = .F.
				This.oProjectInfo.Visible  = .T.
				if This.oProjectInfo.pgfProperties.ActivePage = 3
					This.oProjectInfo.GetServers()
				endif This.oProjectInfo.pgfProperties.ActivePage = 3
				Thisform.oProjectSettings.AttachIcon = not empty(Thisform.oProjectSettings.Icon)
				This.oProjectInfo.Refresh()
			else
				This.oProjectInfo.Visible  = .F.
				This.pgfProperties.Visible = .T.
			endif tnPage = 9
		else
			This.oProjectInfo.Visible  = .F.
			This.pgfProperties.Visible = .T.
			loItem                     = This.GetItemForNode(This.cCurrentNodeID)
			This.oItem                 = loItem.Clone()
			This.cSelectedType         = This.oItem.Type
		endif This.cCurrentNodeType = ccHEADER_TYPE
		
		* Refresh the toolbar and do the normal behavior.
		
		This.oProjectToolbar.Refresh()
		dodefault(tnPage)
		
	ENDPROC

	PROCEDURE editcategories		&& Display the Category Editor
		*==============================================================================
		* Method:			EditCategories
		* Status:			Public
		* Purpose:			Display the Category Editor
		* Author:			Doug Hennig
		* Last Revision:	03/25/2017
		* Parameters:		none
		* Returns:			.T.
		* Environment in:	none
		* Environment out:	the Category Editor was displayed
		*==============================================================================
		
		local loForm
		loForm = newobject('ProjectExplorerCategoryEditor', This.ClassLibrary, '', ;
			This.oCategoryManager)
		loForm.Show()
		
	ENDPROC

	PROCEDURE edititem		&& Edits the selected item
		*==============================================================================
		* Method:			EditItem
		* Status:			Public
		* Purpose:			Edits the selected item
		* Author:			Doug Hennig
		* Last Revision:	05/15/2017
		* Parameters:		none
		* Returns:			.T.
		* Environment in:	This.oOperations contains a reference to a
		*						ProjectOperations object
		*					This.oProject contains a reference to a ProjectEngine
		*						object
		*					This.oEvents contains a reference to a
		*						ProjectExplorerWindowManager object
		*					This.oWindows contains a collection of information about
		*						open editing windows
		* Environment out:	the item may have been edited
		*					for those items with a modeless designer, window event
		*						binding is set up so This.EditWindowClosed is called
		*						when the editor window is closed
		*					for those items with a modal designer, see AfterEditItem
		*==============================================================================
		
		local loProject, ;
			loItem, ;
			loParent, ;
			lcCaption, ;
			loEditedItem, ;
			llEditing, ;
			lnhWnd
		
		* Get the original item in the collection, not the clone displayed in the form.
		
		loProject = This.oProject
		loItem    = This.GetItemForNode(This.cCurrentNodeID)
		
		* Get the checksum for the file and associated files. We use this to determine
		* if the item was modified or if the user just closed the designer.
		
		lcFile = loItem.Path
		if loItem.HasParent
			lcFile = loItem.ParentPath
		endif loItem.HasParent
		loItem.Checksum = GetChecksum(lcFile)
		
		* Have the operations object edit the item.
		
		This.oOperations.EditItem(loProject.oProject, loItem)
		if not empty(This.oOperations.cErrorMessage)
			This.ShowErrorMessage(This.oOperations.cErrorMessage)
			return
		endif not empty(This.oOperations.cErrorMessage)
		
		* For items with a modal designer (basically, the Table Designer), by the time
		* we get here, the designer is closed, so handle the post-edit tasks.
		
		if inlist(loItem.Type, FILETYPE_FIELD, FILETYPE_INDEX)
			loParent  = loProject.GetItemParent(loItem)
			lcCaption = loParent.DesignerCaption
		else
			lcCaption = loItem.DesignerCaption
		endif inlist(loItem.Type ...
		if empty(lcCaption)
			This.AfterEditItem(loItem)
		
		* For items with a modeless designer, set up windows event binding so we know
		* when the user closes the window. Note that we check whether the item is
		* already being modified.
		
		else
			for each loEditedItem in This.oWindows foxobject
				if loEditedItem.Path == loItem.Path
					llEditing = .T.
					exit
				endif loEditedItem.Path == loItem.Path
			next loEditedItem
			if not llEditing
				lnhWnd = This.oEvents.SetBinding(lcCaption)
				if lnhWnd > 0
					This.oWindows.Add(loItem, transform(lnhWnd))
					bindevent(This.oEvents, 'WindowDestroyEvent', This, ;
						'EditWindowClosed')
				endif lnhWnd > 0
			endif not llEditing
		endif empty(lcCaption)
		
	ENDPROC

	PROCEDURE editsolutionproperties		&& Edits solution properties
		*==============================================================================
		* Method:			EditSolutionProperties
		* Status:			Public
		* Purpose:			Edits the solution properties
		* Author:			Doug Hennig
		* Last Revision:	11/23/2017
		* Parameters:		none
		* Returns:			.T.
		* Environment in:	This.oSolution contains a reference to a
		*						ProjectExplorerSolution object
		* Environment out:	if version control was turned on, a repository was created,
		*						all files in all projects were added to it, and the
		*						TreeView was reloaded so all files have the correct
		*						image displayed
		*					changes to solution settings were saved
		*==============================================================================
		
		* Get the settings to use.
		
		local loSolution, ;
			loForm, ;
			lcFile, ;
			lcSettings, ;
			lcProvider, ;
			lcFolder, ;
			llHaveRepository, ;
			llCreateRepository, ;
			loProgress
		loSolution = This.oSolution
		loForm     = newobject('ProjectExplorerSolutionProperties', ;
			This.ClassLibrary, '', loSolution, This.cSettingsFile, ;
			This.cDefaultVersionControlProvider)
		loForm.Show()
		do case
			case vartype(loForm) <> 'O'
		
		* If we already have version control turned on, save the settings.
		
			case loSolution.lHaveVersionControl
				loSolution.lAutoCommitChanges    = loForm.lAutoCommit
				loSolution.cFileAddMessage       = alltrim(loForm.cFileAddMessage)
				loSolution.cFileRemoveMessage    = alltrim(loForm.cFileRemoveMessage)
				loSolution.cCleanupMessage       = alltrim(loForm.cCleanupMessage)
				loSolution.cSavedSolutionMessage = alltrim(loForm.cSavedSolutionMessage)
				loSolution.cBuildMessage         = alltrim(loForm.cBuildMessage)
				loSolution.SaveSolution()
		
		* Add version control to the solution.
		
			case loForm.lUseVersionControl and not loSolution.lHaveVersionControl
		
		* If we didn't have a default provider before, use this choice as the default.
		
				if empty(This.cDefaultVersionControlProvider)
					This.cDefaultVersionControlProvider = loForm.cVersionControlProvider
				endif empty(This.cDefaultVersionControlProvider)
		
		* See if a repository already exists.
		
				lcFile = This.cSettingsFile
				if file(lcFile)
					lcSettings = filetostr(lcFile)
					lcProvider = strextract(lcSettings, 'name="' + ;
						loForm.cVersionControlProvider + '"', '/>', 1, 1)
					lcFolder   = strextract(lcProvider, 'folder="', '"')
					llHaveRepository = directory(addbs(This.cSolutionFolder) + ;
						lcFolder, 1)
				endif file(lcFile)
		
		* See if we're supposed to create a repository (there may already be one
		* somewhere).
		
				if not llHaveRepository
					llCreateRepository = This.YesNo('Do you want Project Explorer to ' + ;
						'create a repository for this solution?' + ccCRLF + ccCRLF + ;
						'Choose No if a repository already exists, in which case you ' + ;
						'will be asked to locate the folder containing the repository.')
				endif not llHaveRepository
		
		* Add version control to the solution.
		
				do case
					case llHaveRepository
						lcRepositoryFolder = This.cSolutionFolder
					case llCreateRepository
						loProgress = newobject('ProjectExplorerProgress', This.ClassLibrary, ;
							'', 'Adding version control...')
						loProgress.Show()
						lcRepositoryFolder = This.cSolutionFolder
					otherwise
						lcRepositoryFolder = getdir(This.cSolutionFolder, ;
							'Select the parent folder of the repository folder', ;
							'Select Parent of Repository', 64)
				endcase
				if not empty(lcRepositoryFolder)
					loSolution.AddVersionControl(loForm.cVersionControlClass, ;
						loForm.cVersionControlLibrary, ;
						loForm.nIncludeInVersionControl, ;
						loForm.lAutoCommit, loForm.cFileAddMessage, ;
						loForm.cFileRemoveMessage, loForm.cCleanupMessage, ;
						loForm.cVersionControlAddMessage, This.cFoxBin2PRGLocation, ;
						lcRepositoryFolder, llCreateRepository)
					This.LoadSolution(.T.)
					if llCreateRepository
						loProgress.Release()
					endif llCreateRepository
				endif not empty(lcRepositoryFolder)
		endcase
		
	ENDPROC

	PROCEDURE edittags		&& Display the Tag Editor
		*==============================================================================
		* Method:			EditTags
		* Status:			Public
		* Purpose:			Display the Tag Editor
		* Author:			Doug Hennig
		* Last Revision:	05/25/2017
		* Parameters:		none
		* Returns:			.T.
		* Environment in:	none
		* Environment out:	the Tag Editor was displayed
		*==============================================================================
		
		local loForm
		loForm = newobject('ProjectExplorerTagEditor', This.ClassLibrary, '', ;
			This.cMainFolder)
		loForm.Show()
		This.oProjectToolbar.cboTagFilter.Requery()
		
	ENDPROC

	PROCEDURE editwindowclosed		&& Fired when a VFP IDE edit window is closed
		*==============================================================================
		* Method:			EditWindowClosed
		* Status:			Public
		* Purpose:			Fired when a VFP IDE edit window is closed
		* Author:			Doug Hennig
		* Last Revision:	04/21/2017
		* Parameters:		nhWnd - the handle for the window
		* Returns:			.T.
		* Environment in:	This.oWindows contains a collection of open editor windows
		*						with the key being the window handle and the item being
		*						the ProjectItem object for the file being edited
		* Environment out:	the window is removed from oWindows
		*					This.oEventTimer is set up to call either AfterEditItem or
		*						AfterNewItem, depending on whether this is a new item
		*						or not
		*					see AfterEditItem and AfterNewItem
		* Note:				the reason we use a timer rather than calling AfterEditItem
		*						or AfterNewItem directly is that we need
		*						ProjectExplorerWindowManager.WindowEventHandler, which
		*						called us, to finish or, in the case of the Menu
		*						Designer and View Designer, files are still open and
		*						we can't close them to get the file status
		*==============================================================================
		
		lparameters nhWnd
		local loItem, ;
			loProject
		loItem = This.oWindows.Item(transform(nHwnd))
		if vartype(loItem) = 'O'
			This.oWindows.Remove(transform(nHwnd))
			This.oEventTimer.oItem   = loItem
			This.oEventTimer.Enabled = .T.
		endif vartype(loItem) = 'O'
		
	ENDPROC

	PROCEDURE excludefile		&& Toggles the Exclude setting for the selected item
		*==============================================================================
		* Method:			ExcludeFile
		* Status:			Public
		* Purpose:			Toggles the Exclude setting for the selected item
		* Author:			Doug Hennig
		* Last Revision:	04/05/2017
		* Parameters:		none
		* Returns:			.T.
		* Environment in:	This.oItem contains a reference to the currently selected
		*						item
		* Environment out:	This.oItem.Exclude is toggled and the change saved
		*==============================================================================
		
		if vartype(This.oItem) <> 'O' or not This.oItem.CanInclude or ;
			This.oItem.MainFile
			return .F.
		endif vartype(This.oItem) <> 'O' ...
		This.oItem.Exclude = not This.oItem.Exclude
		This.lChanged      = .T.
		This.SaveSettings()
		
	ENDPROC

	PROCEDURE expand		&& Expands or collapses the form
		*==============================================================================
		* Method:			Expand
		* Status:			Public
		* Purpose:			Expands or collapses the form
		* Author:			Doug Hennig
		* Last Revision:	05/25/2017
		* Parameters:		none
		* Returns:			.T.
		* Environment in:	This.lExpanded is .T. if the form is expanded or .F. if
		*						collapsed
		* Environment out:	This.lExpanded is toggled as is the form's expanded status
		*==============================================================================
		
		with This
		
		* Collapse the form. Start by finding the right-most toolbar button as the
		* minimum width to use and use that if we don't have a saved collapse width.
		
			if .lExpanded
				lnWidth = 0
				for each loControl in .oProjectToolbar.Controls foxobject
					lnRight = loControl.Left + loControl.Width
					if lnRight > lnWidth
						lnWidth = lnRight + 5
					endif lnRight > lnWidth
				next loControl
				if .nSavedCollapseWidth = 0
					.nSavedCollapseWidth = lnWidth
				endif .nSavedCollapseWidth = 0
				.pgfProperties.Visible             = .F.
				.pgfProperties.Anchor              = 0
				.oProjectInfo.Visible              = .F.
				.oProjectInfo.Anchor               = 0
				.oProjectInfo.pgfProperties.Anchor = 0
				.oSplitter.Visible                 = .F.
				.oSplitter.Anchor                  = 0
				.oTreeViewContainer.Anchor         = 0
				.nSavedMinWidth                    = .MinWidth
				.nSavedWidth                       = .Width
				.nSavedTreeViewWidth               = .oTreeViewContainer.Width
				.MinWidth                          = lnWidth
				.Width                             = .nSavedCollapseWidth
				store .Width + 2 to .oTreeViewContainer.Width, ;
					.oTreeViewContainer.oTree.Width, .nSplitterLeft
				.pgfProperties.Left                = .nSplitterLeft + .oSplitter.Width
				.pgfProperties.Width               = max(.pgfProperties.Width, ;
					.oSplitter.nObject2MinSize)
				.oProjectInfo.Left                 = .pgfProperties.Left
				.oProjectInfo.Width                = .pgfProperties.Width
				.oProjectInfo.pgfProperties.Width  = .oProjectInfo.Width + 1
				.oTreeViewContainer.Anchor         = 15
				.oProjectToolbar.cmdExpand.Picture = .cMainFolder + ;
					'Source\Images\ProjectExplorerExpand.bmp'
				store 'Expand the window' to .oProjectToolbar.cmdExpand.ToolTipText, ;
					.oProjectToolbar.cmdExpand.StatusBarText
				.oTreeViewContainer.SetFocus()
		
		* Expand the form.
		
			else
				.nSavedCollapseWidth       = .Width
				.oTreeViewContainer.Anchor = 0
				.MinWidth                  = .nSavedMinWidth
				.Width                     = max(.nSavedWidth, .Width)
				store .nSavedTreeViewWidth to .oTreeViewContainer.Width, ;
					.oTreeViewContainer.oTree.Width
				.oTreeViewContainer.Anchor         = 15
				.oSplitter.Left                    = .nSavedTreeViewWidth
				.pgfProperties.Left                = .nSavedTreeViewWidth + ;
					.oSplitter.Width
				.pgfProperties.Width               = .Width - .pgfProperties.Left + 3
				.pgfProperties.Anchor              = 13
				.oProjectInfo.Left                 = .pgfProperties.Left
				.oProjectInfo.Width                = .pgfProperties.Width
				.oProjectInfo.pgfProperties.Width  = .oProjectInfo.Width + 1
				.oProjectInfo.Anchor               = 13
				.oSplitter.Visible                 = .T.
				.oSplitter.Anchor                  = 13
				.oProjectToolbar.cmdExpand.Picture = .cMainFolder + ;
					'Source\Images\ProjectExplorerCollapse.bmp'
				store 'Collapse the window' to .oProjectToolbar.cmdExpand.ToolTipText, ;
					.oProjectToolbar.cmdExpand.StatusBarText
				.oTreeViewContainer.SelectNode(.oTreeViewContainer.oSelectedNode)
			endif .lExpanded
			.lExpanded = not .lExpanded
		endwith
		
	ENDPROC

	PROTECTED PROCEDURE getcommitmessage		&& Gets a commit message
		*==============================================================================
		* Method:			GetCommitMessage
		* Status:			Protected
		* Purpose:			Gets a commit message
		* Author:			Doug Hennig
		* Last Revision:	05/03/2017
		* Parameters:		none
		* Returns:			the message if one was typed
		* Environment in:	none
		* Environment out:	none
		*==============================================================================
		
		local loForm, ;
			lcMessage
		if not empty(This.cTestCommitMessage)
			lcMessage = This.cTestCommitMessage
		else
			loForm = newobject('CommitMessage', This.ClassLibrary)
			loForm.Show()
			if vartype(loForm) = 'O'
				lcMessage = loForm.cMessage
			else
				lcMessage = ''
			endif vartype(loForm) = 'O'
		endif not empty(This.cTestCommitMessage)
		return lcMessage
		
	ENDPROC

	PROTECTED PROCEDURE getcurrentdatabase		&& Gets the current database given the selected node
		*==============================================================================
		* Method:			GetCurrentDatabase
		* Status:			Protected
		* Purpose:			Gets the current database given the selected node
		* Author:			Doug Hennig
		* Last Revision:	04/21/2017
		* Parameters:		none
		* Returns:			the ProjectItem for the current database
		* Environment in:	This.oTreeViewContainer.cCursorAlias contains the alias
		*						of the TreeView cursor, which has records for the
		*						displayed items
		* Environment out:	none
		*==============================================================================
		
		local lnSelect, ;
			lnRecno, ;
			lcParentID, ;
			loItem
		lnSelect = select()
		select (This.oTreeViewContainer.cCursorAlias)
		lnRecno    = recno()
		lcParentID = trim(PARENTID)
		do while PARENTTYPE <> FILETYPE_DATABASE
			= seek(lcParentID, alias(), 'ID')
			lcParentID = trim(PARENTID)
		enddo while PARENTTYPE <> FILETYPE_DATABASE
		if between(lnRecno, 1, reccount())
			go (lnRecno)
		endif between(lnRecno, 1, reccount())
		loItem = This.GetItemForNode(lcParentID)
		select (lnSelect)
		return loItem
		
	ENDPROC

	PROCEDURE getheaderid		&& Gets the ID for the desired header
		*==============================================================================
		* Method:			GetHeaderID
		* Status:			Public
		* Purpose:			Gets the ID for the desired header
		* Author:			Doug Hennig
		* Last Revision:	03/31/2017
		* Parameters:		tuType   - the index for This.aHeaders for the type or
		*						the type itself
		*					tcParent - the ID of the parent for the header
		* Returns:			the ID for the header
		* Environment in:	This.aHeaders column 2 contains the header text
		* Environment out:	none
		*==============================================================================
		
		lparameters tuType, ;
			tcParent
		local lnType, ;
			lcID
		if vartype(tuType) = 'C'
			lnType = ascan(This.aHeaders, tuType, -1, -1, 1, 14)
		else
			lnType = tuType
		endif vartype(tuType) = 'C'
		if lnType > 0
			lcID = This.aHeaders[lnType, 2] + ccKEY_SEPARATOR + tcParent
		else
			lcID = ''
		endif lnType > 0
		return lcID
		
	ENDPROC

	PROCEDURE getimageforitem		&& Gets the image to use in the TreeView for the specified item
		*==============================================================================
		* Method:			GetImageForItem
		* Status:			Public
		* Purpose:			Gets the image to use in the TreeView for the specified
		*						item
		* Author:			Doug Hennig
		* Last Revision:	10/07/2017
		* Parameters:		toItem - the item to get the image for
		* Returns:			the image to use
		* Environment in:	This.oSolution contains a reference to a
		*						ProjectExplorerSolution object
		* Environment out:	the custom icon for a class may have been loaded into the
		*						TreeView container's ImageList control
		*==============================================================================
		
		lparameters toItem
		local lcImage, ;
			llHaveIcon, ;
			lnImage
		lcImage = toItem.TreeViewImage
		do case
		
		* If the item is excluded, use that image.
		
		*** Note: we used to use an "excluded" image but now display CHR(216) as part of the text
		***	case toItem.Exclude
		***		lcImage = 'excluded'
		
		* Handle a class with a custom icon if we're supposed to.
		
			case toItem.Type = FILETYPE_CLASS and ;
				This.lUseContainerIcons and not empty(toItem.Icon) and ;
				file(fullpath(toItem.Icon, toItem.Path))
				lcImage = toItem.Key
				try
					This.oTreeViewContainer.oImageList.ListImages.Item(lcImage)
					llHaveIcon = .T.
				catch
				endtry
				if not llHaveIcon
					try
						lnImage = This.oTreeViewContainer.oImageList.ListImages.Count
						This.oTreeViewContainer.oImageList.ListImages.Add(lnImage + 1, lcImage, ;
							loadpicture(fullpath(toItem.Icon, toItem.Path)))
					catch
						lcImage = toItem.ItemBaseClass
					endtry
				endif not llHaveIcon
		
		* We don't have version control or this isn't a file.
		
			case not This.oSolution.lHaveVersionControl or not toItem.IsFile
		
		* Get the appropriate image for the file's version control status.
		
			case toItem.VersionControlStatus = ccVC_STATUS_MODIFIED
				lcImage = 'modified'
			case toItem.VersionControlStatus = ccVC_STATUS_ADDED
				lcImage = 'added'
			case toItem.VersionControlStatus = ccVC_STATUS_CLEAN
				lcImage = 'clean'
			case toItem.VersionControlStatus = ccVC_STATUS_UNTRACKED
				lcImage = 'unversioned'
			case toItem.VersionControlStatus = ccVC_STATUS_IGNORED
				lcImage = 'ignored'
			case toItem.VersionControlStatus = ccVC_STATUS_REMOVED
				lcImage = 'removed'
		endcase
		return lcImage
		
	ENDPROC

	PROCEDURE getitemfornode		&& Gets the item for the specified node key
		*==============================================================================
		* Method:			GetItemForNode
		* Status:			Public
		* Purpose:			Gets the item for the specified node key
		* Author:			Doug Hennig
		* Last Revision:	04/25/2017
		* Parameters:		tcKey - the key for the node
		* Returns:			the item for the selected node
		* Environment in:	This.oProject is a reference to the project the selected
		*						item belongs to
		* Environment out:	none
		*==============================================================================
		
		lparameters tcKey
		local lcKey, ;
			loItem, ;
			loProject
		lcKey  = substr(tcKey, at(ccKEY_SEPARATOR, tcKey) + 1)
		loItem = This.oProject.oProjectItems.Item(lcKey)
		
		* If we didn't find the item, check all projects.
		
		if isnull(loItem)
			for each loProject in This.oSolution.oProjects foxobject
				if loProject.cProject <> This.oProject.cProject
					loItem = loProject.oProjectItems.Item(lcKey)
					if not isnull(loItem)
						exit
					endif not isnull(loItem)
				endif loProject.cProject <> This.oProject.cProject
			next loProject
		endif isnull(loItem)
		return loItem
		
	ENDPROC

	PROCEDURE getitemstatus		&& Gets the version control status for the specified item and updates its TreeView image
		*==============================================================================
		* Method:			GetItemStatus
		* Status:			Public
		* Purpose:			Gets the version control status for the specified item and
		*						updates its TreeView image
		* Author:			Doug Hennig
		* Last Revision:	04/28/2017
		* Parameters:		toItem     - the item to get the status for
		*					tlNoStatus - .T. to not get the version control status
		*						(we already have it)
		* Returns:			.T.
		* Environment in:	This.oSolution contains a reference to a
		*						ProjectExplorerSolution object
		* Environment out:	the VersionControlStatus property of the item contains its
		*						current status and its TreeView image may have changed
		*==============================================================================
		
		lparameters toItem, ;
			tlNoStatus
		local lcImage, ;
			loNode
		if toItem.IsFile and not tlNoStatus
			toItem.VersionControlStatus = This.oSolution.GetStatusForFile(toItem.Path)
		endif toItem.IsFile ...
		lcImage = This.GetImageForItem(toItem)
		loNode  = This.GetNodeForItem(toItem)
		if vartype(loNode) = 'O' and loNode.Image <> lcImage
			loNode.Image = lcImage
		endif vartype(loNode) = 'O' ...
		
	ENDPROC

	PROTECTED PROCEDURE getnodeforitem		&& Gets the TreeView node for the specified item
		*==============================================================================
		* Method:			GetNodeForItem
		* Status:			Protected
		* Purpose:			Gets the TreeView node for the specified item
		* Author:			Doug Hennig
		* Last Revision:	04/21/2017
		* Parameters:		toItem - the item to get the node for
		* Returns:			the node for the item or NULL if the node doesn't exist
		* Environment in:	none
		* Environment out:	none
		*==============================================================================
		
		lparameters toItem
		local lcKey, ;
			loNode
		lcKey = This.oTreeViewContainer.GetNodeKey(toItem.Type, ;
			This.GetNodeKey(toItem))
		if type('This.oTreeViewContainer.oTree.Nodes[lcKey]') = 'O'
			loNode = This.oTreeViewContainer.oTree.Nodes[lcKey]
		else
			loNode = .NULL.
		endif type('This.oTreeViewContainer.oTree.Nodes[lcKey]') = 'O'
		return loNode
		
	ENDPROC

	PROCEDURE getnodekey		&& Gets the node key for the selected item
		*==============================================================================
		* Method:			GetNodeKey
		* Status:			Public
		* Purpose:			Gets the node key for the selected item
		* Author:			Doug Hennig
		* Last Revision:	04/25/2017
		* Parameters:		toItem - the item to get the key for
		* Returns:			the key for the item in the TreeView (must call
		*						This.oTreeViewContainer.GetNodeKey to get the complete
		*						key, including the type)
		* Environment in:	none
		* Environment out:	none
		*==============================================================================
		
		lparameters toItem
		return iif(toItem.Type = ccHEADER_TYPE, '', justfname(toItem.Project) + ;
			ccKEY_SEPARATOR) + toItem.Key
		
	ENDPROC

	PROCEDURE getoptions		&& Displays the Options dialog
		*==============================================================================
		* Method:			GetOptions
		* Status:			Public
		* Purpose:			Displays the Options dialog
		* Author:			Doug Hennig
		* Last Revision:	11/22/2017
		* Parameters:		none
		* Returns:			.T.
		* Environment in:	none
		* Environment out:	the options dialog was displayed and any changes saved
		*==============================================================================
		
		loForm = newobject('ProjectExplorerOptions', This.ClassLibrary, '', ;
			This.cSettingsFile)
		with This
			loForm.nDblClickAction         = iif(.lModifyOnDblClick, 2, 1)
			loForm.cVersionControlProvider = .cDefaultVersionControlProvider
			loForm.lDisplayIcons           = .lUseContainerIcons
			loForm.lDisplayFullPath        = .lDisplayFullPath
			loForm.lAddFiles               = .lAddFileToVersionControlOnAdd
			loForm.lRemoveFiles            = .lRemoveFileFromVersionControlOnRemove
			loForm.lShowSplitter           = .oSplitter.lShowGripper
			loForm.lAddinDebugMode         = .lAddinDebugMode
			loForm.nWindowType             = icase(.Desktop, 1, .Dockable = 1, 2, 3)
			loForm.lAllowAnyFileType       = .lAllowAnyFileType
		endwith
		loForm.Show()
		if vartype(loForm) = 'O'
			with This
				.lModifyOnDblClick                     = loForm.nDblClickAction = 2
				.cDefaultVersionControlProvider        = loForm.cVersionControlProvider
				.lUseContainerIcons                    = loForm.lDisplayIcons
				.lDisplayFullPath                      = loForm.lDisplayFullPath
				.lAddFileToVersionControlOnAdd         = loForm.lAddFiles
				.lRemoveFileFromVersionControlOnRemove = loForm.lRemoveFiles
				.lAddinDebugMode                       = loForm.lAddinDebugMode
				.oSplitter.lShowGripper                = loForm.lShowSplitter
				.lAllowAnyFileType                     = loForm.lAllowAnyFileType
		
		* Handle debugging addin execution.
		
				if .lAddinDebugMode
					bindevent(.oAddins, 'AddinsExecuted', This, 'ShowMessage')
				else
					unbindevents(.oAddins, 'AddinsExecuted', This, 'ShowMessage')
				endif .lAddinDebugMode
		
		* Save the window type setting.
		
				.oRegistry.SetKey(ccPROJECT_EXPLORER_KEY, 'WindowType', ;
					loForm.nWindowType)
		
		* Save the VFP settings (our settings are saved when the form is closed).
		
				.oRegistry.SetKey(ccVFP_OPTIONS, 'ProjectClick', ;
					iif(.lModifyOnDblClick, '0', '1'))
				.oRegistry.SetKey(ccVFP_OPTIONS, 'UseContainerIcons', ;
					iif(.lUseContainerIcons, '1', '0'))
				.oRegistry.SetKey(ccVFP_OPTIONS, 'SCCAddFileOnAdd', ;
					iif(.lAddFileToVersionControlOnAdd, '1', '0'))
				.oRegistry.SetKey(ccVFP_OPTIONS, 'SCCRemoveFileOnRemove', ;
					iif(.lRemoveFileFromVersionControlOnRemove, '1', '0'))
			endwith
		endif vartype(loForm) = 'O'
		
	ENDPROC

	PROCEDURE getprojectmanagersettings		&& Gets VFP Project Manager default settings
		*==============================================================================
		* Method:			GetProjectManagerSettings
		* Status:			Public
		* Purpose:			Gets VFP Project Manager default settings
		* Author:			Doug Hennig
		* Last Revision:	02/27/2017
		* Parameters:		none
		* Returns:			.T.
		* Environment in:	none
		* Environment out:	various properties are set to the Project Manager defaults
		*						from the Tools, Options dialog
		*==============================================================================
		
		with This
			.lModifyOnDblClick                     = .oRegistry.GetKey(ccVFP_OPTIONS, ;
				'ProjectClick', '0') = '0'
			.lUseContainerIcons                    = .oRegistry.GetKey(ccVFP_OPTIONS, ;
				'UseContainerIcons', '1') = '1'
			.lAddFileToVersionControlOnAdd         = .oRegistry.GetKey(ccVFP_OPTIONS, ;
				'SCCAddFileOnAdd', '1') = '1'
			.lRemoveFileFromVersionControlOnRemove = .oRegistry.GetKey(ccVFP_OPTIONS, ;
				'SCCRemoveFileOnRemove', '1') = '1'
		endwith
		
	ENDPROC

	PROCEDURE gettextforitem		&& Gets the text for the TreeView node for the specified item
		*==============================================================================
		* Method:			GetTextForItem
		* Status:			Public
		* Purpose:			Gets the text for the TreeView node for the specified item
		* Author:			Doug Hennig
		* Last Revision:	10/07/2017
		* Parameters:		toItem - the item to get the text for
		* Returns:			the text to use
		* Environment in:	none
		* Environment out:	none
		*==============================================================================
		
		lparameters toItem
		local lcText
		lcText = iif(toItem.Exclude, chr(216) + ' ', '') + toItem.ItemName
		return lcText
		
	ENDPROC

	PROCEDURE Init
		lparameters tuProject
		local lcProgram, ;
			lcPath, ;
			lnI, ;
			llCopy, ;
			lcText, ;
			lcLibrary, ;
			lcFile, ;
			llOK, ;
			lcCaption, ;
			lcKey
		
		* Assign a unique name to the form in case there's more than one instance.
		
		This.Name = This.Name + sys(2015)
		
		* Save the path we're using.
		
		This.cPathToUse = set('PATH')
		
		* Get the folder we're running from.
		
		lcProgram = sys(16, program(-1))
		lcProgram = substr(lcProgram, at(' ', lcProgram, 2) + 1)
		lcPath    = justpath(lcProgram)
		lcPath    = left(lcPath, rat('\', lcPath) - 1)
		This.cMainFolder = addbs(lcPath)
		
		* Create an array of header items. Column 1 is the item type the header applies
		* to, column 2 is the text for the TreeView node, column 3 contains the
		* projects or databases the heading has been used for so far, column 4 is .T.
		* if New applies, column 5 is .T. if the heading applies to databases, column 6
		* is the standard tags the heading applies to, column 7 is the image to display,
		* column 8 is the page to display when the header is selected, and column 9 is
		* the file extension for the type.
		
		with This
			dimension .aHeaders[17, 9]
			.aHeaders[ 1, 1] = FILETYPE_FORM
			.aHeaders[ 1, 2] = 'Forms'
			.aHeaders[ 1, 4] = .T.
			.aHeaders[ 1, 6] = 'Documents'
			.aHeaders[ 1, 7] = 'form'
			.aHeaders[ 1, 8] = 4
			.aHeaders[ 1, 9] = 'Form (*.scx):SCX'
		
			.aHeaders[ 2, 1] = FILETYPE_REPORT
			.aHeaders[ 2, 2] = 'Reports'
			.aHeaders[ 2, 4] = .T.
			.aHeaders[ 2, 6] = 'Documents'
			.aHeaders[ 2, 7] = 'report'
			.aHeaders[ 2, 9] = 'Report (*.frx):FRX'
		
			.aHeaders[ 3, 1] = FILETYPE_LABEL
			.aHeaders[ 3, 2] = 'Labels'
			.aHeaders[ 3, 4] = .T.
			.aHeaders[ 3, 6] = 'Documents'
			.aHeaders[ 3, 7] = 'labels'
			.aHeaders[ 3, 9] = 'Label (*.lbx):LBX'
		
			.aHeaders[ 4, 1] = FILETYPE_DATABASE
			.aHeaders[ 4, 2] = 'Databases'
			.aHeaders[ 4, 4] = .T.
			.aHeaders[ 4, 6] = 'Data'
			.aHeaders[ 4, 7] = 'database'
			.aHeaders[ 4, 9] = 'Database Container (*.dbc):DBC'
		
			.aHeaders[ 5, 1] = FILETYPE_FREETABLE
			.aHeaders[ 5, 2] = 'Free Tables'
			.aHeaders[ 5, 4] = .T.
			.aHeaders[ 5, 6] = 'Data'
			.aHeaders[ 5, 7] = 'table'
			.aHeaders[ 5, 9] = 'Table (*.dbf):DBF'
		
			.aHeaders[ 6, 1] = FILETYPE_QUERY
			.aHeaders[ 6, 2] = 'Queries'
			.aHeaders[ 6, 4] = .T.
			.aHeaders[ 6, 6] = 'Data'
			.aHeaders[ 6, 7] = 'query'
			.aHeaders[ 6, 9] = 'Query (*.qpr):QPR'
		
			.aHeaders[ 7, 1] = FILETYPE_TABLE_IN_DBC
			.aHeaders[ 7, 2] = 'Tables'
			.aHeaders[ 7, 4] = .T.
			.aHeaders[ 7, 5] = .T.
			.aHeaders[ 7, 6] = 'Data'
			.aHeaders[ 7, 7] = 'table'
			.aHeaders[ 7, 9] = 'Table (*.dbf):DBF'
		
			.aHeaders[ 8, 1] = FILETYPE_LOCAL_VIEW
			.aHeaders[ 8, 2] = 'Local Views'
			.aHeaders[ 8, 4] = .T.
			.aHeaders[ 8, 5] = .T.
			.aHeaders[ 8, 6] = 'Data'
			.aHeaders[ 8, 7] = 'LocalView'
		
			.aHeaders[ 9, 1] = FILETYPE_REMOTE_VIEW
			.aHeaders[ 9, 2] = 'Remote Views'
			.aHeaders[ 9, 4] = .T.
			.aHeaders[ 9, 5] = .T.
			.aHeaders[ 9, 6] = 'Data'
			.aHeaders[ 9, 7] = 'RemoteView'
		
			.aHeaders[10, 1] = FILETYPE_CONNECTION
			.aHeaders[10, 2] = 'Connections'
			.aHeaders[10, 4] = .T.
			.aHeaders[10, 5] = .T.
			.aHeaders[10, 6] = 'Data'
			.aHeaders[10, 7] = 'connection'
		
			.aHeaders[11, 1] = FILETYPE_STORED_PROCEDURE
			.aHeaders[11, 2] = 'Stored Procedures'
			.aHeaders[11, 4] = .T.
			.aHeaders[11, 5] = .T.
			.aHeaders[11, 6] = 'Data'
			.aHeaders[11, 7] = 'code'
		
			.aHeaders[12, 1] = FILETYPE_PROGRAM
			.aHeaders[12, 2] = 'Programs'
			.aHeaders[12, 4] = .T.
			.aHeaders[12, 6] = 'Code'
			.aHeaders[12, 7] = 'code'
			.aHeaders[12, 9] = 'Program (*.prg):PRG;Compiled Program (*.fxp):FXP'
		
			.aHeaders[13, 1] = FILETYPE_APILIB
			.aHeaders[13, 2] = 'API Libraries'
			.aHeaders[13, 6] = 'Code'
			.aHeaders[13, 7] = 'library'
			.aHeaders[13, 9] = 'API Library (*.fll):FLL'
		
			.aHeaders[14, 1] = FILETYPE_APPLICATION
			.aHeaders[14, 2] = 'Applications'
			.aHeaders[14, 6] = 'Code'
			.aHeaders[14, 7] = 'application'
			.aHeaders[14, 9] = 'Application (*.app, *.exe):APP,EXE'
		
			.aHeaders[15, 1] = FILETYPE_MENU
			.aHeaders[15, 2] = 'Menus'
			.aHeaders[15, 4] = .T.
			.aHeaders[15, 6] = 'Other'
			.aHeaders[15, 7] = 'menu'
			.aHeaders[15, 9] = 'Menu (*.mnx):MNX'
		
			.aHeaders[16, 1] = FILETYPE_TEXT
			.aHeaders[16, 2] = 'Text Files'
			.aHeaders[16, 4] = .T.
			.aHeaders[16, 6] = 'Other'
			.aHeaders[16, 7] = 'text'
			.aHeaders[16, 9] = 'Text File (*.txt):TXT;Include File (*.h):H;All Files (*.*):*'
		
			.aHeaders[17, 1] = FILETYPE_OTHER
			.aHeaders[17, 2] = 'Other Files'
			.aHeaders[17, 6] = 'Other'
			.aHeaders[17, 7] = 'other'
			.aHeaders[17, 9] = 'Image File (*.bmp, *.msk, *.jpg, *.gif, *.cur, *.ico):' + ;
				'BMP,MSK,JPG,GIF,CUR,ICO;All Files (*.*):*'
		
			for lnI = 1 to alen(.aHeaders, 1)
				.aHeaders[lnI, 3] = ''
				.aHeaders[lnI, 8] = iif(empty(.aHeaders[lnI, 8]), 2, .aHeaders[lnI, 8])
			next lnI
		endwith
		
		* Create a Registry object and set the key we're using.
		
		This.oRegistry    = newobject('ProjectExplorerRegistry', ;
			fullpath('ProjectExplorerRegistry.vcx', This.ClassLibrary))
		This.cRegistryKey = ccPROJECT_EXPLORER_KEY
		
		* Get the name and path of the Project Explorer settings file.
		
		This.cSettingsFile = This.cMainFolder + 'ProjectExplorerSettings.xml'
		llCopy = not file(This.cSettingsFile)
		if not llCopy
			lcText = filetostr(This.cSettingsFile)
			llCopy = not 'folder="' $ lcText
				&& folder setting added after initial release so create a new settings
				&& file if it doesn't contain that setting
		endif not llCopy
		if llCopy
			copy file (This.cMainFolder + 'Source\ProjectExplorerSettingsSource.xml') to ;
				(This.cMainFolder + 'ProjectExplorerSettings.xml')
		endif llCopy
		
		* Get Project Manager settings.
		
		This.GetProjectManagerSettings()
		
		* Open the Tags table (create it from TagSource.dbf if necessary).
		
		if not file(This.cMainFolder + 'ProjectExplorerTags.dbf')
			copy file (This.cMainFolder + 'Source\TagSource.dbf') to ;
				(This.cMainFolder + 'ProjectExplorerTags.dbf')
			copy file (This.cMainFolder + 'Source\TagSource.cdx') to ;
				(This.cMainFolder + 'ProjectExplorerTags.cdx')
		endif not file(This.cMainFolder + 'ProjectExplorerTags.dbf')
		use (This.cMainFolder + 'ProjectExplorerTags') order Name again shared in 0
		
		* Create the Categories table from CategoriesSource.dbf if necessary and
		* instantiate a Categories manager.
		
		if not file(This.cMainFolder + 'ProjectExplorerCategories.dbf')
			copy file (This.cMainFolder + 'Source\CategoriesSource.dbf') to ;
				(This.cMainFolder + 'ProjectExplorerCategories.dbf')
			copy file (This.cMainFolder + 'Source\CategoriesSource.cdx') to ;
				(This.cMainFolder + 'ProjectExplorerCategories.cdx')
		endif not file(This.cMainFolder + 'ProjectExplorerCategories.dbf')
		This.oCategoryManager = newobject('ProjectExplorerCategoryManager', ;
			This.ClassLibrary, '', This.cMainFolder)
		if not empty(This.oCategoryManager.cErrorMessage)
			This.ShowErrorMessage(This.oCategoryManager.cErrorMessage)
			return .F.
		endif not empty(This.oCategoryManager.cErrorMessage)
		
		* Instantiate a project addins manager.
		
		lcLibrary    = fullpath('ProjectExplorerEngine.vcx', This.ClassLibrary)
		This.oAddins = newobject('ProjectAddins', lcLibrary, '', This.cMainFolder)
		if not empty(This.oAddins.cErrorMessage)
			This.ShowErrorMessage('Some addins could not be registered. The errors are:' + ;
				ccCRLF + ccCRLF + This.oAddins.cErrorMessage)
		endif not empty(This.oAddins.cErrorMessage)
		bindevent(This.oAddins, 'ErrorOccurred', This, 'ShowErrorMessage')
		
		* Create a ProjectExplorerSolution object.
		
		This.oSolution = newobject('ProjectExplorerSolution', lcLibrary, '', ;
			This.oAddins)
		
		* Instantiate a ProjectOperations object.
		
		This.oOperations = newobject('ProjectOperations', lcLibrary, '', This.oAddins)
		
		* Instantiate objects to handling IDE window events
		
		This.oEvents  = newobject('ProjectExplorerWindowManager', This.ClassLibrary)
		This.oWindows = newobject('ProjectExplorerCollection', ;
			fullpath('ProjectExplorerCtrls.vcx', This.ClassLibrary))
		
		* Set the name of a cursor holding expanded nodes by tag.
		
		Thisform.cExpandedNodeCursor = sys(2015)
		
		* Create an empty ProjectSettings object so we have one for controls.
		
		This.oProjectSettings = newobject('ProjectSettings', lcLibrary)
		dodefault()
		
		* Turn on binding now that we have everything we need.
		
		This.BindControls = .T.
		
		* Tell the persistence object to handle other settings and restore the saved
		* tag filter setting.
		
		This.oPersist.AddItem('CollapseWidth', 'Thisform.nSavedCollapseWidth')
		This.oPersist.AddItem('Expanded', 'Thisform.lExpanded', 'L', .F., .T.)
		This.oPersist.AddItem('DisplayFullPath', 'Thisform.lDisplayFullPath', 'L', ;
			.F., .F.)
		This.oPersist.AddItem('AllowAnyFileType', 'Thisform.lAllowAnyFileType', 'L', ;
			.F., .F.)
		This.oPersist.AddItem('DefaultProvider', ;
			'Thisform.cDefaultVersionControlProvider')
		This.oPersist.AddItem('ShowSplitter', 'Thisform.oSplitter.lShowGripper', 'L', ;
			.F., .F.)
		This.oPersist.AddItem('AddinDebugMode', 'Thisform.lAddinDebugMode', 'L', ;
			.F., .F.)
		This.oPersist.AddItem('FoxBin2PRGLocation', 'Thisform.cFoxBin2PRGLocation')
		
		* Open a solution and exit if we didn't.
		
		llOK = This.OpenSolution(tuProject)
		if not llOK
			return .F.
		endif not llOK
		
	ENDPROC

	PROCEDURE KeyPress
		* Close the form on Esc.
		
		lparameters tnKeyCode, ;
			tnShiftAltCtrl
		if tnKeyCode = 27
			This.Release()
		else
			dodefault(tnKeyCode, tnShiftAltCtrl)
		endif tnKeyCode = 27
		
	ENDPROC

	PROCEDURE loadsolution		&& Loads the solution into the TreeView
		*==============================================================================
		* Method:			LoadSolution
		* Status:			Public
		* Purpose:			Loads the solution into the TreeView
		* Author:			Doug Hennig
		* Last Revision:	02/25/2017
		* Parameters:		tlGetStatus - .T. to update the version control status of
		*						all files first
		* Returns:			.T.
		* Environment in:	This.oSolution contains a reference to a
		*						ProjectExplorerSolution object
		*					This.oAddins contains a reference to a ProjectAddins object
		* Environment out:	the version control status for all files may have been
		*						updated
		*					the TreeView is loaded with all filtered files in all
		*						projects
		*==============================================================================
		
		lparameters tlGetStatus
		if tlGetStatus
			This.oSolution.GetStatusForAllFiles()
		endif tlGetStatus
		This.oTreeViewContainer.LoadTree()
		Thisform.oAddins.ExecuteAddin('AfterLoadTreeView', This)
		
	ENDPROC

	PROCEDURE newitem		&& Creates a new item
		*==============================================================================
		* Method:			NewItem
		* Status:			Public
		* Purpose:			Creates a new item
		* Author:			Doug Hennig
		* Last Revision:	11/23/2017
		* Parameters:		tcClass   - the class to use for a new form (optional)
		*					tcLibrary - the library containing the class (optional)
		* Returns:			.T.
		* Environment in:	This.cSelectedType contains the type of the selected node
		*						in the TreeView
		*					This.lAllowAnyFileType is .T. to allow any file type or .F.
		*						for only a file of the selected type
		*					This.oOperations contains a reference to a
		*						ProjectOperations object
		*					This.oProject contains a reference to a ProjectEngine
		*						object
		* Environment out:	an item may have been created and added to the project and
		*						all associated collections and tables/cursors
		*==============================================================================
		
		lparameters tcClass, ;
			tcLibrary
		local lcType, ;
			lnType, ;
			loItem, ;
			loParent, ;
			loForm, ;
			lcClass, ;
			lcLibrary, ;
			llReturn, ;
			lcExt, ;
			lnIndex, ;
			lnDefault, ;
			lnI, ;
			lcFile, ;
			lcName, ;
			loException, ;
			lcDBType, ;
			laObjects[1], ;
			lcCaption, ;
			lnhWnd
		lcType = This.cSelectedType
		do case
			case pcount() = 2
				lcType = FILETYPE_FORM
			case lcType = FILETYPE_CLASSLIB
				lcType = FILETYPE_CLASS
			case inlist(lcType, FILETYPE_FIELD, FILETYPE_INDEX)
				lcType = This.oItem.ParentType
		endcase
		lnType = ascan(This.aHeaders, lcType, -1, -1, 1, 14)
		loItem = This.oProject.CreateItem(lcType)
		if vartype(loItem) = 'O' or This.lAllowAnyFileType
			do case
		
		* For a stored procedure, we don't have to do much.
		
				case lcType = FILETYPE_STORED_PROCEDURE
					loParent          = This.GetCurrentDatabase()
					loItem.ParentPath = loParent.Path
					loItem.ParentKey  = loParent.Key
					loItem.Key        = iif(vartype(This.oItem) = 'O', ;
						This.oItem.Key, '')
					loItem.Path       = loParent.Path
					loItem.ItemName   = 'new'
						&& this has to be non-blank due to the check below
		
		* For a class, get the class settings.
		
				case lcType = FILETYPE_CLASS
					loForm = newobject('ProjectExplorerNewClass', This.ClassLibrary, ;
						'', This.oItem.ItemName, This.oItem.Path, ;
						This.oTreeViewContainer.cRegistryKey, This.lDisplayFullPath, ;
						This.oProject.cProject)
					loForm.Show()
					if vartype(loForm) = 'O'
		
		* Ensure the class name is valid.
		
						lcClass     = trim(loForm.cClassName)
						lcLibrary   = loForm.cClassLibrary
						loItem.Path = lcLibrary
						llReturn    = .T.
						if file(loForm.cClassLibrary) and ;
							not loItem.IsNameValid(lcClass)
							This.ShowErrorMessage("Class '" + lcClass + ;
							"' already exists.")
							llReturn = .F.
						endif file(loForm.cClassLibrary) ...
		
		* Set the class properties.
		
						if llReturn
							loItem.ItemParentClass   = loForm.cParentClass
							loItem.ItemParentLibrary = loForm.cParentClassLibrary
							loItem.ItemName          = lcClass
							loItem.ParentKey         = iif(This.oItem.Type = FILETYPE_CLASSLIB, ;
								This.oItem.Key, This.oItem.ParentKey)
						endif llReturn
					endif vartype(loForm) = 'O'
		
		* Get the name for the view or connection.
		
				case inlist(lcType, FILETYPE_LOCAL_VIEW, FILETYPE_REMOTE_VIEW, ;
					FILETYPE_CONNECTION)
					lcName = GetInput('Name', 'New ' + loItem.TypeName, '', '', .T.)
					if not empty(lcName)
						loParent = This.GetCurrentDatabase()
						loItem.ParentPath = loParent.Path
						if loItem.IsNameValid(lcName)
							loItem.ItemName   = lower(lcName)
							loItem.Path       = loParent.Path
							loItem.ParentKey  = loParent.Key
						else
							This.ShowErrorMessage(loItem.TypeName + " '" + lcName + ;
								"' already exists.")
						endif loItem.IsNameValid(lcName)
					endif not empty(lcName)
		
		* If this is a file, get the file name and ensure it doesn't already exist. If
		* the user can select any type of file, create a list of valid extensions.
		* Otherwise, use the extension for the selected type.
		
				otherwise
					if This.lAllowAnyFileType
						lcExt     = ''
						lnIndex   = 0
						lnDefault = 0
						for lnI = 1 to alen(This.aHeaders, 1)
							if not empty(This.aHeaders[lnI, 9]) and This.aHeaders[lnI, 4]
								lcExt   = lcExt + iif(empty(lcExt), '', ';') + ;
									strtran(strtran(This.aHeaders[lnI, 9], ';All Files (*.*):*'), ;
									';Compiled Program (*.fxp):FXP')
								lnIndex = lnIndex + 1
								if This.aHeaders[lnI, 1] = lcType
									lnDefault = lnIndex
								endif This.aHeaders[lnI, 1] = lcType
							endif not empty(This.aHeaders[lnI, 9]) ...
						next lnI
						lcExt = lcExt + ';Visual Class Library (*.vcx):VCX'
						if lcType = FILETYPE_CLASSLIB
							lnDefault = occurs(';', lcExt) + 1
						endif lcType = FILETYPE_CLASSLIB
						lcFile = GetFileName(lcExt, This.cSolutionFolder, '', .T., ;
							lnDefault)
						if not empty(lcFile)
							lcExt  = upper(justext(lcFile))
							lcType = ''
							if lcExt = 'VCX'
								lcType = FILETYPE_CLASSLIB
							else
								for lnI = 1 to alen(This.aHeaders, 1)
									if not empty(This.aHeaders[lnI, 9]) and ;
										lcExt $ This.aHeaders[lnI, 9]
										lcType = This.aHeaders[lnI, 1]
										exit
									endif not empty(This.aHeaders[lnI, 9]) ...
								next lnI
							endif lcExt = 'VCX'
							loItem = This.oProject.CreateItem(lcType)
						endif not empty(lcFile)
					else
						lnType = ascan(This.aHeaders, lcType, -1, -1, 1, 14)
						lcExt  = This.aHeaders[lnType, 9]
						lcFile = GetFileName(lcExt, This.cSolutionFolder, '', .T.)
					endif This.lAllowAnyFileType
					if not empty(lcFile)
						loItem.Path = lcFile
						if loItem.Type = FILETYPE_TABLE_IN_DBC
							loParent          = This.GetCurrentDatabase()
							loItem.ParentPath = loParent.Path
							loItem.ParentKey  = loParent.Key
						endif loItem.Type = FILETYPE_TABLE_IN_DBC
						if loItem.IsNameValid(justfname(lcFile))
							loItem.ItemName = lower(juststem(lcFile))
							if loItem.Type = FILETYPE_FORM and not empty(tcClass) and ;
								not empty(tcLibrary)
								loItem.ItemClass   = tcClass
								loItem.ItemLibrary = tcLibrary
							endif loItem.Type = FILETYPE_FORM ...
						else
							This.ShowErrorMessage("'" + lcFile + "' already exists.")
						endif loItem.IsNameValid(justfname(lcFile))
					endif not empty(lcFile)
			endcase
			if vartype(loItem) = 'O' and not empty(loItem.ItemName)
				loItem.Project = This.oProject.cProject
				loItem.New     = .T.
				This.oOperations.NewItem(This.oProject.oProject, loItem)
		
		* For items with a modal designer (basically, the Table Designer, the View
		* Designer when a view is created) or for a VCX, by the time we get here, the
		* designer is closed, so handle the post-edit tasks.
		
				lcCaption = loItem.DesignerCaption
				if empty(lcCaption) or inlist(loItem.Type, FILETYPE_LOCAL_VIEW, ;
					FILETYPE_REMOTE_VIEW, FILETYPE_CLASSLIB)
					This.AfterNewItem(loItem)
		
		* For items with a modeless designer, set up windows event binding so we know
		* when the user closes the window.
		
				else
					lnhWnd = This.oEvents.SetBinding(lcCaption)
					if lnhWnd > 0
						This.oWindows.Add(loItem, transform(lnhWnd))
						bindevent(This.oEvents, 'WindowDestroyEvent', This, ;
							'EditWindowClosed')
					endif lnhWnd > 0
				endif empty(lcCaption)
			endif vartype(loItem) = 'O' ...
		else
			This.ShowErrorMessage('The selected type could not be determined.')
		endif vartype(loItem) = 'O' ...
		
	ENDPROC

	PROCEDURE opensolution		&& Opens a solution
		*==============================================================================
		* Method:			OpenSolution
		* Status:			Public
		* Purpose:			Opens a solution
		* Author:			Doug Hennig
		* Last Revision:	11/23/2017
		* Parameters:		tuProject      - the path for a project or solution
		*						(optional: if it isn't passed, the user is prompted)
		*					tlLoadSolution - .T. to load the solution into the TreeView
		* Returns:			.T. if the solution was opened
		* Environment in:	This.oSolution contains a reference to a
		*						ProjectExplorerSolution object
		* Environment out:	the solution was opened and may have been loaded
		*==============================================================================
		
		lparameters tuProject, ;
			tlLoadSolution
		local lcMessage, ;
			luProject, ;
			lcFile, ;
			llOK, ;
			lcCaption, ;
			lcKey
		
		* If "?" was specified, display the options.
		
		if vartype(tuProject) = 'C' and tuProject == '?'
			text to lcMessage noshow pretext 2
			Pass one of the following to ProjectExplorer.app:
			
			· the path of a PJX file
			· the path of a Solution.xml file
			· a project object (e.g. _VFP.ActiveProject)
			endtext
			This.ShowMessage(lcMessage)
			return .F.
		endif vartype(tuProject) = 'C' ...
		
		* If there's a solution file in the current folder and it isn't already open,
		* use it.
		
		luProject = tuProject
		if file(ccSOLUTION_FILE) and (type('_screen.oProjectExplorers.Name') <> 'C' or ;
			vartype(_screen.oProjectExplorers.Item(justpath(sys(5) + curdir()))) <> 'O')
			luProject = fullpath(ccSOLUTION_FILE)
		endif file(ccSOLUTION_FILE) ...
		
		* If a project object or path was passed, use it. If not, ask for either a
		* project or a solution. Note that we pass .T. for the tlSaveDialog parameter
		* or else if the project is already open in the Project Manager, the OS gives
		* a file in use error.
		
		do case
			case not vartype(luProject) $ 'CO'
				lcFile = GetFileName('Solution (*.xml):XML;Project (*.pjx):PJX', ;
					sys(5) + addbs(curdir()) + 'Solution.xml', 'Open', .T.)
			case vartype(luProject) = 'O'
				lcFile = luProject.Name
			otherwise
				lcFile = luProject
		endcase
		do case
		
		* Do nothing if no project or solution was selected.
		
			case empty(lcFile)
		
		* Handle a solution XML file being selected or one being in the folder of the
		* specified project.
		
			case lower(justext(lcFile)) = 'xml' or ;
				file(addbs(justpath(lcFile)) + ccSOLUTION_FILE)
				if empty(justpath(lcFile))
					lcFile = GetProperFileCase(fullpath(lcFile))
				endif empty(justpath(lcFile))
				llOK = This.oSolution.OpenSolution(justpath(lcFile))
		
		* Handle a PJX being selected.
		
			case lower(justext(lcFile)) = 'pjx'
				llOK = This.oSolution.AddProject(lcFile)
		endcase
		if not llOK
			if not empty(This.oSolution.cErrorMessage)
				This.ShowErrorMessage(This.oSolution.cErrorMessage)
			endif not empty(This.oSolution.cErrorMessage)
			return .F.
		endif not llOK
		lcCaption    = GetProperFileCase(justpath(lcFile), .T.)
		This.Caption = 'Project Explorer - ' + lcCaption
		
		* Create a cursor holding expanded nodes by tag.
		
		create cursor (Thisform.cExpandedNodeCursor) (KEY C(140), TAG C(40), ;
			SELECTEDKEY C(140))
		
		* Set the registry key to use for this project as the path for the project with
		* the drive stripped off and "\" converted to "~". Then restore the selected
		* and expanded nodes.
		
		lcKey = justpath(lcFile)
		if substr(lcKey, 2, 1) = ':'
			lcKey = substr(lcKey, 4)
		else
			lcKey = substr(lcKey, 3)
		endif substr(lcKey, 2, 1) = ':'
		This.oTreeViewContainer.cRegistryKey = addbs(ccPROJECT_EXPLORER_KEY) + ;
			strtran(lcKey, '\', '~')
		This.oTreeViewContainer.RestoreSelectedNode()
		
		* Tell the persistence object to handle other settings and restore the saved
		* tag filter setting.
		
		Thisform.cFilterTags = This.oRegistry.GetKey(This.oTreeViewContainer.cRegistryKey, ;
			'TagFilter', 'Classes')
		
		* Load the solution if we're supposed to (from the Open Solution function in
		* the menu but not from Init because initializing the tag filter combobox does
		* that).
		
		if tlLoadSolution
			This.LoadSolution(.T.)
		endif tlLoadSolution
		
	ENDPROC

	PROCEDURE releasemembers
		* Save the filter tags setting.
		
		if vartype(This.oRegistry) = 'O'
			This.oRegistry.SetKey(This.oTreeViewContainer.cRegistryKey, ;
				'TagFilter', Thisform.cFilterTags)
		endif vartype(This.oRegistry) = 'O'
		
		* Execute any addin.
		
		if vartype(This.oAddins) = 'O'
			Thisform.oAddins.ExecuteAddin('OnExit', This)
		endif vartype(This.oAddins) = 'O'
		
		* Turn off control binding.
		
		This.BindControls = .F.
		
		* Release all objects we're using.
		
		This.oItem            = .NULL.
		This.oProjectSettings = .NULL.
		This.oProject         = .NULL.
		if vartype(This.oCategoryManager) = 'O'
			This.oCategoryManager.Release()
		endif vartype(This.oCategoryManager) = 'O'
		if vartype(This.oEvents) = 'O'
			This.oEvents.Release()
		endif vartype(This.oEvents) = 'O'
		if vartype(This.oWindows) = 'O'
			This.oWindows.Release()
		endif vartype(This.oWindows) = 'O'
		if vartype(This.oOperations) = 'O'
			This.oOperations.Release()
		endif vartype(This.oOperations) = 'O'
		if vartype(This.oSolution) = 'O'
			This.oSolution.Release()
		endif vartype(This.oSolution) = 'O'
		if vartype(This.oAddins) = 'O'
			This.oAddins.Release()
		endif vartype(This.oAddins) = 'O'
		if vartype(This.oRegistry) = 'O'
			This.oRegistry.Release()
		endif vartype(This.oRegistry) = 'O'
		
		* Restore the path.
		
		set path to (This.cCurrPath)
		dodefault()
		
	ENDPROC

	PROCEDURE removefilefromversioncontrol		&& Removes the current file from version control
		*==============================================================================
		* Method:			RemoveFileFromVersionControl
		* Status:			Public
		* Purpose:			Removes the current file from version control
		* Author:			Doug Hennig
		* Last Revision:	04/28/2017
		* Parameters:		tlNoStatus - .T. if we don't need to update the status
		* Returns:			.T.
		* Environment in:	This.oSolution contains a reference to a
		*						ProjectExplorerSolution object
		* Environment out:	the file for the selected item was removed from version
		*						control
		*					the image for the item in the TreeView may have changed
		*==============================================================================
		
		lparameters tlNoStatus
		local loItem
		
		* Bug out if we're not using version control or the file's not in version
		* control.
		
		loItem = This.oItem
		if not This.oSolution.lHaveVersionControl or vartype(loItem) <> 'O' or ;
			not loItem.IsFile or ;
			inlist(loItem.VersionControlStatus, ccVC_STATUS_IGNORED, ;
			ccVC_STATUS_UNTRACKED)
			return
		endif not This.oSolution.lHaveVersionControl ...
		
		* Remove the file from version control and update its status.
		
		This.oSolution.oVersionControl.RemoveFile(loItem.Path)
		if not tlNoStatus
			This.GetItemStatus(loItem)
		endif not tlNoStatus
		
	ENDPROC

	PROCEDURE removeitem		&& Removes the selected item from the project
		*==============================================================================
		* Method:			RemoveItem
		* Status:			Public
		* Purpose:			Removes the selected item from the project
		* Author:			Doug Hennig
		* Last Revision:	09/15/2017
		* Parameters:		tlNoPrompt - .T. to not prompt for removal
		* Returns:			.T.
		* Environment in:	This.oItem contains a reference to the selected ProjectItem
		*						object
		*					This.oOperations contains a reference to a
		*						ProjectOperations object
		*					This.oProject contains a reference to a ProjectEngine
		*						object
		* Environment out:	the item may have been removed from the project and all
		*						associated collections and tables/cursors
		*==============================================================================
		
		lparameters tlNoPrompt
		local loItem, ;
			loProject, ;
			loSolution, ;
			lcMessage, ;
			lnValue, ;
			llOK, ;
			lcFile, ;
			laItems[1], ;
			lnItems
		
		* Get the message to display based on the type.
		
		loItem = This.oItem
		if vartype(loItem) <> 'O' or not loItem.CanRemove
			return
		endif vartype(loItem) <> 'O' ...
		loProject  = This.oProject
		loSolution = This.oSolution
		lcMessage  = loItem.RemovePrompt
		do case
			case tlNoPrompt
				lnValue = 1
			case loItem.IsFile
				lnValue = MessageBoxEx(lcMessage, '?', This.Caption, ;
					'&Remove,&Delete,&Cancel')
			otherwise
				lnValue = iif(This.YesNo(lcMessage), 1, 3)
		endcase
		
		* If we're supposed to remove or delete the item, do so.
		
		if lnValue < 3
			llOK = This.oOperations.RemoveItem(loProject.oProject, loItem, ;
				lnValue = 2)
			if llOK
		
		* If we're supposed to, remove the file from version control. If this is a
		* VFP binary file, delete the text equivalent.
		
				lnItems = 0
				if loItem.IsFile
					if This.lRemoveFileFromVersionControlOnRemove
						This.RemoveFileFromVersionControl(.T.)
						lcFile = GetTextFileName(loItem.Path)
						if not empty(lcFile)
							erase (lcFile)
						endif not empty(lcFile)
					endif This.lRemoveFileFromVersionControlOnRemove
		
		* If we're using version control, auto-commit the project or regenerate its
		* text equivalent.
		
					do case
						case not loSolution.lHaveVersionControl
						case loSolution.lAutoCommitChanges
							laItems[1] = loProject.oProjectItem
							lnItems    = 1
						case loSolution.nIncludeInVersionControl > 1
							loSolution.oVersionControl.ConvertBinaryToText(loProject.cProject)
							This.GetItemStatus(loProject.oProjectItem)
						otherwise
							This.GetItemStatus(loProject.oProjectItem)
					endcase
				endif loItem.IsFile ...
		
		* Remove the item from the project engine, the TreeView cursor, and the
		* TreeView.
		
				loProject.RemoveFileFromCollection(loItem)
				This.oTreeViewContainer.RemoveNode()
				if not trim(evaluate(This.oTreeViewContainer.cCursorAlias + '.ID')) == loItem.Key
					= seek(loItem.Key, This.oTreeViewContainer.cCursorAlias, 'ID')
				endif not trim(evaluate ...
				delete in (This.oTreeViewContainer.cCursorAlias)
		
		* For certain types, update the status of the parent.
		
				if loItem.HasParent
					loItem = loProject.GetItemParent(loItem)
					do case
						case not loSolution.lHaveVersionControl
						case loSolution.lAutoCommitChanges
							lnItems = lnItems + 1
							dimension laItems[lnItems]
							laItems[lnItems] = loItem
						case loSolution.nIncludeInVersionControl > 1
							loSolution.oVersionControl.ConvertBinaryToText(loItem.Path)
							This.GetItemStatus(loItem)
						otherwise
							This.GetItemStatus(loItem)
					endcase
				endif loItem.HasParent
		
		* Now do the commits.
		
				if loSolution.lHaveVersionControl and loSolution.lAutoCommitChanges
					loSolution.CommitItems(loSolution.cFileRemoveMessage, @laItems)
					for each loItem in laItems foxobject
						This.GetItemStatus(loItem, .T.)
					next loItem
				endif loSolution.lHaveVersionControl ...
			else
				This.ShowErrorMessage('The item could not be removed from the ' + ;
					'project.' + iif(empty(This.oOperations.cErrorMessage), '', ;
					' The error message is:' + ccCRLF + ccCRLF + ;
					This.oOperations.cErrorMessage))
			endif llOK
		endif lnValue < 3
		
	ENDPROC

	PROCEDURE removeprojectfromsolution		&& Removes a project from the solution
		*==============================================================================
		* Method:			RemoveProjectFromSolution
		* Status:			Public
		* Purpose:			Removes a project from the solution
		* Author:			Doug Hennig
		* Last Revision:	03/03/2017
		* Parameters:		none
		* Returns:			.T.
		* Environment in:	This.oSolution contains a reference to a
		*						ProjectExplorerSolution object
		*					This.oProject contains a reference to a ProjectEngine
		*						object
		*					This.oTreeViewContainer.cCursorAlias contains the alias for
		*						the TreeView cursor
		* Environment out:	the project was removed from the solution and from the
		*						TreeView
		*==============================================================================
		
		local lcProject, ;
			llOK
		
		* Confirm the user wants to remove the project.
		
		lcProject = This.oProject.cProject
		if This.YesNo('Remove this project from the solution?')
			llOK = This.oSolution.RemoveProject(lcProject)
			do case
		
		* Remove all references to the project from the TreeView cursor and the
		* TreeView.
		
				case llOK
					delete for PROJECT = lcProject in ;
						(This.oTreeViewContainer.cCursorAlias)
					This.oTreeViewContainer.RemoveNode()
		
		* Display an error message if we have one.
		
				case not empty(This.oSolution.cErrorMessage)
					This.ShowErrorMessage(This.oSolution.cErrorMessage)
			endcase
		endif This.YesNo ...
		
	ENDPROC

	PROCEDURE repositorybrowser		&& Displays the repository browser
		*==============================================================================
		* Method:			RepositoryBrowser
		* Status:			Public
		* Purpose:			Displays the repository browser
		* Author:			Doug Hennig
		* Last Revision:	04/28/2017
		* Parameters:		none
		* Returns:			.T.
		* Environment in:	This.oSolution contains a reference to a
		*						ProjectExplorerSolution object
		*					This.oProject contains a reference to a ProjectEngine
		*						object
		* Environment out:	the repository browser is displayed
		*==============================================================================
		
		* Bug out if we're not using version control.
		
		if not This.oSolution.lHaveVersionControl
			return
		endif not This.oSolution.lHaveVersionControl
		
		* Display the Repository Browser.
		
		This.oSolution.oVersionControl.RepositoryBrowser()
		
	ENDPROC

	PROCEDURE resetsortandfilter		&& Resets the sort and filter to default
		*==============================================================================
		* Method:			ResetSortAndFilter
		* Status:			Public
		* Purpose:			Resets the sort and filter to default
		* Author:			Doug Hennig
		* Last Revision:	11/02/2017
		* Parameters:		none
		* Returns:			none
		* Environment in:	none
		* Environment out:	This.cTreeViewSortExpression, This.lSortTreeViewDescending,
		*						and This.cItemFilter are reset to default and the
		*						TreeView is reloaded
		*==============================================================================
		
		This.cTreeViewSortExpression = 'upper(TEXT)'
		This.lSortTreeViewDescending = .F.
		This.cItemFilter             = ''
		This.LoadSolution(.T.)
		
		
	ENDPROC

	PROCEDURE restoreformsize
		* Handle sizing oProjectInfo.
		
		local lnHeight, ;
			lnWidth, ;
			lnAnchor, ;
			lcText, ;
			lcPathExpression, ;
			loException, ;
			lcFile
		with This
			lnHeight = .Height
			lnWidth  = .Width
			dodefault()
			if not .Visible
				lnAnchor                           = .oProjectInfo.Anchor
				.oProjectInfo.Anchor               = 0
				.oProjectInfo.pgfProperties.Anchor = 0
				.oProjectInfo.Width                = .oProjectInfo.Width  + .Width - ;
					lnWidth
				.oProjectInfo.Height               = .oProjectInfo.Height + .Height - ;
					lnHeight
				.oProjectInfo.pgfProperties.Height = .oProjectInfo.Height + 1
				.oProjectInfo.pgfProperties.Width  = .oProjectInfo.Width  + 1
				.oProjectInfo.pgfProperties.Anchor = 15
				.oProjectInfo.Anchor               = lnAnchor
			endif not .Visible
		endwith
		
		* If the form should be collapsed, do so.
		
		if not This.lExpanded
			This.lExpanded = .T.
			This.Expand()
		endif not This.lExpanded
		
		* Handle debugging addin execution.
		
		if This.lAddinDebugMode
			bindevent(This.oAddins, 'AddinsExecuted', This, 'ShowMessage')
		endif This.lAddinDebugMode
		
		* If we don't have the location for FoxBin2PRG, try to get it from the
		* expression in the textconverter setting in our settings file if it isn't
		* empty.
		
		lcText           = filetostr(This.cSettingsFile)
		lcPathExpression = strextract(lcText, '<textconverter path="', '"')
		if (empty(This.cFoxBin2PRGLocation) or ;
			not directory(This.cFoxBin2PRGLocation)) and not empty(lcPathExpression)
			if left(lcPathExpression, 1) = '{'
				try
					This.cFoxBin2PRGLocation = evaluate(substr(lcPathExpression, 2, ;
						len(lcPathExpression) - 2))
				catch to loException
				endtry
			else
				This.cFoxBin2PRGLocation = lcPathExpression
			endif left(lcPathExpression, 1) = '{'
		endif (empty(This.cFoxBin2PRGLocation) ...
		
		* If we didn't get the location and the expression isn't empty (meaning we
		* don't want to use FoxBin2PRG), ask the user for the location.
		
		if (empty(This.cFoxBin2PRGLocation) or ;
			not directory(This.cFoxBin2PRGLocation)) and not empty(lcPathExpression)
			lcFile = GetFileName('Application (*.exe):EXE', 'FoxBin2PRG.exe', ;
				'Locate FoxBin2PRG.exe')
			if not empty(lcFile)
				This.cFoxBin2PRGLocation = justpath(lcFile)
			else
				Thisform.ShowErrorMessage('Since FoxBin2PRG cannot be located, ' + ;
					'text equivalents of VFP binary files will not be created.')
			endif not empty(lcFile)
		endif empty(This.cFoxBin2PRGLocation) ...
		if This.oSolution.lHaveVersionControl
			This.oSolution.oVersionControl.cFoxBin2PRGLocation = This.cFoxBin2PRGLocation
		endif This.oSolution.lHaveVersionControl
		
	ENDPROC

	PROCEDURE revert		&& Reverts changes to the item
		*==============================================================================
		* Method:			Revert
		* Status:			Public
		* Purpose:			Reverts changes to the item
		* Author:			Doug Hennig
		* Last Revision:	04/05/2017
		* Parameters:		none
		* Returns:			.T.
		* Environment in:	see This.oTreeViewContainer.DisplayRecord
		* Environment out:	see This.oTreeViewContainer.DisplayRecord
		*==============================================================================
		
		This.oTreeViewContainer.DisplayRecord()
		
	ENDPROC

	PROCEDURE revertfile		&& Reverts changes to the file via version control
		*==============================================================================
		* Method:			RevertFile
		* Status:			Public
		* Purpose:			Reverts changes to the file via version control
		* Author:			Doug Hennig
		* Last Revision:	04/28/2017
		* Parameters:		none
		* Returns:			.T.
		* Environment in:	This.oSolution contains a reference to a
		*						ProjectExplorerSolution object
		*					This.oItem contains a reference to a ProjectItem object
		* Environment out:	the file for the selected item was reverted
		*					the TreeView may have been reloaded
		*==============================================================================
		
		* Bug out if we're not using version control or the file's not in version
		* control.
		
		local loItem, ;
			llProject
		if vartype(This.oItem) = 'O'
			loItem = This.oItem
		else
			loItem    = This.oProject.oProjectItem
			llProject = .T.
		endif vartype(This.oItem) = 'O'
		if not This.oSolution.lHaveVersionControl or vartype(loItem) <> 'O' or ;
			not loItem.IsFile or ;
			not inlist(loItem.VersionControlStatus, ccVC_STATUS_MODIFIED, ;
			ccVC_STATUS_ADDED, ccVC_STATUS_REMOVED)
			return
		endif not This.oSolution.lHaveVersionControl ...
		
		* Revert the file and update its status.
		
		loItem.VersionControlStatus = This.oSolution.RevertFile(loItem.Path)
		This.GetItemStatus(loItem, .T.)
		
		* If this item has child items or is the project itself, we need to reload it
		* and reload the TreeView because child items may be added or removed.
		
		do case
			case loItem.HasChildren
				This.oProject.RemoveFileFromCollection(loItem, .T.)
				This.oProject.AddFileToCollection(loItem)
				This.LoadSolution()
			case llProject
				This.oProject.oProjectSettings.GetSettings()
				This.oProject.oProjectItems.Clear()
				This.LoadSolution()
					&& we don't pass .T. to LoadSolution because we're completely
					&& reloading the solution which includes getting version control
					&& status already
				This.RefreshForm()
		endcase
		
	ENDPROC

	PROCEDURE revisionhistory		&& Displays the revision history for the selected file
		*==============================================================================
		* Method:			RevisionHistory
		* Status:			Public
		* Purpose:			Displays the revision history for the selected file
		* Author:			Doug Hennig
		* Last Revision:	04/26/2017
		* Parameters:		none
		* Returns:			.T.
		* Environment in:	This.oSolution contains a reference to a
		*						ProjectExplorerSolution object
		*					This.oItem contains a reference to a ProjectItem object
		* Environment out:	the revision history dialog is displayed for the file for
		*						the selected item
		*==============================================================================
		
		* Bug out if we're not using version control or the file's not in version
		* control.
		
		local loItem
		if vartype(This.oItem) = 'O'
			loItem = This.oItem
		else
			loItem = This.oProject.oProjectItem
		endif vartype(This.oItem) = 'O'
		if not This.oSolution.lHaveVersionControl or vartype(loItem) <> 'O' or ;
			not loItem.IsFile or ;
			inlist(loItem.VersionControlStatus, ccVC_STATUS_IGNORED, ;
			ccVC_STATUS_UNTRACKED)
			return
		endif not This.oSolution.lHaveVersionControl ...
		
		* Display the file's revision history.
		
		This.oSolution.oVersionControl.RevisionHistory(loItem.Path)
		
	ENDPROC

	PROCEDURE runitem		&& Runs the selected item
		*==============================================================================
		* Method:			RunItem
		* Status:			Public
		* Purpose:			Runs the selected item
		* Author:			Doug Hennig
		* Last Revision:	04/28/2017
		* Parameters:		tuItem - a reference to the ProjectItem to run or the path
		*						of a file to run (optional: if it isn't passed, the
		*						selected item is used)
		* Returns:			.T.
		* Environment in:	This.oOperations contains a reference to a
		*						ProjectOperations object
		*					This.oProject contains a reference to a ProjectEngine
		*						object
		*					This.oItem contains a reference to the currently selected
		*						item
		* Environment out:	the item may have been run
		* Note:				an addin may pass an item or path to this method
		*==============================================================================
		
		lparameters tuItem
		local loItem, ;
			loProject
		do case
			case vartype(tuItem) = 'O'
				loItem = tuItem
			case vartype(tuItem) = 'C'
				loItem = This.oProject.GetItemForFile(tuItem)
			otherwise
				loItem = This.oItem
		endcase
		if vartype(loItem) = 'O'
			loProject = This.oSolution.oProjects.Item(loItem.Project)
			This.oOperations.RunItem(loProject.oProject, loItem)
			if vartype(This.oOperations) = 'O' and ;
				not empty(This.oOperations.cErrorMessage)
			&& if we ran something that did a CLEAR ALL, This.oOperations was released
				This.ShowErrorMessage(This.oOperations.cErrorMessage)
			endif vartype(This.oOperations) = 'O' ...
		else
			This.ShowErrorMessage('An invalid file was specified.')
		endif vartype(loItem) = 'O'
		
	ENDPROC

	PROCEDURE saveformsize
		* If we're collapsed, save the collapsed width.
		
		if not This.lExpanded
			This.nSavedCollapseWidth = This.Width
		endif not This.lExpanded
		dodefault()
		
	ENDPROC

	PROCEDURE savesettings		&& Save the properties of the current object
		*==============================================================================
		* Method:			SaveSettings
		* Status:			Public
		* Purpose:			Save the properties of the current object
		* Author:			Doug Hennig
		* Last Revision:	11/06/2017
		* Parameters:		none
		* Returns:			.T.
		* Environment in:	This.lChanged is .T. if something changed
		*					This.oItem contains a reference to a ProjectItem object if
		*						one is selected or .NULL. if not
		*					This.oSolution contains a reference to a
		*						ProjectExplorerSolution object
		*					This.oProject contains a reference to a ProjectEngine
		*						object
		*					This.oProjectSettings contains a reference to a
		*						ProjectSettings object for the selected project
		* Environment out:	the properties of the current object were saved
		*					This.lChanged is .F.
		*					if we're supposed to auto-commit changes, changes were
		*						committed
		*==============================================================================
		
		local lcMessage, ;
			loItem, ;
			llOK, ;
			llReload, ;
			lcKey
		
		* If we're auto-commiting changes, get the commit message.
		
		if This.lChanged and This.oSolution.lAutoCommitChanges
			lcMessage = This.GetCommitMessage()
		endif This.lChanged ...
		do case
		
		* Nothing changed.
		
			case not This.lChanged
		
		* Save item settings. First rename the item if the name was changed. In that
		* case, we'll reload the solution because the file may exist in more than one
		* project.
		
			case vartype(This.oItem) = 'O'
				loItem = This.GetItemForNode(This.cCurrentNodeID)
				if not upper(loItem.ItemName) == upper(Thisform.oItem.ItemName)
					llOK = .T.
					This.oSolution.cErrorMessage = ''
					if loItem.Type = FILETYPE_CLASSLIB
						llOK = This.YesNo('If there are any existing references ' + ;
							'to any classes in "' + loItem.Path + '" in another ' + ;
							'SCX or VCX file, those references will become ' + ;
							'invalid. Are you sure you want to continue?')
					endif loItem.Type = FILETYPE_CLASSLIB
					llOK = llOK and This.oSolution.RenameItem(loItem, ;
						Thisform.oItem.ItemName, lcMessage)
					if llOK
						This.oItem.ItemName   = loItem.ItemName
						This.oItem.Path       = loItem.Path
						This.oItem.Key        = loItem.Key
						This.oItem.ParentKey  = loItem.ParentKey
						This.oItem.ParentPath = loItem.ParentPath
						llReload = .T.
					else
						if not empty(This.oSolution.cErrorMessage)
							This.ShowErrorMessage(This.oSolution.cErrorMessage)
						endif not empty(This.oSolution.cErrorMessage)
						This.Revert()
						return .F.
					endif llOK
				else
					llOK = .T.
				endif not upper(loItem.ItemName) == upper(Thisform.oItem.ItemName)
				if llOK
					loItem.UpdateFromClone(This.oItem)
					This.lChanged = not This.oProject.SaveProjectItem(loItem, lcMessage)
				endif llOK
				do case
					case not empty(This.oProject.cErrorMessage)
						This.ShowErrorMessage(This.oProject.cErrorMessage)
		
		* If we have version control and we're not reloading the solution, update the
		* status for the file and the project.
		
					case This.oSolution.lHaveVersionControl and not llReload
						if not loItem.IsFile or loItem.Type = FILETYPE_TABLE_IN_DBC
							loItem = This.oProject.GetItemParent(loItem)
						endif not loItem.IsFile ...
						This.GetItemStatus(loItem)
						This.GetItemStatus(This.oProject.oProjectItem)
						if This.oItem.Type <> FILETYPE_TABLE_IN_DBC
							This.oItem.VersionControlStatus = loItem.VersionControlStatus
						endif This.oItem.Type <> FILETYPE_TABLE_IN_DBC
				endcase
		
		* Reload the solution if we're supposed to.
		
				if llReload
					lcKey = This.oTreeViewContainer.GetNodeKey(loItem.Type, ;
						This.GetNodeKey(loItem))
					This.LoadSolution(.T.)
					This.oTreeViewContainer.SelectNode(lcKey)
		
		* Update the node for the item in case some things changed.
		
				else
					This.UpdateNode()
				endif llReload
		
		* Save project settings.
		
			otherwise
				loItem = This.oProject.oProjectSettings
				loItem.UpdateFromClone(This.oProjectSettings)
				This.oProject.SaveSettings(lcMessage)
				This.oSolution.SaveSolution()
				This.SelectProject()
					&& this sets oProjectSettings to the correct object
				This.GetItemStatus(This.oProject.oProjectItem)
				This.lChanged = .F.
		endcase
		
	ENDPROC

	PROCEDURE selectnodeforfile		&& Selects a node for the specified file
		*==============================================================================
		* Method:			SelectNodeForFile
		* Status:			Public
		* Purpose:			Selects a node for the specified file
		* Author:			Doug Hennig
		* Last Revision:	11/02/2017
		* Parameters:		tcFileName - the file to select the node for
		*					tcClass    - the class to select (optional)
		* Returns:			.T. if the node was selected
		* Environment in:	This.oProject contains a reference to a ProjectEngine
		*						object
		* Environment out:	the node for the specified item may have been selected
		*					the TreeView may have been reloaded if a different tag
		*						filter is used (for example, if the include file for a
		*						class is selected)
		*==============================================================================
		
		lparameters tcFileName, ;
			tcClass
		local loItem, ;
			lcTag, ;
			llHaveTag, ;
			lcProjectID, ;
			lcParentID, ;
			lnType, ;
			lcHeaderID, ;
			lcHeaderKey, ;
			lcProjectKey, ;
			lcKey
		if vartype(tcFileName) <> 'C' or empty(tcFileName)
			return .F.
		endif vartype(tcFileName) <> 'C' ...
		
		* Get the item for the file. If we found it, see if we're on the correct tag
		* for it. If not, we need to reload the solution for that tag.
		
		loItem = This.oProject.GetItemForFile(tcFileName)
		if vartype(loItem) = 'O'
			for each lcTag in loItem.Tags foxobject
				if This.cFilterTags == lcTag
					llHaveTag = .T.
					exit
				endif This.cFilterTags == lcTag
			next lcTag
			if not llHaveTag
				This.cFilterTags = loItem.Tags.Item(1)
				This.LoadSolution()
			endif not llHaveTag
		
		* Get the key for the item's header so we can make sure it's expanded. If this
		* is a class or class library, it doesn't have a header, so we just make sure
		* the library is expanded.
		
			lcProjectID = This.oProject.oProjectItem.Key
			lcParentID  = iif(empty(loItem.ParentKey), lcProjectID, ;
				lcProjectID + ccKEY_SEPARATOR + loItem.ParentKey)
			lnType      = ascan(This.aHeaders, loItem.Type, -1, -1, 1, 14)
			if lnType = 0
				lcHeaderKey = This.oTreeViewContainer.GetNodeKey(loItem.Type, ;
					This.GetNodeKey(loItem))
			else
				lcHeaderID  = This.GetHeaderID(lnType, lcParentID)
				lcHeaderKey = This.oTreeViewContainer.GetNodeKey(ccHEADER_TYPE, ;
					lcHeaderID)
			endif lnType = 0
		
		* Make sure the project and parent nodes are expanded.
		
			lcProjectKey = This.oTreeViewContainer.GetNodeKey(ccHEADER_TYPE, ;
				lcProjectID)
			This.oTreeViewContainer.TreeExpand(lcProjectKey, .T.)
			lcParentID = iif(empty(loItem.ParentKey), lcProjectID, ;
				lcProjectID + ccKEY_SEPARATOR + loItem.ParentKey)
			This.oTreeViewContainer.TreeExpand(lcHeaderKey, .T.)
		
		* If this is a class, get the item for it.
		
			if not empty(tcClass)
				loItem = This.oProject.oProjectItems(loItem.Key + ccKEY_SEPARATOR + ;
					tcClass)
			endif not empty(tcClass)
		
		* Select the node for the item.
		
			lcKey = This.oTreeViewContainer.GetNodeKey(loItem.Type, ;
				This.GetNodeKey(loItem))
			This.oTreeViewContainer.SelectNode(lcKey, not llHaveTag)
				&& don't push the current node if we re-loaded the tree
		endif vartype(loItem) = 'O'
		
	ENDPROC

	PROCEDURE selectproject		&& Selects the project associated with the selected item
		*==============================================================================
		* Method:			SelectProject
		* Status:			Public
		* Purpose:			Selects the project associated with the selected item
		* Author:			Doug Hennig
		* Last Revision:	03/03/2017
		* Parameters:		none
		* Returns:			.T.
		* Environment in:	the cursor specified in This.oTreeViewContainer.cCursorAlias
		*						is on the record for the selected item
		*					This.oSolution contains a reference to a
		*						ProjectExplorerSolution object
		* Environment out:	This.oProject contains the ProjectEngine object for
		*						the project the selected item belongs to
		*					This.oProjectSettings contains the ProjectSettings object
		*						for the project the selected item belongs to
		*==============================================================================
		
		local lcProject
		if This.oSolution.oProjects.Count > 1 or vartype(This.oProject) <> 'O'
			lcProject = alltrim(evaluate(This.oTreeViewContainer.cCursorAlias + ;
				'.PROJECT'))
			This.oProject = This.oSolution.oProjects.Item(lcProject)
		endif This.oSolution.oProjects.Count > 1 ...
		This.oProjectSettings = This.oProject.oProjectSettings.Clone()
		
	ENDPROC

	PROCEDURE setmain		&& Toggles the MainFile setting for the selected item
		*==============================================================================
		* Method:			SetMain
		* Status:			Public
		* Purpose:			Toggles the MainFile setting for the selected item
		* Author:			Doug Hennig
		* Last Revision:	04/05/2017
		* Parameters:		none
		* Returns:			.T.
		* Environment in:	This.oItem contains a reference to the currently selected
		*						item
		* Environment out:	This.oItem.MainFile is toggled and the change saved
		*==============================================================================
		
		if vartype(This.oItem) <> 'O' or not This.oItem.CanSetMain or ;
			This.oItem.Exclude
			return .F.
		endif vartype(This.oItem) <> 'O' ...
		This.oItem.MainFile = not This.oItem.MainFile
		This.lChanged      = .T.
		This.SaveSettings()
		This.UpdateNode()
		
	ENDPROC

	PROCEDURE settoolbarcontrollocation		&& Sets the specified control at the rightmost position of the toolbar
		*==============================================================================
		* Method:			SetToolbarControlLocation
		* Status:			Public
		* Purpose:			Sets the specified control at the rightmost position of the
		*						toolbar
		* Author:			Doug Hennig
		* Last Revision:	06/09/2017
		* Parameters:		toControl - a reference to the control
		* Returns:			.T. if it succeeded
		* Environment in:	the specified control is a member of the toolbar
		*					This.lExpanded is .T. if the form is expanded
		* Environment out:	if the form is collapsed, MinWidth is adjusted to account
		*						for the control
		*==============================================================================
		
		lparameters toControl
		local lnPos, ;
			loControl, ;
			lnRight
		
		* Ensure a control in the toolbar was passed.
		
		if vartype(toControl) <> 'O' or type('toControl.Parent') <> 'O' or ;
			toControl.Parent <> This.oProjectToolbar
			return .F.
		endif vartype(toControl) <> 'O' ...
		
		* Start by finding the right-most toolbar control.
		
		lnPos = 0
		for each loControl in This.oProjectToolbar.Controls foxobject
			lnRight = loControl.Left + loControl.Width
			if lnRight > lnPos
				lnPos = lnRight + 5
			endif lnRight > lnPos
		next loControl
		
		* Move the specified control to the right of that control.
		
		toControl.Left = lnPos
		toControl.Top  = This.oProjectToolbar.cmdBack.Top
		
		* If we're collapsed, set the minimum width as necessary.
		
		if not This.lExpanded
			This.MinWidth = toControl.Width + lnPos
		endif not This.lExpanded
		
	ENDPROC

	PROCEDURE Show
		lparameters tnStyle
		
		* Flag that we haven't opened the solution yet.
		
		This.lSolutionOpen = .F.
		
		* Do the usual behavior.
		
		dodefault(tnStyle)
		
		* Get the list of tags to filter on and load the solution.
		
		This.oProjectToolbar.cboTagFilter.Requery()
		
		* Flag that we opened the solution.
		
		This.lSolutionOpen = .T.
		
		* Call any addins.
		
		if not This.oAddins.ExecuteAddin('OnStartup', This)
			return
		endif not This.oAddins.ExecuteAddin('OnStartup', This)
		
	ENDPROC

	PROCEDURE showerrormessage		&& Displays an error message
		*==============================================================================
		* Method:			ShowErrorMessage
		* Status:			Public
		* Purpose:			Displays an error message
		* Author:			Doug Hennig
		* Last Revision:	04/11/2017
		* Parameters:		tcMessage - the message to display
		* Returns:			.T.
		* Environment in:	none
		* Environment out:	none
		*==============================================================================
		
		lparameters tcMessage
		messagebox(tcMessage, 16, 'Project Explorer')
		
	ENDPROC

	PROCEDURE showmessage		&& Displays a message
		*==============================================================================
		* Method:			ShowMessage
		* Status:			Public
		* Purpose:			Displays a message
		* Author:			Doug Hennig
		* Last Revision:	04/11/2017
		* Parameters:		tcMessage - the message to display
		* Returns:			.T.
		* Environment in:	none
		* Environment out:	none
		*==============================================================================
		
		lparameters tcMessage
		messagebox(tcMessage, 0, 'Project Explorer')
		
	ENDPROC

	PROCEDURE sortfilter		&& Displays the sort and filter dialog
		*==============================================================================
		* Method:			SortFilter
		* Status:			Public
		* Purpose:			Displays the sort and filter dialog
		* Author:			Doug Hennig
		* Last Revision:	03/05/2017
		* Parameters:		none
		* Returns:			.T.
		* Environment in:	This.cTreeViewSortExpression contains the sort expression
		*						for the TreeView
		*					This.lSortTreeViewDescending is .T. to use a descending
		*						sort
		*					This.cItemFilter is the item filter to use
		* Environment out:	the sort and filter dialog is displayed
		*					This.cItemFilter, This.cTreeViewSortExpression, and
		*						This.lSortTreeViewDescending may have been changed and
		*						the TreeView reloaded
		*==============================================================================
		
		loForm = newobject('ProjectExplorerSortFilter', This.ClassLibrary)
		loForm.cSortExpr   = This.cTreeViewSortExpression
		loForm.lDescending = This.lSortTreeViewDescending
		loForm.cFilter     = This.cItemFilter
		loForm.Show()
		if vartype(loForm) = 'O'
			This.cTreeViewSortExpression = loForm.cSortExpr
			This.lSortTreeViewDescending = loForm.lDescending
			This.cItemFilter             = loForm.cFilter
			This.LoadSolution()
		endif vartype(loForm) = 'O'
		
	ENDPROC

	PROCEDURE updatenode		&& Updates the selected node in the TreeView
		*==============================================================================
		* Method:			UpdateNode
		* Status:			Public
		* Purpose:			Updates the selected node in the TreeView
		* Author:			Doug Hennig
		* Last Revision:	10/07/2017
		* Parameters:		none
		* Returns:			.T.
		* Environment in:	This.oItem is a reference to the selected ProjectItem
		* Environment out:	the Text, Bold, ForeColor, and Image properties of the
		*						selected node may have changed
		*==============================================================================
		
		local loItem, ;
			loNode
		loItem = This.oItem
		loNode = This.oTreeViewContainer.oSelectedNode
		if vartype(loItem) = 'O' and vartype(loNode) = 'O'
			loNode.Text      = This.GetTextForItem(loItem)
			loNode.Bold      = loItem.MainFile
			loNode.ForeColor = loItem.ForeColor
			lcImage          = This.GetImageForItem(loItem)
			if lcImage <> loNode.Image
				loNode.Image = lcImage
			endif lcImage <> loNode.Image
		endif vartype(This.oItem) = 'O' ...
		
	ENDPROC

	PROCEDURE visualdiff		&& Displays a visual diff for the selected file
		*==============================================================================
		* Method:			VisualDiff
		* Status:			Public
		* Purpose:			Displays a visual diff for the selected file
		* Author:			Doug Hennig
		* Last Revision:	04/26/2017
		* Parameters:		none
		* Returns:			.T.
		* Environment in:	This.oSolution contains a reference to a
		*						ProjectExplorerSolution object
		*					This.oAddins contains a reference to a ProjectAddins object
		* Environment out:	the visual diff dialog is displayed for the file for the
		*						selected item
		*==============================================================================
		
		* Bug out if we're not using version control or the item isn't modified.
		
		local loItem
		if vartype(This.oItem) = 'O'
			loItem = This.oItem
		else
			loItem    = This.oProject.oProjectItem
			llProject = .T.
		endif vartype(This.oItem) = 'O'
		if not This.oSolution.lHaveVersionControl or vartype(loItem) <> 'O' or ;
			not loItem.IsFile or loItem.VersionControlStatus <> ccVC_STATUS_MODIFIED
			return
		endif not This.oSolution.lHaveVersionControl ...
		
		* Display the visual diff for the file.
		
		This.oSolution.oVersionControl.VisualDiff(loItem.Path)
		
	ENDPROC

	PROCEDURE yesno		&& Displays a Yes/No dialog and returns .T. if the user chose Yes
		*==============================================================================
		* Method:			YesNo
		* Status:			Public
		* Purpose:			Displays a Yes/No dialog and returns .T. if the user chose
		*						Yes
		* Author:			Doug Hennig
		* Last Revision:	02/21/2017
		* Parameters:		tcMessage - the message to display
		* Returns:			.T. if the user chose Yes
		* Environment in:	none
		* Environment out:	none
		*==============================================================================
		
		lparameters tcMessage
		return messagebox(tcMessage, 4 + 32, This.Caption) = IDYES
		
	ENDPROC

	PROCEDURE oSplitter.movesplittertoposition
		* If the form is collapsed, save and restore the MinWidth and Width settings.
		
		lparameters tnPosition
		local lnMinWidth, ;
			lnWidth
		lnMinWidth = Thisform.MinWidth
		lnWidth    = Thisform.Width
		dodefault(tnPosition)
		if not Thisform.lExpanded
			Thisform.MinWidth = lnMinWidth
			Thisform.Width    = lnWidth
		endif not Thisform.lExpanded
		
	ENDPROC

	PROCEDURE oTreeViewContainer.addrecordtotreeviewcursor
		* Adds the current item to the TreeView cursor if it matches the filter. Note
		* the loop: it's there so we can add parent records if they're missing because
		* they don't match the filter.
		
		lparameters toItem, ;
			toProject
		local lnIDLen, ;
			llDesc, ;
			lcProjectID, ;
			llDone, ;
			loCurrent, ;
			loItem, ;
			lcParentID, ;
			lcParentType, ;
			lnPage, ;
			lcImage, ;
			lcText, ;
			lnHeader, ;
			lnOrder, ;
			lcKey, ;
			lnI, ;
			lcID
		if Thisform.CheckItemFilter(toItem)
			lnIDLen     = len(evaluate(This.cCursorAlias + '.ID'))
			llDesc      = Thisform.lSortTreeViewDescending
			lcProjectID = toProject.oProjectItem.Key
			llDone      = .F.
			loCurrent   = .NULL.
			loItem      = toItem
			do while not llDone
				lcParentID   = iif(empty(loItem.ParentKey), lcProjectID, ;
					lcProjectID + ccKEY_SEPARATOR + loItem.ParentKey)
				lcParentType = evl(loItem.ParentType, ccHEADER_TYPE)
				do case
					case loItem.Type = FILETYPE_CLASS
						lnPage = 1
					case loItem.Type = FILETYPE_CLASSLIB
						lnPage = 3
					case loItem.Type = FILETYPE_FORM
						lnPage = 4
					otherwise
						lnPage = 2
				endcase
				lcImage = Thisform.GetImageForItem(loItem)
				lcText  = Thisform.GetTextForItem(loItem)
		
		* If we have a header for this item, use it as the parent.
		
				lnHeader = ascan(Thisform.aHeaders, loItem.Type, -1, -1, 1, 14)
				if lnHeader > 0
					lcParentID   = Thisform.GetHeaderID(lnHeader, lcParentID)
					lcParentType = ccHEADER_TYPE
				endif lnHeader > 0
		
		* Set the order so fields always appear before indexes.
		
				do case
					case loItem.Type = FILETYPE_FIELD and llDesc
						lnOrder = 1000000 - reccount()
					case loItem.Type = FILETYPE_FIELD
						lnOrder = reccount()
					case loItem.Type = FILETYPE_INDEX and llDesc
						lnOrder = -reccount()
					case loItem.Type = FILETYPE_INDEX
						lnOrder = reccount() + 200000
					case llDesc
						lnOrder = 0
					otherwise
						lnOrder = 999999
				endcase
		
		* Add the item.
		
				insert into (This.cCursorAlias) ;
						(ID, ;
						TYPE, ;
						PARENTID, ;
						PARENTTYPE, ;
						TEXT, ;
						IMAGE, ;
						FORECOLOR, ;
						BOLD, ;
						PAGE, ;
						LASTMOD, ;
						PROJECT, ;
						ORDER) ;
					values ;
						(Thisform.GetNodeKey(loItem), ;
						loItem.Type, ;
						lcParentID, ;
						lcParentType, ;
						lcText, ;
						lcImage, ;
						loItem.Forecolor, ;
						loItem.MainFile, ;
						lnPage, ;
						loItem.LastModified, ;
						toProject.cProject, ;
						lnOrder)
		
		* If this is a database, add database-related headers. Note that if we're
		* adding headers due to a missing parent, we'll only add the headers for the
		* item type we're currently on.
		
				if loItem.Type = FILETYPE_DATABASE
					lcKey = trim(ID)
					for lnI = 1 to alen(Thisform.aHeaders, 1)
						if Thisform.aHeaders[lnI, 5] and ;
							(vartype(loCurrent) <> 'O' or ;
							loCurrent.Type = Thisform.aHeaders[lnI, 1])
							lcID = Thisform.GetHeaderID(lnI, lcKey)
							insert into (This.cCursorAlias) ;
									(ID, ;
									TYPE, ;
									PARENTID, ;
									PARENTTYPE, ;
									TEXT, ;
									IMAGE, ;
									PAGE, ;
									PROJECT, ;
									ORDER) ;
								values ;
									(lcID, ;
									ccHEADER_TYPE, ;
									lcKey, ;
									FILETYPE_DATABASE, ;
									Thisform.aHeaders[lnI, 2], ;
									Thisform.aHeaders[lnI, 7], ;
									Thisform.aHeaders[lnI, 8], ;
									toProject.cProject, ;
									iif(llDesc, 1000000 - reccount(), reccount()))
							Thisform.aHeaders[lnI, 3] = Thisform.aHeaders[lnI, 3] + ;
								',' + lcKey
						endif Thisform.aHeaders[lnI, 5]
					next lnI
				endif loItem.Type = FILETYPE_DATABASE
		
		* If the parent for this item isn't in the cursor, add it. We also need to add
		* any headers that weren't added earlier because of the filter.
		
				llDone = seek(padr(lcParentID, lnIDLen), This.cCursorAlias, ;
					'ID')
				if not llDone
					loCurrent = loItem
					loItem    = toProject.oProjectItems.Item(loItem.ParentKey)
					if vartype(loItem) <> 'O'
						for lnI = 1 to alen(Thisform.aHeaders, 1)
							lcID = Thisform.GetHeaderID(lnI, lcProjectID)
							if lcID = lcParentID
								insert into (This.cCursorAlias) ;
										(ID, ;
										TYPE, ;
										PARENTID, ;
										PARENTTYPE, ;
										TEXT, ;
										IMAGE, ;
										PAGE, ;
										PROJECT, ;
										ORDER) ;
									values ;
										(lcID, ;
										ccHEADER_TYPE, ;
										lcProjectID, ;
										ccHEADER_TYPE, ;
										Thisform.aHeaders[lnI, 2], ;
										Thisform.aHeaders[lnI, 7], ;
										Thisform.aHeaders[lnI, 8], ;
										toProject.cProject, ;
										iif(llDesc, 1000000 - reccount(), reccount()))
								Thisform.aHeaders[lnI, 3] = Thisform.aHeaders[lnI, 3] + ',' + ;
									lcProjectID
								exit
							endif lcID = lcParentID
						next lnI
						llDone = .T.
					endif vartype(loItem) <> 'O'
				endif not llDone
			enddo while not llDone
		endif Thisform.CheckItemFilter(toItem)
		
	ENDPROC

	PROCEDURE oTreeViewContainer.candrop
		lparameters toData, ;
			toNode, ;
			toObject, ;
			tnEffect, ;
			tnButton, ;
			tnShift
		local loDragItem, ;
			loDropItem, ;
			llReturn
		
		* We can accept files or a class that is dropped on a different class library.
		
		loDragItem = Thisform.GetItemForNode(toObject.DragKey)
		loDropItem = Thisform.GetItemForNode(toObject.DropKey)
		llReturn   = toData.GetFormat(CF_FILES) or (toData.GetFormat(CF_MAX) and ;
			inlist(toObject.DropType, FILETYPE_CLASS, FILETYPE_CLASSLIB) and ;
			toObject.DropKey <> toObject.DragKey and not isnull(loDragItem) and ;
			not isnull(loDropItem) and loDragItem.ParentKey <> loDropItem.Key and ;
			not loDragItem.ParentKey == loDropItem.ParentKey)
		
		* Set the drop effect.
		
		if llReturn
			tnEffect = DROPEFFECT_COPY
		else
			tnEffect = DROPEFFECT_NONE
		endif llReturn
		return llReturn
		
	ENDPROC

	PROCEDURE oTreeViewContainer.canstartdrag
		* Only allow dragging a class.
		
		return This.cCurrentNodeType = FILETYPE_CLASS
		
	ENDPROC

	PROCEDURE oTreeViewContainer.deletenode
		* Remove the selected item when the user presses the Delete key.
		
		Thisform.RemoveItem()
		
	ENDPROC

	PROCEDURE oTreeViewContainer.filltreeviewcursor
		* Fill the TreeView cursor with items from each project.
		
		local llDesc, ;
			lnIDLen, ;
			loProject, ;
			llOK, ;
			lcProjectID, ;
			lcImage, ;
			lcText, ;
			lnI, ;
			lcID, ;
			loItems, ;
			loItem, ;
			llDone, ;
			lcParentID, ;
			lcParentType, ;
			lnPage, ;
			lnHeader, ;
			lnOrder, ;
			lcKey, ;
			loCurrent, ;
			lnSelect, ;
			lcExpr, ;
			lcType, ;
			loException as Exception
		Thisform.lIgnoreFilter = .F.
		llDesc  = Thisform.lSortTreeViewDescending
		lnIDLen = len(evaluate(This.cCursorAlias + '.ID'))
		
		* Process each project in the solution.
		
		for each loProject in Thisform.oSolution.oProjects foxobject
			if vartype(loProject.oProjectItems) <> 'O' or loProject.oProjectItems.Count = 0
				llOK = loProject.GetFilesFromProject()
				if not llOK
					This.ShowErrorMessage(loProject.cErrorMessage)
					return
				endif not llOK
			endif vartype(loProject.oProjectItems) <> 'O' ...
		
		* Insert a record for the project itself. Page 9 indicates that we aren't
		* using the pageframe for displaying properties.
		
			lcProjectID = loProject.oProjectItem.Key
			lcImage     = Thisform.GetImageForItem(loProject.oProjectItem)
			insert into (This.cCursorAlias) ;
					(ID, ;
					TYPE, ;
					PARENTID, ;
					PARENTTYPE, ;
					TEXT, ;
					IMAGE, ;
					PAGE, ;
					PROJECT, ;
					ORDER) ;
				values ;
					(lcProjectID, ;
					ccHEADER_TYPE, ;
					'', ;
					'', ;
					lower(juststem(loProject.cProject)), ;
					lcImage, ;
					9, ;
					loProject.cProject, ;
					iif(llDesc, 1000000 - reccount(), reccount()))
		
		* Add headers for the tag filter (not for database-related headers).
		
			for lnI = 1 to alen(Thisform.aHeaders, 1)
				if Thisform.cFilterTags + ',' $ Thisform.aHeaders[lnI, 6] + ',' and ;
					not Thisform.aHeaders[lnI, 5]
					lcID = Thisform.GetHeaderID(lnI, lcProjectID)
					insert into (This.cCursorAlias) ;
							(ID, ;
							TYPE, ;
							PARENTID, ;
							PARENTTYPE, ;
							TEXT, ;
							IMAGE, ;
							PAGE, ;
							PROJECT, ;
							ORDER) ;
						values ;
							(lcID, ;
							ccHEADER_TYPE, ;
							lcProjectID, ;
							ccHEADER_TYPE, ;
							Thisform.aHeaders[lnI, 2], ;
							Thisform.aHeaders[lnI, 7], ;
							Thisform.aHeaders[lnI, 8], ;
							loProject.cProject, ;
							iif(llDesc, 1000000 - reccount(), reccount()))
					Thisform.aHeaders[lnI, 3] = Thisform.aHeaders[lnI, 3] + ',' + ;
						lcProjectID
				endif Thisform.cFilterTags ...
			next lnI
		
		* Insert records for each item in the project into the cursor.
		
			loItems = loProject.oProjectItems
			for each loItem in loItems foxobject
				This.AddRecordToTreeViewCursor(loItem, loProject)
			next loItem
		next loProject
		
		* Index the cursor on how we're supposed to sort the TreeView. Note that we
		* have to strip out the exclude symbol from the name so it sorts properly.
		
		lnSelect = select()
		select (This.cCursorAlias)
		lcExpr = Thisform.cTreeViewSortExpression
		if empty(lcExpr)
			lcExpr = 'upper(TEXT)'
		endif empty(lcExpr)
		if lcExpr = 'upper(TEXT)'
			lcExpr = "padr(strtran(upper(TEXT), chr(216) + ' '), len(TEXT))"
		endif lcExpr = 'upper(TEXT)'
		lcType = type(lcExpr)
		do case
			case lcType = 'T'
				lcExpr = 'str(ORDER, 7) + ttoc(' + lcExpr + ', 1)'
			case lcType = 'N'
				lcExpr = 'str(ORDER, 7) + str(' + lcExpr + ', 10)'
			case lcType = 'C'
				lcExpr = 'str(ORDER, 7) + ' + lcExpr
		endcase
		if llDesc
			lcExpr = lcExpr + ' desc'
		endif llDesc
		try
			index on &lcExpr tag Sort
		catch to loException
			Thisform.ShowErrorMessage('The sort (' + lcExpr + ') is invalid. The ' + ;
				'error message is:' + ccCRLF + ccCRLF + loException.Message)
		endtry
		
		* Call any addins.
		
		Thisform.oAddins.ExecuteAddin('BeforeLoadTreeView', Thisform)
		select (lnSelect)
		
	ENDPROC

	PROCEDURE oTreeViewContainer.getchildnodes
		* Get the child nodes for the specified parent.
		
		lparameters tcType, ;
			tcID, ;
			toCollection
		local lnSelect, ;
			lnRecno, ;
			llFound, ;
			lnPos, ;
			lcProjectID, ;
			loProject, ;
			lcKey, ;
			loItem, ;
			loItems
		
		* For class libraries, databases, free tables, tables in a DBC, and views, we
		* need to get the child items because we lazy load them.
		
		if inlist(tcType, FILETYPE_CLASSLIB, FILETYPE_DATABASE, FILETYPE_FREETABLE, ;
			FILETYPE_TABLE_IN_DBC, FILETYPE_REMOTE_VIEW, FILETYPE_LOCAL_VIEW)
			lnSelect = select()
			select (This.cCursorAlias)
			lnRecno = recno()
			locate for PARENTID = tcID and PARENTTYPE = tcType and ;
				TYPE <> ccHEADER_TYPE
			llFound = found()
			go lnRecno
			if not llFound
		
		* Find the project record in the cursor, then select the project.
		
				lnPos       = at(ccKEY_SEPARATOR, tcID)
				lcProjectID = left(tcID, lnPos - 1)
				locate for ID = lcProjectID and TYPE = ccHEADER_TYPE
				Thisform.SelectProject()
				loProject = Thisform.oProject
				if inlist(tcType, FILETYPE_TABLE_IN_DBC, FILETYPE_REMOTE_VIEW, ;
					FILETYPE_LOCAL_VIEW)
					lcKey = tcID
				else
					lcKey = substr(tcID, lnPos + 1)
				endif inlist(tcType ...
				loItem = Thisform.GetItemForNode(lcKey)
				do case
					case tcType = FILETYPE_CLASSLIB
						loItems = loProject.GetClasses(loItem.Path, loItem.Key)
					case tcType = FILETYPE_FREETABLE
						loItems = loProject.GetTableItems(loItem.Path, loItem.Key)
					case tcType = FILETYPE_DATABASE
						loItems = loProject.GetDatabaseItems(loItem.Path, loItem.Key)
					otherwise
						loItems = loProject.GetDBCTableItems(loItem.ParentPath, ;
							loItem.Key, loItem.ItemName)
				endcase
				for each loItem in loItems foxobject
					This.AddRecordToTreeViewCursor(loItem, loProject)
				next loItem
			endif not llFound
			go lnRecno
			select (lnSelect)
		endif inlist(tcType ...
		
		* Now do the usual behavior.
		
		dodefault(tcType, tcID, toCollection)
		
	ENDPROC

	PROCEDURE oTreeViewContainer.getrootnodes
		lparameters toCollection
		local lnSelect, ;
			lcTag, ;
			lnI
		
		* Save the expanded nodes and selected node for the former tag.
		
		lnSelect = select()
		lcTag    = padr(evl(Thisform.cLastFilterTag, 'All'), 40)
		if Thisform.lSolutionOpen
			select (Thisform.cExpandedNodeCursor)
			delete for TAG = lcTag
			if not empty(This.aExpandedNodes[1])
				for lnI = 1 to alen(This.aExpandedNodes)
					insert into (Thisform.cExpandedNodeCursor) ;
						values (This.aExpandedNodes[lnI], lcTag, '')
				next lnI
			endif not empty(This.aExpandedNodes[1])
			insert into (Thisform.cExpandedNodeCursor) ;
				values ('', lcTag, This.cLastNode)
		endif Thisform.lSolutionOpen
		select (lnSelect)
		
		* Do the usual behavior.
		
		dodefault(toCollection)
		
		* Restore the expanded nodes for the new tag.
		
		dimension This.aExpandedNodes[1]
		This.aExpandedNodes = ''
		lcTag = padr(evl(Thisform.cFilterTags, 'All'), 40)
		select KEY from (Thisform.cExpandedNodeCursor) into array This.aExpandedNodes ;
			where TAG = lcTag and not empty(KEY)
		select (Thisform.cExpandedNodeCursor)
		locate for TAG = lcTag and not empty(SELECTEDKEY)
		This.cLastNode          = trim(SELECTEDKEY)
		Thisform.cLastFilterTag = Thisform.cFilterTags
		select (lnSelect)
		
	ENDPROC

	PROCEDURE oTreeViewContainer.goback
		* Go back to the previously selected node by popping it off the stack. Note we
		* get the tag filter too.
		
		lparameters tcKey
		local lcKey, ;
			lnPos, ;
			lcTag
		if empty(tcKey)
			lcKey = This.oStack.Pop()
		else
			lcKey = tcKey
		endif empty(tcKey)
		if not empty(nvl(lcKey, ''))
			lnPos = rat(ccSTACK_SEPARATOR, lcKey)
			if lnPos > 0
				lcTag = substr(lcKey, lnPos + 1)
				lnPos = at(ccSTACK_SEPARATOR, lcKey, 1)
				lcKey = left(lcKey, lnPos - 1)
				if not Thisform.cFilterTags == lcTag
					Thisform.cFilterTags = lcTag
					This.LoadTree()
				endif not Thisform.cFilterTags == lcTag
			endif lnPos > 0
			This.SelectNode(lcKey, .T.)
		endif not empty(nvl(lcKey, ''))
		
	ENDPROC

	PROCEDURE oTreeViewContainer.handledragdrop
		* Called when an item is dropped on the TreeView.
		
		lparameters toData, ;
			toNode, ;
			toObject
		local loDropItem, ;
			loProject, ;
			lnFiles, ;
			lcFile, ;
			laFiles[1], ;
			lnI, ;
			loFile, ;
			llReturn, ;
			loItem, ;
			lnType, ;
			lcProjectID, ;
			lcParentID, ;
			lcHeaderID, ;
			loDragItem, ;
			loTarget, ;
			lcClass, ;
			lcSource, ;
			lcTarget
		with Thisform
			loDropItem = Thisform.GetItemForNode(toObject.DropKey)
			if vartype(loDropItem) = 'O'
				loProject = Thisform.oSolution.oProjects.Item(loDropItem.Project)
			else
				loProject = Thisform.oProject
			endif vartype(loDropItem) = 'O'
			do case
		
		* The user dropped a list of files, so add them to the project if they're not
		* already there.
		
				case toObject.DragType = 'ImportFiles'
					lnFiles = 0
					for each lcFile in toObject.Files foxobject
						if directory(lcFile)
							lcFile  = addbs(lcFile)
							lnFiles = adir(laFiles, lcFile + '*.*')
							for lnI = 1 to lnFiles
								lnFiles = lnFiles + 1
								dimension laFiles[lnFiles]
								laFiles[lnFiles] = lcFile + laFiles[lnI, 1]
							next lnI
						else	
							lnFiles = lnFiles + 1
							dimension laFiles[lnFiles]
							laFiles[lnFiles] = lcFile
						endif directory(lcFile)
					next lcFile
					for lnI = 1 to lnFiles
						lcFile = laFiles[lnI]
						if type('loProject.oProject.Files[lcFile]') <> 'O'
		
		* Add the file to the project, our collection, and, if we're supposed to, to
		* version control.
		
							loFile   = .oOperations.AddItem(loProject.oProject, ;
								lcFile, iif(lower(justext(lcFile)) = 'exe', ;
								FILETYPE_APPLICATION, ''))
								&& handle a Project Manager bug described in
								&& ProjectOperations.AddItem
							llReturn = empty(.oOperations.cErrorMessage)
							if llReturn
								loItem = loProject.AddFileToCollection(loFile)
								if .lAddFileToVersionControlOnAdd
									.AddFileToVersionControl(loItem)
								endif .lAddFileToVersionControlOnAdd
								do case
									case not .oSolution.lHaveVersionControl
									case not .oSolution.lAutoCommitChanges and ;
										.oSolution.nIncludeInVersionControl > 1
										.oSolution.oVersionControl.ConvertBinaryToText(loProject.cProject)
										.GetItemStatus(loProject.oProjectItem)
									case .oSolution.lAutoCommitChanges
										.Commit(loProject.oProjectItem, ;
											.oSolution.cFileAddMessage)
								endcase
							endif llReturn
						endif type('loProject.oProject.Files[lcFile]') <> 'O'
					next lnI
		
		* Make sure the parent node for the new item is expanded, set cLastNode to the
		* key for the new item, and flag that we have to reload the solution (we don't
		* do that here due to a bug in the TreeView discussed in LoadTree).
		
					if vartype(loItem) = 'O'
						.cFilterTags = loItem.Tags.Item(1)
						lnType       = ascan(.aHeaders, loItem.Type, -1, -1, ;
							1, 14)
						lcProjectID  = loProject.oProjectItem.Key
						lcParentID   = iif(empty(loItem.ParentKey), lcProjectID, ;
							lcProjectID + ccKEY_SEPARATOR + loItem.ParentKey)
						lcHeaderID   = .GetHeaderID(lnType, lcParentID)
						dimension .aExpandedNodes[2]
						.aExpandedNodes[1] = This.GetNodeKey(ccHEADER_TYPE, ;
							lcProjectID)
						.aExpandedNodes[2] = This.GetNodeKey(ccHEADER_TYPE, ;
							lcHeaderID)
						.cSelectNode       = This.GetNodeKey(loItem.Type, ;
							.GetNodeKey(loItem))
						This.lNeedReload   = .T.
					endif vartype(loItem) = 'O'
		
		* We were dropping a class onto another class library so copy it.
		
				case toObject.DragType = 'Class'
					loDragItem = Thisform.GetItemForNode(toObject.DragKey)
					loTarget   = loProject.GetItemParent(loDropItem)
					lcClass    = loDragItem.ItemName
					lcSource   = loDragItem.Path
					lcTarget   = loTarget.Path
					add class (lcClass) of (lcSource) to (lcTarget)
					loProject.AddFileToCollection(loTarget)
					loItem = loProject.oProjectItems.Item(loProject.oProjectItems.Count)
					dimension .aExpandedNodes[1]
					.aExpandedNodes[1] = This.GetNodeKey(loTarget.Type, ;
						.GetNodeKey(loTarget))
					.cSelectNode       = This.GetNodeKey(loItem.Type, ;
						.GetNodeKey(loItem))
					This.lNeedReload   = .T.
					do case
						case not .oSolution.lHaveVersionControl
						case not .oSolution.lAutoCommitChanges and ;
							.oSolution.nIncludeInVersionControl > 1
							.oSolution.oVersionControl.ConvertBinaryToText(lcTarget)
							.GetItemStatus(loTarget)
						case .oSolution.lAutoCommitChanges
							.Commit(loTarget, .oSolution.cFileAddMessage)
					endcase
			endcase
		endwith
		
	ENDPROC

	PROCEDURE oTreeViewContainer.loadimages
		local lcPath, ;
			laClasses[1], ;
			lnImage, ;
			lcClass
		with This.oImageList
			lcPath = addbs(justpath(This.ClassLibrary)) + 'Images\'
		
		* Create an array of base classes and add an image for each. Some classes can't
		* be created visually so we don't have an image for them, so we'll just trap
		* the error.
		
			alanguage(laClasses, 3)
			lnImage = 1
			for each lcClass in laClasses foxobject
				try
					.ListImages.Add(lnImage, lower(lcClass), ;
						loadpicture(lcPath + 'projectexplorer' + lcClass + '.ico'))
					lnImage = lnImage + 1
				catch
				endtry
			next lcClass	
		
		* Add the other images we need.
		
			lnImage = .ListImages.Count
			.ListImages.Add(lnImage +  1, 'classlib', ;
				loadpicture(lcPath + 'projectexplorerclasslib.ico'))
			.ListImages.Add(lnImage +  2, 'code', ;
				loadpicture(lcPath + 'projectexplorercode.ico'))
			.ListImages.Add(lnImage +  3, 'text', ;
				loadpicture(lcPath + 'projectexplorertext.ico'))
			.ListImages.Add(lnImage +  4, 'other', ;
				loadpicture(lcPath + 'projectexplorerother.ico'))
			.ListImages.Add(lnImage +  5, 'table', ;
				loadpicture(lcPath + 'projectexplorertable.ico'))
			.ListImages.Add(lnImage +  6, 'menu', ;
				loadpicture(lcPath + 'projectexplorermenu.ico'))
			.ListImages.Add(lnImage +  7, 'project', ;
				loadpicture(lcPath + 'projectexplorerproject.ico'))
			.ListImages.Add(lnImage +  8, 'report', ;
				loadpicture(lcPath + 'projectexplorerreports.ico'))
			.ListImages.Add(lnImage +  9, 'labels', ;
				loadpicture(lcPath + 'projectexplorerlabels.ico'))
				&& note this is "labels" because "label" is already used for Label
				&& class
			.ListImages.Add(lnImage + 10, 'query', ;
				loadpicture(lcPath + 'projectexplorerquery.ico'))
			.ListImages.Add(lnImage + 11, 'database', ;
				loadpicture(lcPath + 'projectexplorerdatabase.ico'))
			.ListImages.Add(lnImage + 12, 'LocalView', ;
				loadpicture(lcPath + 'projectexplorerlocalview.ico'))
			.ListImages.Add(lnImage + 13, 'RemoteView', ;
				loadpicture(lcPath + 'projectexplorerremoteview.ico'))
			.ListImages.Add(lnImage + 14, 'connection', ;
				loadpicture(lcPath + 'projectexplorerconnection.ico'))
			.ListImages.Add(lnImage + 15, 'field', ;
				loadpicture(lcPath + 'projectexplorerfield.ico'))
			.ListImages.Add(lnImage + 16, 'index', ;
				loadpicture(lcPath + 'projectexplorerindex.ico'))
			.ListImages.Add(lnImage + 17, 'library', ;
				loadpicture(lcPath + 'projectexplorerlibrary.ico'))
			.ListImages.Add(lnImage + 18, 'application', ;
				loadpicture(lcPath + 'projectexplorerapplication.ico'))
		
		* Load the version control images.
		
			.ListImages.Add(lnImage + 19, 'modified', ;
				loadpicture(lcPath + 'projectexplorermodified.ico'))
			.ListImages.Add(lnImage + 20, 'added', ;
				loadpicture(lcPath + 'projectexploreradded.ico'))
			.ListImages.Add(lnImage + 20, 'clean', ;
				loadpicture(lcPath + 'projectexplorerclean.ico'))
			.ListImages.Add(lnImage + 21, 'unversioned', ;
				loadpicture(lcPath + 'projectexplorerunversioned.ico'))
			.ListImages.Add(lnImage + 22, 'ignored', ;
				loadpicture(lcPath + 'projectexplorerignored.ico'))
			.ListImages.Add(lnImage + 23, 'removed', ;
				loadpicture(lcPath + 'projectexplorerremoved.ico'))
			.ListImages.Add(lnImage + 24, 'excluded', ;
				loadpicture(lcPath + 'projectexplorerexcluded.ico'))
		endwith
		
	ENDPROC

	PROCEDURE oTreeViewContainer.loadnode
		lparameters toNodeItem,	;
			tcParentKey
		local lnSelect, ;
			lcType
		
		* Make sure we're on the correct record in the TreeView cursor.
		
		lnSelect = select()
		select (This.cCursorAlias)
		if not trim(NODEKEY) == toNodeItem.Key
			= seek(toNodeItem.Key, This.cCursorAlias, 'NODEKEY')
		endif not trim(NODEKEY) == toNodeItem.Key
		select (lnSelect)
		
		* Flag that class libraries, databases, free tables, tables in a DBC, and views
		* have child objects they're not necessarily in the cursor because we lazy load
		* them).
		
		lcType = left(toNodeItem.Key, 1)
		if inlist(lcType, FILETYPE_CLASSLIB, FILETYPE_DATABASE, FILETYPE_FREETABLE, ;
			FILETYPE_TABLE_IN_DBC, FILETYPE_REMOTE_VIEW, FILETYPE_LOCAL_VIEW)
			toNodeItem.HasChildren = .T.
		endif inlist(lcType ...
		
		* Do the usual behavior.
		
		dodefault(toNodeItem, tcParentKey)
		
	ENDPROC

	PROCEDURE oTreeViewContainer.loadtree
		lparameters tlNoSelect
		local lnI
		
		* Push the previous node onto the stack if we're supposed to.
		
		if vartype(This.oTree.SelectedItem) = 'O'
			This.PushKey(This.oTree.SelectedItem.Key)
		endif vartype(This.oTree.SelectedItem) = 'O'
		
		* Do the usual behavior.
		
		dodefault(tlNoSelect)
		
		* Expand and select any nodes we're supposed to after drag and drop.
		
		if not empty(Thisform.aExpandedNodes[1])
			for lnI = 1 to alen(Thisform.aExpandedNodes)
				This.TreeExpand(Thisform.aExpandedNodes[lnI], .T.)
			next lnI
			This.SelectNode(Thisform.cSelectNode)
		
		* Reset the saved nodes.
		
			Thisform.cSelectNode = ''
			dimension Thisform.aExpandedNodes[1]
			Thisform.aExpandedNodes[1] = ''
		endif not empty(Thisform.aExpandedNodes[1])
		
		* Save the filter tag.
		
		Thisform.cPreviousFilterTags = Thisform.cFilterTags
		
	ENDPROC

	PROCEDURE oTreeViewContainer.pushkey
		* Push both the key and the tag filter.
		
		lparameters tcKey
		This.oStack.Push(tcKey + ccSTACK_SEPARATOR + ;
			strtran(This.oTree.SelectedItem.Text, chr(216) + ' ') + ;
			ccSTACK_SEPARATOR + Thisform.cPreviousFilterTags)
		
	ENDPROC

	PROCEDURE oTreeViewContainer.restoreselectednode
		* Restore the selected and expanded nodes so we can restore our former state.
		
		local lcKey, ;
			lnSelect, ;
			laKeys[1], ;
			lnTags, ;
			lnI, ;
			laValues[1], ;
			lnValues, ;
			lnJ, ;
			lcValue
		lcKey = This.GetRegistryKey()
		if not empty(lcKey)
			lnSelect = select()
			lnTags   = This.oRegistry.EnumerateKeys(lcKey, @laKeys)
			for lnI = 1 to lnTags
				lcTag    = laKeys[lnI]
				lnValues = This.oRegistry.EnumerateKeyValues(lcKey + '\' + lcTag, @laValues)
				for lnJ = 1 to lnValues
					if laValues[lnJ, 1] = 'Expanded'
						insert into (Thisform.cExpandedNodeCursor) ;
							values (laValues[lnJ, 2], lcTag, '')
					else
						insert into (Thisform.cExpandedNodeCursor) ;
							values ('', lcTag, laValues[lnJ, 2])
					endif laValues[lnJ, 1] = 'Expanded'
				next lnJ
			next lnI
			select (lnSelect)
		endif not empty(lcKey)
		
	ENDPROC

	PROCEDURE oTreeViewContainer.saveselectednode
		* Save the selected and expanded nodes so we can restore our former state next
		* time.
		
		local lcKey, ;
			lnSelect, ;
			laTags[1], ;
			lnI, ;
			lcTag, ;
			lnNode
		
		* Remove the tags from the Registry in case there were more expanded nodes the
		* last time it was written to.
		
		lcKey = This.GetRegistryKey()
		if not empty(lcKey) and used(Thisform.cExpandedNodeCursor)
			lnSelect = select()
			select distinct TAG from (Thisform.cExpandedNodeCursor) ;
				into array laTags
			for lnI = 1 to _tally
				This.oRegistry.DeleteKey(lcKey + '\' + trim(laTags[lnI]))
			next lnI
		
		* Save the expanded nodes and selected node for the former tag.
		
			select (Thisform.cExpandedNodeCursor)
			lcTag = padr(evl(Thisform.cLastFilterTag, 'All'), 40)
			delete for TAG = lcTag
			with This.oTree
				if .Nodes.Count > 0
					for lnI = 1 to .Nodes.Count
						if .Nodes[lnI].Expanded
							insert into (Thisform.cExpandedNodeCursor) ;
								values (.Nodes[lnI].Key, lcTag, '')
						endif .Nodes[lnI].Expanded
					next lnI
					if vartype(.SelectedItem) = 'O'
						insert into (Thisform.cExpandedNodeCursor) ;
							values ('', lcTag, .SelectedItem.Key)
					endif vartype(.SelectedItem) = 'O'
				endif .Nodes.Count > 0
			endwith
		
		* Store the expanded and selected nodes by tag.
		
			lnNode = 1
			scan
				if empty(KEY)
					This.oRegistry.SetKey(lcKey + '\' + trim(TAG), ;
						'SelectedNode', trim(SELECTEDKEY))
				else
					This.oRegistry.SetKey(lcKey + '\' + trim(TAG), ;
						'Expanded' + transform(lnNode), trim(KEY))
					lnNode = lnNode + 1
				endif empty(KEY)
			endscan
			select (lnSelect)
		endif not empty(lcKey) ...
		
	ENDPROC

	PROCEDURE oTreeViewContainer.shortcutmenu
		lparameters toMenu, ;
			tcObject
		local lcPath, ;
			lcNoDisable, ;
			lcNoImage, ;
			lnNoIndex
		lcPath      = addbs(justpath(This.ClassLibrary)) + 'Images\'
		lcNoDisable = ''
		lcNoImage   = ''
		lnNoIndex   = 0
		toMenu.AddMenuBar('Exclude', ;
			'loForm.ExcludeFile()', ;
			"vartype(loForm.oItem) <> 'O' or not loForm.oItem.CanInclude or " + ;
				"loForm.oItem.MainFile", ;
			lcNoImage, lnNoIndex, ;
			"vartype(loForm.oItem) = 'O' and loForm.oItem.Exclude")
		toMenu.AddMenuBar('Set Main', ;
			'loForm.SetMain()', ;
			"vartype(loForm.oItem) <> 'O' or not loForm.oItem.CanSetMain or " + ;
				"loForm.oItem.Exclude", ;
			lcNoImage, lnNoIndex, ;
			"vartype(loForm.oItem) = 'O' and loForm.oItem.MainFile")
		toMenu.AddMenuSeparator()
		toMenu.AddMenuBar('Modify', ;
			'loForm.EditItem()', ;
			"vartype(loForm.oItem) <> 'O' or not loForm.oItem.CanEdit", ;
			lcPath + 'projectexplorermodify.bmp')
		toMenu.AddMenuBar("{iif(vartype(loForm.oItem) = 'O' and " + ;
				"inlist(loForm.oItem.Type, '" + FILETYPE_FIELD + "', '" + ;
				FILETYPE_INDEX + "', '" + FILETYPE_FREETABLE + "', '" + ;
				FILETYPE_TABLE_IN_DBC + "', '" + FILETYPE_LOCAL_VIEW + "', '" + ;
				FILETYPE_REMOTE_VIEW + "'), " + ;
				"'Browse', 'Run')}", ;
			'loForm.RunItem()', ;
			"vartype(loForm.oItem) <> 'O' or not loForm.oItem.CanRun", ;
			lcPath + 'projectexplorerrun.bmp')
		if vartype(Thisform.oItem) = 'O' and Thisform.oItem.Type = FILETYPE_CLASS and ;
			lower(Thisform.oItem.ItemBaseClass) = 'form'
			toMenu.AddMenuSeparator()
			toMenu.AddMenuBar('Create Form from Class', ;
				'loForm.NewItem(loForm.oItem.ItemName, loForm.oItem.Path)')
		endif vartype(Thisform.oItem) = 'O' ...
		toMenu.AddMenuSeparator()
		toMenu.AddMenuBar('Builder', ;
			"do (_wizard) with 'project'")
		toMenu.AddMenuBar('Refresh', ;
			'loForm.LoadSolution(.T.)', ;
			lcNoDisable, ;
			lcPath + 'projectexplorerrefresh.bmp')
		toMenu.AddMenuBar('Build Solution', ;
			'loForm.BuildSolutionFromDefaults()', ;
			'not loForm.CanBuildProject()', ;
			lcPath + 'projectexplorerbuildsolution.bmp')
		if Thisform.oSolution.lHaveVersionControl
			toMenu.AddMenuSeparator()
			toMenu.AddMenuBar('Add File to Version Control', ;
				'loForm.AddFileToVersionControl()', ;
				"vartype(loForm.oItem) <> 'O' or not loForm.oItem.IsFile or " + ;
					"(not empty(loForm.oItem.VersionControlStatus) and " + ;
					"not inlist(loForm.oItem.VersionControlStatus, '" + ;
					ccVC_STATUS_IGNORED + "', '" + ccVC_STATUS_UNTRACKED + "', '" + ;
					ccVC_STATUS_REMOVED + "'))", ;
				lcPath + 'projectexploreradd.bmp')
			toMenu.AddMenuBar('Remove File from Version Control', ;
				'loForm.RemoveFileFromVersionControl()', ;
				"vartype(loForm.oItem) <> 'O' or not loForm.oItem.IsFile or " + ;
					"empty(loForm.oItem.VersionControlStatus) or " + ;
					"inlist(loForm.oItem.VersionControlStatus, '" + ;
					ccVC_STATUS_IGNORED + "', '" + ccVC_STATUS_UNTRACKED + "')", , ;
				lcPath + 'projectexplorerremove.bmp')
			toMenu.AddMenuSeparator()
			toMenu.AddMenuBar('Commit File', ;
				'loForm.Commit()', ;
				'not loForm.CanCommitOrRevert()', ;
				lcPath + 'projectexplorercommit.bmp')
			toMenu.AddMenuBar('Commit All', ;
				'loForm.CommitAll()')
			toMenu.AddMenuBar('Revert', ;
				'loForm.RevertFile()', ;
				'not loForm.CanCommitOrRevert()', ;
				lcPath + 'projectexplorerrevert.bmp')
			toMenu.AddMenuSeparator()
			toMenu.AddMenuBar('Revision History', ;
				'loForm.RevisionHistory()', ;
				'not loForm.CanDisplayRevisionHistory()', ;
				lcPath + 'projectexplorerrevhistory.bmp')
			toMenu.AddMenuBar('Visual Diff', ;
				'loForm.VisualDiff()', ;
				'not loForm.CanDisplayVisualDiff()', ;
				lcPath + 'projectexplorervisualdiff.bmp')
			toMenu.AddMenuBar('Repository Browser', ;
				'loForm.RepositoryBrowser()', ;
				lcNoDisable, ;
				lcPath + 'projectexplorerrepobrowser.bmp')
		endif Thisform.oSolution.lHaveVersionControl
		
		* Execute any addin.
		
		Thisform.oAddins.ExecuteAddin('AfterCreateShortcutMenu', Thisform, toMenu)
		
	ENDPROC

	PROCEDURE oTreeViewContainer.showmenu
		* Destroy the menu after we've used it so it's recreated fresh each item
		* because so items in the menu are conditional.
		
		dodefault()
		This.oMenu = .NULL.
		
	ENDPROC

	PROCEDURE oTreeViewContainer.treedblclick
		* Either modify or run the selected item.
		
		dodefault()
		do case
			case vartype(Thisform.oItem) <> 'O'
			case Thisform.lModifyOnDblClick
				Thisform.EditItem()
			otherwise
				Thisform.RunItem()
		endcase
		
	ENDPROC

	PROCEDURE oTreeViewContainer.treeolecompletedrag
		* Called when a class is dropped on something other than the TreeView.
		
		lparameters tnEffect
		local laMouse[1], ;
			lnRows, ;
			laObjects[1], ;
			loForm, ;
			loTarget, ;
			lcClass, ;
			loObject, ;
			lnCount, ;
			lcObjName, ;
			laMembers[1], ;
			lcBaseClass, ;
			loException as Exception
		dodefault(tnEffect)
		lnRows = amouseobj(laMouse)
		aselobj(laObjects)
		
		* If the class was dropped onto the Form or Class Designer, make sure the
		* target is a container.
		
		if lnRows = 4
			loForm   = laMouse[2]
			loTarget = laObjects[1]
			if vartype(loTarget) <> 'O' or lower(loTarget.BaseClass) = 'label'
				loTarget = loForm
			endif vartype(loTarget) <> 'O' ...
			if pemstatus(loTarget, 'Controls', 5)
		
		* Remove the label that may have been added automatically.
		
				lcClass  = lower(Thisform.oItem.ItemName)
				loObject = laMouse[1]
				if loObject.BaseClass = 'Label' and loObject.Caption = lcClass
					loForm.RemoveObject(loObject.Name)
				endif loObject.BaseClass = 'Label' ...
		
		* Create a unique name for the object.
		
				lnCount   = 1
				lcObjName = lcClass + '1'
				laMembers = ''
				amembers(laMembers, loTarget, 2)
				do while ascan(laMembers, lcObjName, -1, -1, 1, 15) > 0
					lnCount   = lnCount + 1
					lcObjName = lcClass + transform(lnCount)
				enddo while ascan(laMembers, lcObjName, -1, -1, 1, 15) > 0
		
		* Add the object to the container.
		
				lcBaseClass = lower(loTarget.BaseClass)
				try
					loTarget.NewObject(lcObjName, lcClass, Thisform.oItem.Path)
					with loTarget.&lcObjName
						if pemstatus(loTarget.&lcObjName, 'Visible', 5)
							.Visible = .T.
						endif pemstatus(loTarget.&lcObjName, 'Visible', 5)
						if lcBaseClass <> 'column'
							.Left = laMouse[3]
							.Top  = laMouse[4]
						endif lcBaseClass <> 'column'
					endwith
		
		* If the container is a grid column, see if there's a Text1 object in it and if
		* so, ask the user if they want it removed.
		
					if lcBaseClass = 'column' and ;
						ascan(laMembers, 'Text1', -1, -1, 1, 15) > 0 and ;
						Thisform.YesNo('Remove Text1 from the column?')
						loTarget.RemoveObject('Text1')
						loTarget.CurrentControl = lcObjName
					endif lcBaseClass = 'column'
				catch to loException ;
					when loException.ErrorNo = cnERR_OBJECT_CLASS_INVALID
					Thisform.ShowErrorMessage('You cannot add ' + lcClass + ;
						' to this container.')
				catch to loException
					Thisform.ShowErrorMessage('An error occurred adding an ' + ;
						'instance of ' + lcClass + ' to this container. The ' + ;
						'error message is:' + ccCRLF + ccCRLF + loException.Message)
				endtry
			endif pemstatus(loTarget, 'Controls', 5)
		endif lnRows = 4
		
	ENDPROC

	PROCEDURE oTreeViewContainer.treeolestartdrag
		* Only allow copy operations.
		
		lparameters toData, ;
			tnAllowedEffects
		tnAllowedEffects = DROPEFFECT_COPY
		dodefault(@toData, @tnAllowedEffects)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS projectexplorerformdesktop AS projectexplorerform OF "projectexplorerui.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	Desktop = .T.
	DoCreate = .T.
	Name = "projectexplorerformdesktop"
	oEventTimer.Name = "oEventTimer"
	oPersist.Name = "oPersist"
	oProjectInfo.cmdRevert.Name = "cmdRevert"
	oProjectInfo.cmdSave.Name = "cmdSave"
	oProjectInfo.Name = "oProjectInfo"
	oProjectInfo.pgfProperties.ErasePage = .T.
	oProjectInfo.pgfProperties.Name = "pgfProperties"
	oProjectInfo.pgfProperties.projectexplorerpage1.chkDebug.Alignment = 0
	oProjectInfo.pgfProperties.projectexplorerpage1.chkDebug.Name = "chkDebug"
	oProjectInfo.pgfProperties.projectexplorerpage1.chkEncrypted.Alignment = 0
	oProjectInfo.pgfProperties.projectexplorerpage1.chkEncrypted.Name = "chkEncrypted"
	oProjectInfo.pgfProperties.projectexplorerpage1.chkIcon.Alignment = 0
	oProjectInfo.pgfProperties.projectexplorerpage1.chkIcon.Name = "chkIcon"
	oProjectInfo.pgfProperties.projectexplorerpage1.chkProjectHook.Alignment = 0
	oProjectInfo.pgfProperties.projectexplorerpage1.chkProjectHook.Name = "chkProjectHook"
	oProjectInfo.pgfProperties.projectexplorerpage1.cmdProjectHook.Name = "cmdProjectHook"
	oProjectInfo.pgfProperties.projectexplorerpage1.edtUser.Name = "edtUser"
	oProjectInfo.pgfProperties.projectexplorerpage1.imgIcon.Name = "imgIcon"
	oProjectInfo.pgfProperties.projectexplorerpage1.lblAddress.Name = "lblAddress"
	oProjectInfo.pgfProperties.projectexplorerpage1.lblAuthor.Name = "lblAuthor"
	oProjectInfo.pgfProperties.projectexplorerpage1.lblCity.Name = "lblCity"
	oProjectInfo.pgfProperties.projectexplorerpage1.lblCompany.Name = "lblCompany"
	oProjectInfo.pgfProperties.projectexplorerpage1.lblCountry.Name = "lblCountry"
	oProjectInfo.pgfProperties.projectexplorerpage1.lblHome.Name = "lblHome"
	oProjectInfo.pgfProperties.projectexplorerpage1.lblLastBuilt.Name = "lblLastBuilt"
	oProjectInfo.pgfProperties.projectexplorerpage1.lblPostalCode.Name = "lblPostalCode"
	oProjectInfo.pgfProperties.projectexplorerpage1.lblProject.Name = "lblProject"
	oProjectInfo.pgfProperties.projectexplorerpage1.lblRegion.Name = "lblRegion"
	oProjectInfo.pgfProperties.projectexplorerpage1.lblUser.Name = "lblUser"
	oProjectInfo.pgfProperties.projectexplorerpage1.Name = "projectexplorerpage1"
	oProjectInfo.pgfProperties.projectexplorerpage1.txtAddress.Name = "txtAddress"
	oProjectInfo.pgfProperties.projectexplorerpage1.txtAuthor.Name = "txtAuthor"
	oProjectInfo.pgfProperties.projectexplorerpage1.txtCity.Name = "txtCity"
	oProjectInfo.pgfProperties.projectexplorerpage1.txtCompany.Name = "txtCompany"
	oProjectInfo.pgfProperties.projectexplorerpage1.txtCountry.Name = "txtCountry"
	oProjectInfo.pgfProperties.projectexplorerpage1.txtHome.Name = "txtHome"
	oProjectInfo.pgfProperties.projectexplorerpage1.txtLastBuilt.Name = "txtLastBuilt"
	oProjectInfo.pgfProperties.projectexplorerpage1.txtPostalCode.Name = "txtPostalCode"
	oProjectInfo.pgfProperties.projectexplorerpage1.txtProject.Name = "txtProject"
	oProjectInfo.pgfProperties.projectexplorerpage1.txtProjectHook.Name = "txtProjectHook"
	oProjectInfo.pgfProperties.projectexplorerpage1.txtRegion.Name = "txtRegion"
	oProjectInfo.pgfProperties.Projectexplorerpage2.chkAutoIncrement.Alignment = 0
	oProjectInfo.pgfProperties.Projectexplorerpage2.chkAutoIncrement.Name = "chkAutoIncrement"
	oProjectInfo.pgfProperties.Projectexplorerpage2.ctrVersionInfo.lblLabel.Name = "lblLabel"
	oProjectInfo.pgfProperties.Projectexplorerpage2.ctrVersionInfo.Name = "ctrVersionInfo"
	oProjectInfo.pgfProperties.Projectexplorerpage2.ctrVersionInfo.shpBox.Name = "shpBox"
	oProjectInfo.pgfProperties.Projectexplorerpage2.ctrVersionNumber.lblLabel.Name = "lblLabel"
	oProjectInfo.pgfProperties.Projectexplorerpage2.ctrVersionNumber.Name = "ctrVersionNumber"
	oProjectInfo.pgfProperties.Projectexplorerpage2.ctrVersionNumber.shpBox.Name = "shpBox"
	oProjectInfo.pgfProperties.Projectexplorerpage2.lblBuildVersion.Name = "lblBuildVersion"
	oProjectInfo.pgfProperties.Projectexplorerpage2.lblMajorVersion.Name = "lblMajorVersion"
	oProjectInfo.pgfProperties.Projectexplorerpage2.lblMinorVersion.Name = "lblMinorVersion"
	oProjectInfo.pgfProperties.Projectexplorerpage2.lblVersionComments.Name = "lblVersionComments"
	oProjectInfo.pgfProperties.Projectexplorerpage2.lblVersionCompany.Name = "lblVersionCompany"
	oProjectInfo.pgfProperties.Projectexplorerpage2.lblVersionCopyright.Name = "lblVersionCopyright"
	oProjectInfo.pgfProperties.Projectexplorerpage2.lblVersionDescription.Name = "lblVersionDescription"
	oProjectInfo.pgfProperties.Projectexplorerpage2.lblVersionLanguage.Name = "lblVersionLanguage"
	oProjectInfo.pgfProperties.Projectexplorerpage2.lblVersionProduct.Name = "lblVersionProduct"
	oProjectInfo.pgfProperties.Projectexplorerpage2.lblVersionTrademarks.Name = "lblVersionTrademarks"
	oProjectInfo.pgfProperties.Projectexplorerpage2.Name = "Projectexplorerpage2"
	oProjectInfo.pgfProperties.Projectexplorerpage2.txtBuildVersion.Name = "txtBuildVersion"
	oProjectInfo.pgfProperties.Projectexplorerpage2.txtMajorVersion.Name = "txtMajorVersion"
	oProjectInfo.pgfProperties.Projectexplorerpage2.txtMinorVersion.Name = "txtMinorVersion"
	oProjectInfo.pgfProperties.Projectexplorerpage2.txtVersionComments.Name = "txtVersionComments"
	oProjectInfo.pgfProperties.Projectexplorerpage2.txtVersionCompany.Name = "txtVersionCompany"
	oProjectInfo.pgfProperties.Projectexplorerpage2.txtVersionCopyright.Name = "txtVersionCopyright"
	oProjectInfo.pgfProperties.Projectexplorerpage2.txtVersionDescription.Name = "txtVersionDescription"
	oProjectInfo.pgfProperties.Projectexplorerpage2.txtVersionLanguage.Name = "txtVersionLanguage"
	oProjectInfo.pgfProperties.Projectexplorerpage2.txtVersionProduct.Name = "txtVersionProduct"
	oProjectInfo.pgfProperties.Projectexplorerpage2.txtVersionTrademarks.Name = "txtVersionTrademarks"
	oProjectInfo.pgfProperties.Projectexplorerpage3.cboInstancing.Name = "cboInstancing"
	oProjectInfo.pgfProperties.Projectexplorerpage3.cntClasses.lblLabel.Name = "lblLabel"
	oProjectInfo.pgfProperties.Projectexplorerpage3.cntClasses.Name = "cntClasses"
	oProjectInfo.pgfProperties.Projectexplorerpage3.cntClasses.shpBox.Name = "shpBox"
	oProjectInfo.pgfProperties.Projectexplorerpage3.cntHelp.cmdGetFile.Name = "cmdGetFile"
	oProjectInfo.pgfProperties.Projectexplorerpage3.cntHelp.lblFile.Name = "lblFile"
	oProjectInfo.pgfProperties.Projectexplorerpage3.cntHelp.Name = "cntHelp"
	oProjectInfo.pgfProperties.Projectexplorerpage3.cntHelp.txtFile.Name = "txtFile"
	oProjectInfo.pgfProperties.Projectexplorerpage3.lblDescription.Name = "lblDescription"
	oProjectInfo.pgfProperties.Projectexplorerpage3.lblHelpID.Name = "lblHelpID"
	oProjectInfo.pgfProperties.Projectexplorerpage3.lblInstancing.Name = "lblInstancing"
	oProjectInfo.pgfProperties.Projectexplorerpage3.lblLibrary.Name = "lblLibrary"
	oProjectInfo.pgfProperties.Projectexplorerpage3.lblName.Name = "lblName"
	oProjectInfo.pgfProperties.Projectexplorerpage3.lblProjectName.Name = "lblProjectName"
	oProjectInfo.pgfProperties.Projectexplorerpage3.lblTypelibDesc.Name = "lblTypelibDesc"
	oProjectInfo.pgfProperties.Projectexplorerpage3.lstClasses.Name = "lstClasses"
	oProjectInfo.pgfProperties.Projectexplorerpage3.Name = "Projectexplorerpage3"
	oProjectInfo.pgfProperties.Projectexplorerpage3.txtDescription.Name = "txtDescription"
	oProjectInfo.pgfProperties.Projectexplorerpage3.txtHelpID.Name = "txtHelpID"
	oProjectInfo.pgfProperties.Projectexplorerpage3.txtLibrary.Name = "txtLibrary"
	oProjectInfo.pgfProperties.Projectexplorerpage3.txtName.Name = "txtName"
	oProjectInfo.pgfProperties.Projectexplorerpage3.txtProjectName.Name = "txtProjectName"
	oProjectInfo.pgfProperties.Projectexplorerpage3.txtTypelibDesc.Name = "txtTypelibDesc"
	oProjectToolbar.cboTagFilter.Name = "cboTagFilter"
	oProjectToolbar.cmdAdd.Name = "cmdAdd"
	oProjectToolbar.cmdBack.cmdMain.Name = "cmdMain"
	oProjectToolbar.cmdBack.cmdMenu.Name = "cmdMenu"
	oProjectToolbar.cmdBack.Name = "cmdBack"
	oProjectToolbar.cmdBuild.cmdMain.Name = "cmdMain"
	oProjectToolbar.cmdBuild.cmdMenu.Name = "cmdMenu"
	oProjectToolbar.cmdBuild.Name = "cmdBuild"
	oProjectToolbar.cmdEdit.Name = "cmdEdit"
	oProjectToolbar.cmdExpand.Name = "cmdExpand"
	oProjectToolbar.cmdNew.Name = "cmdNew"
	oProjectToolbar.cmdReload.Name = "cmdReload"
	oProjectToolbar.cmdRemove.Name = "cmdRemove"
	oProjectToolbar.cmdRun.Name = "cmdRun"
	oProjectToolbar.Name = "oProjectToolbar"
	oSplitter.Name = "oSplitter"
	oTreeViewContainer.Name = "oTreeViewContainer"
	oTreeViewContainer.oImageList.Left = 160
	oTreeViewContainer.oImageList.Name = "oImageList"
	oTreeViewContainer.oImageList.Top = 0
	oTreeViewContainer.oStack.Name = "oStack"
	oTreeViewContainer.oTree.Height = 504
	oTreeViewContainer.oTree.Left = 0
	oTreeViewContainer.oTree.Name = "oTree"
	oTreeViewContainer.oTree.Width = 210
	oTreeViewContainer.tmrReload.Name = "tmrReload"
	oTreeViewContainer.tmrSync.Name = "tmrSync"
	pgfProperties.ErasePage = .T.
	pgfProperties.Height = 505
	pgfProperties.Name = "pgfProperties"
	pgfProperties.projectexplorerpage1.Classproperties1.cboColor.Name = "cboColor"
	pgfProperties.projectexplorerpage1.Classproperties1.cboTags.cboCombo.Name = "cboCombo"
	pgfProperties.projectexplorerpage1.Classproperties1.cboTags.Name = "cboTags"
	pgfProperties.projectexplorerpage1.Classproperties1.cboTags.oImageList.Height = 100
	pgfProperties.projectexplorerpage1.Classproperties1.cboTags.oImageList.Left = 120
	pgfProperties.projectexplorerpage1.Classproperties1.cboTags.oImageList.Name = "oImageList"
	pgfProperties.projectexplorerpage1.Classproperties1.cboTags.oImageList.Top = 40
	pgfProperties.projectexplorerpage1.Classproperties1.cboTags.oImageList.Width = 100
	pgfProperties.projectexplorerpage1.Classproperties1.cboTags.oTree.Height = 174
	pgfProperties.projectexplorerpage1.Classproperties1.cboTags.oTree.Left = 5
	pgfProperties.projectexplorerpage1.Classproperties1.cboTags.oTree.Name = "oTree"
	pgfProperties.projectexplorerpage1.Classproperties1.cboTags.oTree.Top = 29
	pgfProperties.projectexplorerpage1.Classproperties1.cboTags.oTree.Width = 166
	pgfProperties.projectexplorerpage1.Classproperties1.cboTags.shpTreeView.Name = "shpTreeView"
	pgfProperties.projectexplorerpage1.Classproperties1.chkExclude.Alignment = 0
	pgfProperties.projectexplorerpage1.Classproperties1.chkExclude.Name = "chkExclude"
	pgfProperties.projectexplorerpage1.Classproperties1.chkMainFile.Alignment = 0
	pgfProperties.projectexplorerpage1.Classproperties1.chkMainFile.Name = "chkMainFile"
	pgfProperties.projectexplorerpage1.Classproperties1.chkOLEPublic.Alignment = 0
	pgfProperties.projectexplorerpage1.Classproperties1.chkOLEPublic.Name = "chkOLEPublic"
	pgfProperties.projectexplorerpage1.Classproperties1.cmdRevert.Name = "cmdRevert"
	pgfProperties.projectexplorerpage1.Classproperties1.cmdSave.Name = "cmdSave"
	pgfProperties.projectexplorerpage1.Classproperties1.ctrParent.lblLabel.Name = "lblLabel"
	pgfProperties.projectexplorerpage1.Classproperties1.ctrParent.Name = "ctrParent"
	pgfProperties.projectexplorerpage1.Classproperties1.ctrParent.shpBox.Name = "shpBox"
	pgfProperties.projectexplorerpage1.Classproperties1.edtDescription.Name = "edtDescription"
	pgfProperties.projectexplorerpage1.Classproperties1.edtUser.Name = "edtUser"
	pgfProperties.projectexplorerpage1.Classproperties1.imgIcon.Name = "imgIcon"
	pgfProperties.projectexplorerpage1.Classproperties1.imgToolbarIcon.Name = "imgToolbarIcon"
	pgfProperties.projectexplorerpage1.Classproperties1.lblBaseClass.Name = "lblBaseClass"
	pgfProperties.projectexplorerpage1.Classproperties1.lblColor.Name = "lblColor"
	pgfProperties.projectexplorerpage1.Classproperties1.lblDescription.Name = "lblDescription"
	pgfProperties.projectexplorerpage1.Classproperties1.lblIcon.Name = "lblIcon"
	pgfProperties.projectexplorerpage1.Classproperties1.lblIncludeFile.Name = "lblIncludeFile"
	pgfProperties.projectexplorerpage1.Classproperties1.lblLastModified.Name = "lblLastModified"
	pgfProperties.projectexplorerpage1.Classproperties1.lblName.Name = "lblName"
	pgfProperties.projectexplorerpage1.Classproperties1.lblParentClass.Name = "lblParentClass"
	pgfProperties.projectexplorerpage1.Classproperties1.lblParentLibrary.Name = "lblParentLibrary"
	pgfProperties.projectexplorerpage1.Classproperties1.lblPath.Name = "lblPath"
	pgfProperties.projectexplorerpage1.Classproperties1.lblTags.Name = "lblTags"
	pgfProperties.projectexplorerpage1.Classproperties1.lblToolbarIcon.Name = "lblToolbarIcon"
	pgfProperties.projectexplorerpage1.Classproperties1.lblUser.Name = "lblUser"
	pgfProperties.projectexplorerpage1.Classproperties1.Name = "Classproperties1"
	pgfProperties.projectexplorerpage1.Classproperties1.txtBaseClass.Name = "txtBaseClass"
	pgfProperties.projectexplorerpage1.Classproperties1.txtIncludeFile.Name = "txtIncludeFile"
	pgfProperties.projectexplorerpage1.Classproperties1.txtLastModified.Name = "txtLastModified"
	pgfProperties.projectexplorerpage1.Classproperties1.txtName.Name = "txtName"
	pgfProperties.projectexplorerpage1.Classproperties1.txtParentClass.Name = "txtParentClass"
	pgfProperties.projectexplorerpage1.Classproperties1.txtParentLibrary.Name = "txtParentLibrary"
	pgfProperties.projectexplorerpage1.Classproperties1.txtPath.Name = "txtPath"
	pgfProperties.projectexplorerpage1.Name = "projectexplorerpage1"
	pgfProperties.Projectexplorerpage2.Name = "Projectexplorerpage2"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.cboColor.Name = "cboColor"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.cboTags.cboCombo.Name = "cboCombo"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.cboTags.Name = "cboTags"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.cboTags.oImageList.Height = 100
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.cboTags.oImageList.Left = 120
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.cboTags.oImageList.Name = "oImageList"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.cboTags.oImageList.Top = 40
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.cboTags.oImageList.Width = 100
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.cboTags.oTree.Height = 174
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.cboTags.oTree.Left = 5
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.cboTags.oTree.Name = "oTree"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.cboTags.oTree.Top = 29
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.cboTags.oTree.Width = 166
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.cboTags.shpTreeView.Name = "shpTreeView"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.chkExclude.Alignment = 0
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.chkExclude.Name = "chkExclude"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.chkMainFile.Alignment = 0
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.chkMainFile.Name = "chkMainFile"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.cmdRevert.Name = "cmdRevert"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.cmdSave.Name = "cmdSave"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.edtDescription.Name = "edtDescription"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.edtUser.Name = "edtUser"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.lblColor.Name = "lblColor"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.lblDescription.Name = "lblDescription"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.lblLastModified.Name = "lblLastModified"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.lblName.Name = "lblName"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.lblPath.Name = "lblPath"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.lblTags.Name = "lblTags"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.lblUser.Name = "lblUser"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.Name = "Projectitemproperties1"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.txtLastModified.Name = "txtLastModified"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.txtName.Name = "txtName"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.txtPath.Name = "txtPath"
	pgfProperties.Projectexplorerpage3.Name = "Projectexplorerpage3"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.cboColor.Name = "cboColor"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.cboTags.cboCombo.Name = "cboCombo"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.cboTags.Name = "cboTags"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.cboTags.oImageList.Height = 100
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.cboTags.oImageList.Left = 120
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.cboTags.oImageList.Name = "oImageList"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.cboTags.oImageList.Top = 40
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.cboTags.oImageList.Width = 100
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.cboTags.oTree.Height = 174
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.cboTags.oTree.Left = 5
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.cboTags.oTree.Name = "oTree"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.cboTags.oTree.Top = 29
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.cboTags.oTree.Width = 166
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.cboTags.shpTreeView.Name = "shpTreeView"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.chkExclude.Alignment = 0
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.chkExclude.Name = "chkExclude"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.chkMainFile.Alignment = 0
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.chkMainFile.Name = "chkMainFile"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.cmdRevert.Name = "cmdRevert"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.cmdSave.Name = "cmdSave"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.edtDescription.Name = "edtDescription"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.edtUser.Name = "edtUser"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.lblColor.Name = "lblColor"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.lblDescription.Name = "lblDescription"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.lblLastModified.Name = "lblLastModified"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.lblName.Name = "lblName"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.lblPath.Name = "lblPath"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.lblTags.Name = "lblTags"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.lblUser.Name = "lblUser"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.Name = "Projectitemproperties1"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.txtLastModified.Name = "txtLastModified"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.txtName.Name = "txtName"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.txtPath.Name = "txtPath"
	pgfProperties.Projectexplorerpage4.Formproperties1.cboColor.Name = "cboColor"
	pgfProperties.Projectexplorerpage4.Formproperties1.cboTags.cboCombo.Name = "cboCombo"
	pgfProperties.Projectexplorerpage4.Formproperties1.cboTags.Name = "cboTags"
	pgfProperties.Projectexplorerpage4.Formproperties1.cboTags.oImageList.Height = 100
	pgfProperties.Projectexplorerpage4.Formproperties1.cboTags.oImageList.Left = 120
	pgfProperties.Projectexplorerpage4.Formproperties1.cboTags.oImageList.Name = "oImageList"
	pgfProperties.Projectexplorerpage4.Formproperties1.cboTags.oImageList.Top = 40
	pgfProperties.Projectexplorerpage4.Formproperties1.cboTags.oImageList.Width = 100
	pgfProperties.Projectexplorerpage4.Formproperties1.cboTags.oTree.Height = 174
	pgfProperties.Projectexplorerpage4.Formproperties1.cboTags.oTree.Left = 5
	pgfProperties.Projectexplorerpage4.Formproperties1.cboTags.oTree.Name = "oTree"
	pgfProperties.Projectexplorerpage4.Formproperties1.cboTags.oTree.Top = 29
	pgfProperties.Projectexplorerpage4.Formproperties1.cboTags.oTree.Width = 166
	pgfProperties.Projectexplorerpage4.Formproperties1.cboTags.shpTreeView.Name = "shpTreeView"
	pgfProperties.Projectexplorerpage4.Formproperties1.chkExclude.Alignment = 0
	pgfProperties.Projectexplorerpage4.Formproperties1.chkExclude.Name = "chkExclude"
	pgfProperties.Projectexplorerpage4.Formproperties1.chkMainFile.Alignment = 0
	pgfProperties.Projectexplorerpage4.Formproperties1.chkMainFile.Name = "chkMainFile"
	pgfProperties.Projectexplorerpage4.Formproperties1.cmdRevert.Name = "cmdRevert"
	pgfProperties.Projectexplorerpage4.Formproperties1.cmdSave.Name = "cmdSave"
	pgfProperties.Projectexplorerpage4.Formproperties1.edtDescription.Name = "edtDescription"
	pgfProperties.Projectexplorerpage4.Formproperties1.edtUser.Name = "edtUser"
	pgfProperties.Projectexplorerpage4.Formproperties1.lblClass.Name = "lblClass"
	pgfProperties.Projectexplorerpage4.Formproperties1.lblColor.Name = "lblColor"
	pgfProperties.Projectexplorerpage4.Formproperties1.lblDescription.Name = "lblDescription"
	pgfProperties.Projectexplorerpage4.Formproperties1.lblLastModified.Name = "lblLastModified"
	pgfProperties.Projectexplorerpage4.Formproperties1.lblLibrary.Name = "lblLibrary"
	pgfProperties.Projectexplorerpage4.Formproperties1.lblName.Name = "lblName"
	pgfProperties.Projectexplorerpage4.Formproperties1.lblPath.Name = "lblPath"
	pgfProperties.Projectexplorerpage4.Formproperties1.lblTags.Name = "lblTags"
	pgfProperties.Projectexplorerpage4.Formproperties1.lblUser.Name = "lblUser"
	pgfProperties.Projectexplorerpage4.Formproperties1.Name = "Formproperties1"
	pgfProperties.Projectexplorerpage4.Formproperties1.txtClass.Name = "txtClass"
	pgfProperties.Projectexplorerpage4.Formproperties1.txtLastModified.Name = "txtLastModified"
	pgfProperties.Projectexplorerpage4.Formproperties1.txtLibrary.Name = "txtLibrary"
	pgfProperties.Projectexplorerpage4.Formproperties1.txtName.Name = "txtName"
	pgfProperties.Projectexplorerpage4.Formproperties1.txtPath.Name = "txtPath"
	pgfProperties.Projectexplorerpage4.Name = "Projectexplorerpage4"
	pgfProperties.Top = 26

ENDDEFINE

DEFINE CLASS projectexplorerformdockable AS projectexplorerform OF "projectexplorerui.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	Dockable = 1
	DoCreate = .T.
	Name = "projectexplorerformdockable"
	ShowWindow = 0
	oEventTimer.Name = "oEventTimer"
	oPersist.Name = "oPersist"
	oProjectInfo.cmdRevert.Name = "cmdRevert"
	oProjectInfo.cmdSave.Name = "cmdSave"
	oProjectInfo.Name = "oProjectInfo"
	oProjectInfo.pgfProperties.ErasePage = .T.
	oProjectInfo.pgfProperties.Name = "pgfProperties"
	oProjectInfo.pgfProperties.projectexplorerpage1.chkDebug.Alignment = 0
	oProjectInfo.pgfProperties.projectexplorerpage1.chkDebug.Name = "chkDebug"
	oProjectInfo.pgfProperties.projectexplorerpage1.chkEncrypted.Alignment = 0
	oProjectInfo.pgfProperties.projectexplorerpage1.chkEncrypted.Name = "chkEncrypted"
	oProjectInfo.pgfProperties.projectexplorerpage1.chkIcon.Alignment = 0
	oProjectInfo.pgfProperties.projectexplorerpage1.chkIcon.Name = "chkIcon"
	oProjectInfo.pgfProperties.projectexplorerpage1.chkProjectHook.Alignment = 0
	oProjectInfo.pgfProperties.projectexplorerpage1.chkProjectHook.Name = "chkProjectHook"
	oProjectInfo.pgfProperties.projectexplorerpage1.cmdProjectHook.Name = "cmdProjectHook"
	oProjectInfo.pgfProperties.projectexplorerpage1.edtUser.Name = "edtUser"
	oProjectInfo.pgfProperties.projectexplorerpage1.imgIcon.Name = "imgIcon"
	oProjectInfo.pgfProperties.projectexplorerpage1.lblAddress.Name = "lblAddress"
	oProjectInfo.pgfProperties.projectexplorerpage1.lblAuthor.Name = "lblAuthor"
	oProjectInfo.pgfProperties.projectexplorerpage1.lblCity.Name = "lblCity"
	oProjectInfo.pgfProperties.projectexplorerpage1.lblCompany.Name = "lblCompany"
	oProjectInfo.pgfProperties.projectexplorerpage1.lblCountry.Name = "lblCountry"
	oProjectInfo.pgfProperties.projectexplorerpage1.lblHome.Name = "lblHome"
	oProjectInfo.pgfProperties.projectexplorerpage1.lblLastBuilt.Name = "lblLastBuilt"
	oProjectInfo.pgfProperties.projectexplorerpage1.lblPostalCode.Name = "lblPostalCode"
	oProjectInfo.pgfProperties.projectexplorerpage1.lblProject.Name = "lblProject"
	oProjectInfo.pgfProperties.projectexplorerpage1.lblRegion.Name = "lblRegion"
	oProjectInfo.pgfProperties.projectexplorerpage1.lblUser.Name = "lblUser"
	oProjectInfo.pgfProperties.projectexplorerpage1.Name = "projectexplorerpage1"
	oProjectInfo.pgfProperties.projectexplorerpage1.txtAddress.Name = "txtAddress"
	oProjectInfo.pgfProperties.projectexplorerpage1.txtAuthor.Name = "txtAuthor"
	oProjectInfo.pgfProperties.projectexplorerpage1.txtCity.Name = "txtCity"
	oProjectInfo.pgfProperties.projectexplorerpage1.txtCompany.Name = "txtCompany"
	oProjectInfo.pgfProperties.projectexplorerpage1.txtCountry.Name = "txtCountry"
	oProjectInfo.pgfProperties.projectexplorerpage1.txtHome.Name = "txtHome"
	oProjectInfo.pgfProperties.projectexplorerpage1.txtLastBuilt.Name = "txtLastBuilt"
	oProjectInfo.pgfProperties.projectexplorerpage1.txtPostalCode.Name = "txtPostalCode"
	oProjectInfo.pgfProperties.projectexplorerpage1.txtProject.Name = "txtProject"
	oProjectInfo.pgfProperties.projectexplorerpage1.txtProjectHook.Name = "txtProjectHook"
	oProjectInfo.pgfProperties.projectexplorerpage1.txtRegion.Name = "txtRegion"
	oProjectInfo.pgfProperties.Projectexplorerpage2.chkAutoIncrement.Alignment = 0
	oProjectInfo.pgfProperties.Projectexplorerpage2.chkAutoIncrement.Name = "chkAutoIncrement"
	oProjectInfo.pgfProperties.Projectexplorerpage2.ctrVersionInfo.lblLabel.Name = "lblLabel"
	oProjectInfo.pgfProperties.Projectexplorerpage2.ctrVersionInfo.Name = "ctrVersionInfo"
	oProjectInfo.pgfProperties.Projectexplorerpage2.ctrVersionInfo.shpBox.Name = "shpBox"
	oProjectInfo.pgfProperties.Projectexplorerpage2.ctrVersionNumber.lblLabel.Name = "lblLabel"
	oProjectInfo.pgfProperties.Projectexplorerpage2.ctrVersionNumber.Name = "ctrVersionNumber"
	oProjectInfo.pgfProperties.Projectexplorerpage2.ctrVersionNumber.shpBox.Name = "shpBox"
	oProjectInfo.pgfProperties.Projectexplorerpage2.lblBuildVersion.Name = "lblBuildVersion"
	oProjectInfo.pgfProperties.Projectexplorerpage2.lblMajorVersion.Name = "lblMajorVersion"
	oProjectInfo.pgfProperties.Projectexplorerpage2.lblMinorVersion.Name = "lblMinorVersion"
	oProjectInfo.pgfProperties.Projectexplorerpage2.lblVersionComments.Name = "lblVersionComments"
	oProjectInfo.pgfProperties.Projectexplorerpage2.lblVersionCompany.Name = "lblVersionCompany"
	oProjectInfo.pgfProperties.Projectexplorerpage2.lblVersionCopyright.Name = "lblVersionCopyright"
	oProjectInfo.pgfProperties.Projectexplorerpage2.lblVersionDescription.Name = "lblVersionDescription"
	oProjectInfo.pgfProperties.Projectexplorerpage2.lblVersionLanguage.Name = "lblVersionLanguage"
	oProjectInfo.pgfProperties.Projectexplorerpage2.lblVersionProduct.Name = "lblVersionProduct"
	oProjectInfo.pgfProperties.Projectexplorerpage2.lblVersionTrademarks.Name = "lblVersionTrademarks"
	oProjectInfo.pgfProperties.Projectexplorerpage2.Name = "Projectexplorerpage2"
	oProjectInfo.pgfProperties.Projectexplorerpage2.txtBuildVersion.Name = "txtBuildVersion"
	oProjectInfo.pgfProperties.Projectexplorerpage2.txtMajorVersion.Name = "txtMajorVersion"
	oProjectInfo.pgfProperties.Projectexplorerpage2.txtMinorVersion.Name = "txtMinorVersion"
	oProjectInfo.pgfProperties.Projectexplorerpage2.txtVersionComments.Name = "txtVersionComments"
	oProjectInfo.pgfProperties.Projectexplorerpage2.txtVersionCompany.Name = "txtVersionCompany"
	oProjectInfo.pgfProperties.Projectexplorerpage2.txtVersionCopyright.Name = "txtVersionCopyright"
	oProjectInfo.pgfProperties.Projectexplorerpage2.txtVersionDescription.Name = "txtVersionDescription"
	oProjectInfo.pgfProperties.Projectexplorerpage2.txtVersionLanguage.Name = "txtVersionLanguage"
	oProjectInfo.pgfProperties.Projectexplorerpage2.txtVersionProduct.Name = "txtVersionProduct"
	oProjectInfo.pgfProperties.Projectexplorerpage2.txtVersionTrademarks.Name = "txtVersionTrademarks"
	oProjectInfo.pgfProperties.Projectexplorerpage3.cboInstancing.Name = "cboInstancing"
	oProjectInfo.pgfProperties.Projectexplorerpage3.cntClasses.lblLabel.Name = "lblLabel"
	oProjectInfo.pgfProperties.Projectexplorerpage3.cntClasses.Name = "cntClasses"
	oProjectInfo.pgfProperties.Projectexplorerpage3.cntClasses.shpBox.Name = "shpBox"
	oProjectInfo.pgfProperties.Projectexplorerpage3.cntHelp.cmdGetFile.Name = "cmdGetFile"
	oProjectInfo.pgfProperties.Projectexplorerpage3.cntHelp.lblFile.Name = "lblFile"
	oProjectInfo.pgfProperties.Projectexplorerpage3.cntHelp.Name = "cntHelp"
	oProjectInfo.pgfProperties.Projectexplorerpage3.cntHelp.txtFile.Name = "txtFile"
	oProjectInfo.pgfProperties.Projectexplorerpage3.lblDescription.Name = "lblDescription"
	oProjectInfo.pgfProperties.Projectexplorerpage3.lblHelpID.Name = "lblHelpID"
	oProjectInfo.pgfProperties.Projectexplorerpage3.lblInstancing.Name = "lblInstancing"
	oProjectInfo.pgfProperties.Projectexplorerpage3.lblLibrary.Name = "lblLibrary"
	oProjectInfo.pgfProperties.Projectexplorerpage3.lblName.Name = "lblName"
	oProjectInfo.pgfProperties.Projectexplorerpage3.lblProjectName.Name = "lblProjectName"
	oProjectInfo.pgfProperties.Projectexplorerpage3.lblTypelibDesc.Name = "lblTypelibDesc"
	oProjectInfo.pgfProperties.Projectexplorerpage3.lstClasses.Name = "lstClasses"
	oProjectInfo.pgfProperties.Projectexplorerpage3.Name = "Projectexplorerpage3"
	oProjectInfo.pgfProperties.Projectexplorerpage3.txtDescription.Name = "txtDescription"
	oProjectInfo.pgfProperties.Projectexplorerpage3.txtHelpID.Name = "txtHelpID"
	oProjectInfo.pgfProperties.Projectexplorerpage3.txtLibrary.Name = "txtLibrary"
	oProjectInfo.pgfProperties.Projectexplorerpage3.txtName.Name = "txtName"
	oProjectInfo.pgfProperties.Projectexplorerpage3.txtProjectName.Name = "txtProjectName"
	oProjectInfo.pgfProperties.Projectexplorerpage3.txtTypelibDesc.Name = "txtTypelibDesc"
	oProjectToolbar.cboTagFilter.Name = "cboTagFilter"
	oProjectToolbar.cmdAdd.Name = "cmdAdd"
	oProjectToolbar.cmdBack.cmdMain.Name = "cmdMain"
	oProjectToolbar.cmdBack.cmdMenu.Name = "cmdMenu"
	oProjectToolbar.cmdBack.Name = "cmdBack"
	oProjectToolbar.cmdBuild.cmdMain.Name = "cmdMain"
	oProjectToolbar.cmdBuild.cmdMenu.Name = "cmdMenu"
	oProjectToolbar.cmdBuild.Name = "cmdBuild"
	oProjectToolbar.cmdEdit.Name = "cmdEdit"
	oProjectToolbar.cmdExpand.Name = "cmdExpand"
	oProjectToolbar.cmdMenu.Name = "cmdMenu"
	oProjectToolbar.cmdNew.Name = "cmdNew"
	oProjectToolbar.cmdReload.Name = "cmdReload"
	oProjectToolbar.cmdRemove.Name = "cmdRemove"
	oProjectToolbar.cmdRun.Name = "cmdRun"
	oProjectToolbar.Name = "oProjectToolbar"
	oSplitter.Name = "oSplitter"
	oTreeViewContainer.Name = "oTreeViewContainer"
	oTreeViewContainer.oImageList.Left = 160
	oTreeViewContainer.oImageList.Name = "oImageList"
	oTreeViewContainer.oImageList.Top = 0
	oTreeViewContainer.oStack.Name = "oStack"
	oTreeViewContainer.oTree.Height = 504
	oTreeViewContainer.oTree.Left = 0
	oTreeViewContainer.oTree.Name = "oTree"
	oTreeViewContainer.oTree.Width = 210
	oTreeViewContainer.tmrReload.Name = "tmrReload"
	oTreeViewContainer.tmrSync.Name = "tmrSync"
	pgfProperties.ErasePage = .T.
	pgfProperties.Height = 505
	pgfProperties.Name = "pgfProperties"
	pgfProperties.projectexplorerpage1.Classproperties1.cboColor.Name = "cboColor"
	pgfProperties.projectexplorerpage1.Classproperties1.cboTags.cboCombo.Name = "cboCombo"
	pgfProperties.projectexplorerpage1.Classproperties1.cboTags.Name = "cboTags"
	pgfProperties.projectexplorerpage1.Classproperties1.cboTags.oImageList.Height = 100
	pgfProperties.projectexplorerpage1.Classproperties1.cboTags.oImageList.Left = 120
	pgfProperties.projectexplorerpage1.Classproperties1.cboTags.oImageList.Name = "oImageList"
	pgfProperties.projectexplorerpage1.Classproperties1.cboTags.oImageList.Top = 40
	pgfProperties.projectexplorerpage1.Classproperties1.cboTags.oImageList.Width = 100
	pgfProperties.projectexplorerpage1.Classproperties1.cboTags.oTree.Height = 174
	pgfProperties.projectexplorerpage1.Classproperties1.cboTags.oTree.Left = 5
	pgfProperties.projectexplorerpage1.Classproperties1.cboTags.oTree.Name = "oTree"
	pgfProperties.projectexplorerpage1.Classproperties1.cboTags.oTree.Top = 29
	pgfProperties.projectexplorerpage1.Classproperties1.cboTags.oTree.Width = 166
	pgfProperties.projectexplorerpage1.Classproperties1.cboTags.shpTreeView.Name = "shpTreeView"
	pgfProperties.projectexplorerpage1.Classproperties1.chkExclude.Alignment = 0
	pgfProperties.projectexplorerpage1.Classproperties1.chkExclude.Name = "chkExclude"
	pgfProperties.projectexplorerpage1.Classproperties1.chkMainFile.Alignment = 0
	pgfProperties.projectexplorerpage1.Classproperties1.chkMainFile.Name = "chkMainFile"
	pgfProperties.projectexplorerpage1.Classproperties1.chkOLEPublic.Alignment = 0
	pgfProperties.projectexplorerpage1.Classproperties1.chkOLEPublic.Name = "chkOLEPublic"
	pgfProperties.projectexplorerpage1.Classproperties1.cmdRevert.Name = "cmdRevert"
	pgfProperties.projectexplorerpage1.Classproperties1.cmdSave.Name = "cmdSave"
	pgfProperties.projectexplorerpage1.Classproperties1.ctrParent.lblLabel.Name = "lblLabel"
	pgfProperties.projectexplorerpage1.Classproperties1.ctrParent.Name = "ctrParent"
	pgfProperties.projectexplorerpage1.Classproperties1.ctrParent.shpBox.Name = "shpBox"
	pgfProperties.projectexplorerpage1.Classproperties1.edtDescription.Name = "edtDescription"
	pgfProperties.projectexplorerpage1.Classproperties1.edtUser.Name = "edtUser"
	pgfProperties.projectexplorerpage1.Classproperties1.imgIcon.Name = "imgIcon"
	pgfProperties.projectexplorerpage1.Classproperties1.imgToolbarIcon.Name = "imgToolbarIcon"
	pgfProperties.projectexplorerpage1.Classproperties1.lblBaseClass.Name = "lblBaseClass"
	pgfProperties.projectexplorerpage1.Classproperties1.lblColor.Name = "lblColor"
	pgfProperties.projectexplorerpage1.Classproperties1.lblDescription.Name = "lblDescription"
	pgfProperties.projectexplorerpage1.Classproperties1.lblIcon.Name = "lblIcon"
	pgfProperties.projectexplorerpage1.Classproperties1.lblIncludeFile.Name = "lblIncludeFile"
	pgfProperties.projectexplorerpage1.Classproperties1.lblLastModified.Name = "lblLastModified"
	pgfProperties.projectexplorerpage1.Classproperties1.lblName.Name = "lblName"
	pgfProperties.projectexplorerpage1.Classproperties1.lblParentClass.Name = "lblParentClass"
	pgfProperties.projectexplorerpage1.Classproperties1.lblParentLibrary.Name = "lblParentLibrary"
	pgfProperties.projectexplorerpage1.Classproperties1.lblPath.Name = "lblPath"
	pgfProperties.projectexplorerpage1.Classproperties1.lblTags.Name = "lblTags"
	pgfProperties.projectexplorerpage1.Classproperties1.lblToolbarIcon.Name = "lblToolbarIcon"
	pgfProperties.projectexplorerpage1.Classproperties1.lblUser.Name = "lblUser"
	pgfProperties.projectexplorerpage1.Classproperties1.Name = "Classproperties1"
	pgfProperties.projectexplorerpage1.Classproperties1.txtBaseClass.Name = "txtBaseClass"
	pgfProperties.projectexplorerpage1.Classproperties1.txtIncludeFile.Name = "txtIncludeFile"
	pgfProperties.projectexplorerpage1.Classproperties1.txtLastModified.Name = "txtLastModified"
	pgfProperties.projectexplorerpage1.Classproperties1.txtName.Name = "txtName"
	pgfProperties.projectexplorerpage1.Classproperties1.txtParentClass.Name = "txtParentClass"
	pgfProperties.projectexplorerpage1.Classproperties1.txtParentLibrary.Name = "txtParentLibrary"
	pgfProperties.projectexplorerpage1.Classproperties1.txtPath.Name = "txtPath"
	pgfProperties.projectexplorerpage1.Name = "projectexplorerpage1"
	pgfProperties.Projectexplorerpage2.Name = "Projectexplorerpage2"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.cboColor.Name = "cboColor"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.cboTags.cboCombo.Name = "cboCombo"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.cboTags.Name = "cboTags"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.cboTags.oImageList.Height = 100
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.cboTags.oImageList.Left = 120
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.cboTags.oImageList.Name = "oImageList"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.cboTags.oImageList.Top = 40
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.cboTags.oImageList.Width = 100
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.cboTags.oTree.Height = 174
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.cboTags.oTree.Left = 5
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.cboTags.oTree.Name = "oTree"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.cboTags.oTree.Top = 29
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.cboTags.oTree.Width = 166
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.cboTags.shpTreeView.Name = "shpTreeView"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.chkExclude.Alignment = 0
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.chkExclude.Name = "chkExclude"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.chkMainFile.Alignment = 0
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.chkMainFile.Name = "chkMainFile"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.cmdRevert.Name = "cmdRevert"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.cmdSave.Name = "cmdSave"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.edtDescription.Name = "edtDescription"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.edtUser.Name = "edtUser"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.lblColor.Name = "lblColor"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.lblDescription.Name = "lblDescription"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.lblLastModified.Name = "lblLastModified"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.lblName.Name = "lblName"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.lblPath.Name = "lblPath"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.lblTags.Name = "lblTags"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.lblUser.Name = "lblUser"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.Name = "Projectitemproperties1"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.txtLastModified.Name = "txtLastModified"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.txtName.Name = "txtName"
	pgfProperties.Projectexplorerpage2.Projectitemproperties1.txtPath.Name = "txtPath"
	pgfProperties.Projectexplorerpage3.Name = "Projectexplorerpage3"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.cboColor.Name = "cboColor"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.cboTags.cboCombo.Name = "cboCombo"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.cboTags.Name = "cboTags"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.cboTags.oImageList.Height = 100
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.cboTags.oImageList.Left = 120
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.cboTags.oImageList.Name = "oImageList"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.cboTags.oImageList.Top = 40
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.cboTags.oImageList.Width = 100
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.cboTags.oTree.Height = 174
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.cboTags.oTree.Left = 5
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.cboTags.oTree.Name = "oTree"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.cboTags.oTree.Top = 29
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.cboTags.oTree.Width = 166
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.cboTags.shpTreeView.Name = "shpTreeView"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.chkExclude.Alignment = 0
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.chkExclude.Name = "chkExclude"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.chkMainFile.Alignment = 0
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.chkMainFile.Name = "chkMainFile"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.cmdRevert.Name = "cmdRevert"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.cmdSave.Name = "cmdSave"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.edtDescription.Name = "edtDescription"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.edtUser.Name = "edtUser"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.lblColor.Name = "lblColor"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.lblDescription.Name = "lblDescription"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.lblLastModified.Name = "lblLastModified"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.lblName.Name = "lblName"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.lblPath.Name = "lblPath"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.lblTags.Name = "lblTags"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.lblUser.Name = "lblUser"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.Name = "Projectitemproperties1"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.txtLastModified.Name = "txtLastModified"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.txtName.Name = "txtName"
	pgfProperties.Projectexplorerpage3.Projectitemproperties1.txtPath.Name = "txtPath"
	pgfProperties.Projectexplorerpage4.Formproperties1.cboColor.Name = "cboColor"
	pgfProperties.Projectexplorerpage4.Formproperties1.cboTags.cboCombo.Name = "cboCombo"
	pgfProperties.Projectexplorerpage4.Formproperties1.cboTags.Name = "cboTags"
	pgfProperties.Projectexplorerpage4.Formproperties1.cboTags.oImageList.Height = 100
	pgfProperties.Projectexplorerpage4.Formproperties1.cboTags.oImageList.Left = 120
	pgfProperties.Projectexplorerpage4.Formproperties1.cboTags.oImageList.Name = "oImageList"
	pgfProperties.Projectexplorerpage4.Formproperties1.cboTags.oImageList.Top = 40
	pgfProperties.Projectexplorerpage4.Formproperties1.cboTags.oImageList.Width = 100
	pgfProperties.Projectexplorerpage4.Formproperties1.cboTags.oTree.Height = 174
	pgfProperties.Projectexplorerpage4.Formproperties1.cboTags.oTree.Left = 5
	pgfProperties.Projectexplorerpage4.Formproperties1.cboTags.oTree.Name = "oTree"
	pgfProperties.Projectexplorerpage4.Formproperties1.cboTags.oTree.Top = 29
	pgfProperties.Projectexplorerpage4.Formproperties1.cboTags.oTree.Width = 166
	pgfProperties.Projectexplorerpage4.Formproperties1.cboTags.shpTreeView.Name = "shpTreeView"
	pgfProperties.Projectexplorerpage4.Formproperties1.chkExclude.Alignment = 0
	pgfProperties.Projectexplorerpage4.Formproperties1.chkExclude.Name = "chkExclude"
	pgfProperties.Projectexplorerpage4.Formproperties1.chkMainFile.Alignment = 0
	pgfProperties.Projectexplorerpage4.Formproperties1.chkMainFile.Name = "chkMainFile"
	pgfProperties.Projectexplorerpage4.Formproperties1.cmdRevert.Name = "cmdRevert"
	pgfProperties.Projectexplorerpage4.Formproperties1.cmdSave.Name = "cmdSave"
	pgfProperties.Projectexplorerpage4.Formproperties1.edtDescription.Name = "edtDescription"
	pgfProperties.Projectexplorerpage4.Formproperties1.edtUser.Name = "edtUser"
	pgfProperties.Projectexplorerpage4.Formproperties1.lblClass.Name = "lblClass"
	pgfProperties.Projectexplorerpage4.Formproperties1.lblColor.Name = "lblColor"
	pgfProperties.Projectexplorerpage4.Formproperties1.lblDescription.Name = "lblDescription"
	pgfProperties.Projectexplorerpage4.Formproperties1.lblIncludeFile.Name = "lblIncludeFile"
	pgfProperties.Projectexplorerpage4.Formproperties1.lblLastModified.Name = "lblLastModified"
	pgfProperties.Projectexplorerpage4.Formproperties1.lblLibrary.Name = "lblLibrary"
	pgfProperties.Projectexplorerpage4.Formproperties1.lblName.Name = "lblName"
	pgfProperties.Projectexplorerpage4.Formproperties1.lblPath.Name = "lblPath"
	pgfProperties.Projectexplorerpage4.Formproperties1.lblTags.Name = "lblTags"
	pgfProperties.Projectexplorerpage4.Formproperties1.lblUser.Name = "lblUser"
	pgfProperties.Projectexplorerpage4.Formproperties1.Name = "Formproperties1"
	pgfProperties.Projectexplorerpage4.Formproperties1.txtClass.Name = "txtClass"
	pgfProperties.Projectexplorerpage4.Formproperties1.txtIncludeFile.Name = "txtIncludeFile"
	pgfProperties.Projectexplorerpage4.Formproperties1.txtLastModified.Name = "txtLastModified"
	pgfProperties.Projectexplorerpage4.Formproperties1.txtLibrary.Name = "txtLibrary"
	pgfProperties.Projectexplorerpage4.Formproperties1.txtName.Name = "txtName"
	pgfProperties.Projectexplorerpage4.Formproperties1.txtPath.Name = "txtPath"
	pgfProperties.Projectexplorerpage4.Name = "Projectexplorerpage4"
	pgfProperties.Top = 26

ENDDEFINE

DEFINE CLASS projectexplorernewclass AS projectexplorermodaldialog OF "projectexplorerctrls.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblClassName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtClassName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboBasedOn" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntStoreIn" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblBasedOn" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblClassLib" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdGetLibrary" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboClassLib" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oRegistry" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: cclasslibrary		&& The library to store the class in
		*p: cclassname		&& The class name
		*p: cparentclass		&& The parent class
		*p: cparentclasslibrary		&& The library for the parent class
		*p: cproject		&& The path for the project
		*p: cregistrykey		&& The registry key for MRU class libraries
		*p: ldisplayfullpath		&& .T. to display the full path for VCXs
		*p: lparentclasslibrarychanged		&& .T. when cParentClassLibrary changes
	*</DefinedPropArrayMethod>

	Caption = "New Class"
	cclasslibrary = 		&& The library to store the class in
	cclassname = 		&& The class name
	cparentclass = 		&& The parent class
	cparentclasslibrary = 		&& The library for the parent class
	cproject = 		&& The path for the project
	cregistrykey = 		&& The registry key for MRU class libraries
	DoCreate = .T.
	Height = 133
	ldisplayfullpath = .F.		&& .T. to display the full path for VCXs
	lparentclasslibrarychanged = .F.		&& .T. when cParentClassLibrary changes
	Name = "projectexplorernewclass"
	Width = 465
	_memberdata = <VFPData>
		<memberdata name="cclassname" display="cClassName"/>
		<memberdata name="cparentclass" display="cParentClass"/>
		<memberdata name="cclasslibrary" display="cClassLibrary"/>
		<memberdata name="cparentclasslibrary" display="cParentClassLibrary"/>
		<memberdata name="lparentclasslibrarychanged" display="lParentClassLibraryChanged"/>
		<memberdata name="cregistrykey" display="cRegistryKey"/>
		<memberdata name="ldisplayfullpath" display="lDisplayFullPath"/>
		<memberdata name="cproject" display="cProject"/>
		</VFPData>

	ADD OBJECT 'cboBasedOn' AS projectexplorercombobox WITH ;
		ControlSource = "Thisform.cParentClass", ;
		Height = 24, ;
		Left = 85, ;
		lrequeryoninit = .F., ;
		lupdatecontrolsource = .T., ;
		Name = "cboBasedOn", ;
		TabIndex = 4, ;
		Top = 40, ;
		Width = 269
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboClassLib' AS projectexplorercombobox WITH ;
		BoundColumn = 2, ;
		ControlSource = "Thisform.cParentClassLibrary", ;
		Height = 24, ;
		Left = 85, ;
		lrequeryoninit = .F., ;
		lupdatecontrolsource = .T., ;
		Name = "cboClassLib", ;
		Top = 70, ;
		Width = 246
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="combobox" />

	ADD OBJECT 'cmdCancel' AS projectexplorercancelbutton WITH ;
		Left = 375, ;
		Name = "cmdCancel", ;
		TabIndex = 10, ;
		Top = 40
		*< END OBJECT: ClassLib="projectexplorerbutton.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdGetLibrary' AS projectexplorertoolbarbutton WITH ;
		Caption = "...", ;
		Height = 23, ;
		Left = 331, ;
		Name = "cmdGetLibrary", ;
		SpecialEffect = 0, ;
		TabIndex = 5, ;
		Top = 71, ;
		Width = 23
		*< END OBJECT: ClassLib="projectexplorerbutton.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS projectexplorerokbutton WITH ;
		Left = 375, ;
		Name = "cmdOK", ;
		TabIndex = 9, ;
		Top = 10
		*< END OBJECT: ClassLib="projectexplorerbutton.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cntStoreIn' AS projectexplorerfile WITH ;
		ccontrolsource = Thisform.cClassLibrary, ;
		cextensions = 'Visual Class Library (*.vcx), *.vcx', ;
		Left = 10, ;
		Name = "cntStoreIn", ;
		TabIndex = 8, ;
		Top = 100, ;
		Width = 344, ;
		CMDGETFILE.Left = 321, ;
		CMDGETFILE.Name = "CMDGETFILE", ;
		LBLFILE.Caption = "\<Store in", ;
		LBLFILE.Name = "LBLFILE", ;
		TXTFILE.Height = 22, ;
		TXTFILE.Left = 75, ;
		TXTFILE.Name = "TXTFILE", ;
		TXTFILE.Top = 0, ;
		TXTFILE.Width = 246
		*< END OBJECT: ClassLib="projectexplorerfilectrls.vcx" BaseClass="container" />

	ADD OBJECT 'lblBasedOn' AS projectexplorerlabel WITH ;
		Caption = "\<Based on", ;
		Left = 10, ;
		Name = "lblBasedOn", ;
		TabIndex = 3, ;
		Top = 44
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'lblClassLib' AS projectexplorerlabel WITH ;
		Caption = "\<From", ;
		Left = 10, ;
		Name = "lblClassLib", ;
		TabIndex = 6, ;
		Top = 74
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'lblClassName' AS projectexplorerlabel WITH ;
		Caption = "Class \<name", ;
		Left = 10, ;
		Name = "lblClassName", ;
		TabIndex = 1, ;
		Top = 13
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'oRegistry' AS projectexplorerregistry WITH ;
		Left = 441, ;
		Name = "oRegistry", ;
		Top = 103
		*< END OBJECT: ClassLib="projectexplorerregistry.vcx" BaseClass="custom" />

	ADD OBJECT 'txtClassName' AS projectexplorervfpnametextbox WITH ;
		ControlSource = "Thisform.cClassName", ;
		Height = 22, ;
		Left = 85, ;
		lupdatecontrolsource = .T., ;
		Name = "txtClassName", ;
		TabIndex = 2, ;
		Top = 10, ;
		Width = 269
		*< END OBJECT: ClassLib="projectexplorerui.vcx" BaseClass="textbox" />
	
	PROCEDURE Destroy
		* Save the VCXs.
		
		local lcVCX, ;
			lnVCX, ;
			lnI, ;
			lcCurrVCX
		if not empty(This.cboClassLib.aItems[1])
			lcVCX = This.cParentClassLibrary
			lnVCX = 0
			if not empty(lcVCX)
				This.oRegistry.SetKey(This.cRegistryKey, 'VCX1', lcVCX)
				lnVCX = 1
			endif not empty(lcVCX)
			for lnI = 1 to alen(This.cboClassLib.aItems, 1)
				lcCurrVCX = This.cboClassLib.aItems[lnI, 2]
				if not empty(lcCurrVCX) and not lcCurrVCX == lcVCX and lnVCX <= 10
					lnVCX = lnVCX + 1
					This.oRegistry.SetKey(This.cRegistryKey, ;
						'VCX' + transform(lnVCX), lcCurrVCX)
				endif not empty(lcCurrVCX) ...
			next lnI
		endif not empty(This.cboClassLib.aItems[1])
		
	ENDPROC

	PROCEDURE Init
		lparameters tcClass, ;
			tcClassLibrary, ;
			tcRegistryKey, ;
			tlDisplayFullPath, ;
			tcProject
		local laEntries[1], ;
			lnEntries, ;
			lnVCXs, ;
			lnI, ;
			lcVCX
		
		* Save the parameters.
		
		This.cClassLibrary    = lower(evl(tcClassLibrary, ''))
		This.cRegistryKey     = tcRegistryKey
		This.lDisplayFullPath = tlDisplayFullPath
		This.cProject         = tcProject
		
		* Default the parent class and library to the selected one.
		
		This.cParentClass        = evl(tcClass, '')
		This.cParentClassLibrary = This.cClassLibrary
		
		* Fill the parent class library combo with MRU VCXs.
		
		lnEntries = This.oRegistry.EnumerateKeyValues(tcRegistryKey, @laEntries)
		lnVCXs    = 0
		for lnI = 1 to lnEntries
			if laEntries[lnI, 1] = 'VCX' and lnVCXs <= 10
				lnVCXs = lnVCXs + 1
				lcVCX  = lower(laEntries[lnI, 2])
				dimension This.cboClassLib.aItems[lnVCXs, 2]
				This.cboClassLib.aItems[lnVCXs, 2] = lcVCX
				This.cboClassLib.aItems[lnVCXs, 1] = iif(tlDisplayFullPath, ;
					lcVCX, GetRelativePath(lcVCX, tcProject))
			endif laEntries[lnI, 1] = 'VCX' ...
		next lnI
		if lnVCXs = 0 or ascan(This.cboClassLib.aItems, This.cParentClassLibrary, -1, ;
			-1, 2, 7) = 0
			lnVCXs = lnVCXs + 1
			lcVCX  = This.cParentClassLibrary
			dimension This.cboClassLib.aItems[lnVCXs, 2]
			This.cboClassLib.aItems[lnVCXs, 2] = lcVCX
			This.cboClassLib.aItems[lnVCXs, 1] = iif(tlDisplayFullPath, ;
					lcVCX, GetRelativePath(lcVCX, tcProject))
		endif lnVCXs = 0 ...
		lnVCXs = lnVCXs + 1
		dimension This.cboClassLib.aItems[lnVCXs, 2]
		This.cboClassLib.aItems[lnVCXs, 1] = ''
		This.cboClassLib.aItems[lnVCXs, 2] = ''
		This.cboClassLib.Requery()
		
	ENDPROC

	PROCEDURE cboBasedOn.InteractiveChange
		dodefault()
		Thisform.RefreshForm()
		
	ENDPROC

	PROCEDURE cboBasedOn.Refresh
		* If we don't have a parent class library, create an array of base classes.
		* Some classes can't be created visually so we'll skip those.
		
		local llReset, ;
			lnClasses, ;
			laClasses[1], ;
			lnItems, ;
			lnI, ;
			lcClass
		llReset = Thisform.lParentClassLibraryChanged or empty(This.aItems[1])
		do case
			case not llReset
			case empty(Thisform.cParentClassLibrary)
				dimension This.aItems[1]
				lnClasses = alanguage(laClasses, 3)
				lnItems   = 0
				for lnI = 1 to lnClasses
					lcClass = laClasses[lnI]
					if not inlist(lcClass, 'ActiveDoc', 'Column', 'Empty', 'Exception', ;
						'Header', 'Session')
						lnItems = lnItems + 1
						dimension This.aItems[lnItems]
						This.aItems[lnItems] = lower(lcClass)
					endif not inlist(lcClass ...
				next lnI
			otherwise
				dimension This.aItems[1]
				lnClasses = avcxclasses(laClasses, Thisform.cParentClassLibrary)
				if lnClasses > 0
					acopy(laClasses, This.aItems)
					asort(This.aItems)
				endif lnClasses > 0
		endcase
		if llReset
			if empty(This.aItems[1])
				This.aItems[1] = ''
			endif empty(This.aItems[1])
			This.Requery()
			This.ListIndex = max(ascan(This.aItems, Thisform.cParentClass, -1, -1, 1, ;
				15), 1)
		endif llReset
		Thisform.lParentClassLibraryChanged = .F.
		
	ENDPROC

	PROCEDURE cboClassLib.anychange
		Thisform.lParentClassLibraryChanged = .T.
		Thisform.RefreshForm()
		
	ENDPROC

	PROCEDURE cmdGetLibrary.Click
		local laClass[1], ;
			llOK, ;
			lnVCXs, ;
			lcVCX
		if empty(Thisform.cParentClassLibrary)
			llOK = agetclass(laClass)
		else
			llOK = agetclass(laClass, Thisform.cParentClassLibrary, Thisform.cParentClass)
		endif empty(Thisform.cParentClassLibrary)
		if llOK and file(laClass[1])
			Thisform.cParentClassLibrary        = laClass[1]
			Thisform.cParentClass               = laClass[2]
			Thisform.lParentClassLibraryChanged = .T.
		
		* Add it to the combobox if it isn't already there.
		
			if ascan(Thisform.cboClassLib.aItems, Thisform.cParentClassLibrary, -1, ;
				-1, 2, 7) = 0
				if not empty(Thisform.cboClassLib.aItems[1])
					lnVCXs = alen(Thisform.cboClassLib.aItems, 1) + 1
					dimension Thisform.cboClassLib.aItems[lnVCXs, 2]
					ains(Thisform.cboClassLib.aItems, 1)
				endif not empty(This.cboClassLib.aItems[1])
				lcVCX = Thisform.cParentClassLibrary
				Thisform.cboClassLib.aItems[1, 2] = lcVCX
				Thisform.cboClassLib.aItems[1, 1] = iif(Thisform.lDisplayFullPath, ;
					lcVCX, GetRelativePath(lcVCX, Thisform.cProject))
				Thisform.cboClassLib.Requery()
			endif ascan(Thisform.cboClassLib.aItems ...
			Thisform.RefreshForm()
		endif llOK ...
		
	ENDPROC

	PROCEDURE cmdOK.Refresh
		This.Enabled = not empty(Thisform.cClassName) and ;
			not empty(Thisform.cParentClass) and not empty(Thisform.cClassLibrary)
		
	ENDPROC

	PROCEDURE cntStoreIn.cfilename_access
		return Thisform.cClassLibrary
		
	ENDPROC

	PROCEDURE cntStoreIn.cfilename_assign
		lparameters tcFileName
		local lcFileName
		with This
			lcFileName = alltrim(tcFileName)
		
		* Update the Value of the textbox if we're not being called from it.
		
			if not 'TXTFILE.ANYCHANGE' $ program(program(-1) - 1) and ;
				not 'TXTFILE.ANYCHANGE' $ program(program(-1) - 2)
				.txtFile.Value = iif(Thisform.lDisplayFullPath, lcFileName, ;
					GetRelativePath(lcFileName, Thisform.cProject)) 
			endif not 'TXTFILE.ANYCHANGE' $ program(program(-1) - 1) ...
		
		* Write the value to our ControlSource.
		
			if not lcFileName == alltrim(Thisform.cClassLibrary)
				Thisform.cClassLibrary = lcFileName
				raiseevent(This, 'FileChanged')
			endif not lcFileName == alltrim(Thisform.cClassLibrary)
		
		* Update the TooltipText.
		
			try
				.txtFile.TooltipText = displaypath(lcFileName, 127)
			catch
			endtry
		endwith
		
	ENDPROC

	PROCEDURE cntStoreIn.filechanged
		Thisform.cmdOK.Refresh()
		
	ENDPROC

	PROCEDURE txtClassName.anychange
		Thisform.cmdOK.Refresh()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS projectexploreroptions AS projectexplorermodaldialog OF "projectexplorerctrls.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="ctrOtherOptions" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ctrVCOptions" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ctrWindowType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="opgWindowType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntDblClickAction" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="opgDblClickAction" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkDisplayIcons" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblVersionControl" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkAddFiles" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkRemoveFiles" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboVersionControl" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkDisplayFullPath" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkAllowAnyFileType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkAddinDebugMode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkShowSplitter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: csettingsfile		&& The name and path of the Project Explorer settings file
		*p: cversioncontrolprovider		&& The default version control provider
		*p: laddfiles		&& .T. to add files to version control upon add
		*p: laddindebugmode		&& .T. to display a message when addins are executed
		*p: lallowanyfiletype		&& .T. for the Add and New buttons to allow any file type or .F. for only a file of the selected type
		*p: ldisplayfullpath		&& .T. to display full path for files
		*p: ldisplayicons		&& .T. to display user-defined class icons
		*p: lremovefiles		&& .T. to remove files from version control on remove
		*p: lshowsplitter		&& .T. for a visible splitter
		*p: ndblclickaction		&& What to do when an item is double-clicked
		*p: nwindowtype		&& The window type: 1 = desktop, 2 = dockable, 3 = neither
	*</DefinedPropArrayMethod>

	Caption = "Options"
	csettingsfile = 		&& The name and path of the Project Explorer settings file
	cversioncontrolprovider = 		&& The default version control provider
	DoCreate = .T.
	Height = 385
	laddfiles = .F.		&& .T. to add files to version control upon add
	laddindebugmode = .F.		&& .T. to display a message when addins are executed
	lallowanyfiletype = .F.		&& .T. for the Add and New buttons to allow any file type or .F. for only a file of the selected type
	ldisplayfullpath = .F.		&& .T. to display full path for files
	ldisplayicons = .F.		&& .T. to display user-defined class icons
	lremovefiles = .F.		&& .T. to remove files from version control on remove
	lshowsplitter = .F.		&& .T. for a visible splitter
	Name = "projectexploreroptions"
	ndblclickaction = 0		&& What to do when an item is double-clicked
	nwindowtype = 0		&& The window type: 1 = desktop, 2 = dockable, 3 = neither
	Width = 320
	_memberdata = <VFPData>
		<memberdata name="csettingsfile" display="cSettingsFile"/>
		<memberdata name="ndblclickaction" display="nDblClickAction"/>
		<memberdata name="cversioncontrolprovider" display="cVersionControlProvider"/>
		<memberdata name="laddfiles" display="lAddFiles"/>
		<memberdata name="lremovefiles" display="lRemoveFiles"/>
		<memberdata name="ldisplayicons" display="lDisplayIcons"/>
		<memberdata name="ldisplayfullpath" display="lDisplayFullPath"/>
		<memberdata name="lshowsplitter" display="lShowSplitter"/>
		<memberdata name="laddindebugmode" display="lAddinDebugMode"/>
		<memberdata name="lallowanyfiletype" display="lAllowAnyFileType"/>
		<memberdata name="nwindowtype" display="nWindowType"/>
		</VFPData>

	ADD OBJECT 'cboVersionControl' AS projectexplorercombobox WITH ;
		ControlSource = "Thisform.cVersionControlProvider", ;
		Height = 24, ;
		lbindtoformanychange = .T., ;
		Left = 115, ;
		lrequeryoninit = .F., ;
		Name = "cboVersionControl", ;
		TabIndex = 5, ;
		Top = 90, ;
		Width = 156, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="combobox" />

	ADD OBJECT 'chkAddFiles' AS projectexplorercheckbox WITH ;
		Alignment = 0, ;
		Caption = "A\<dd files to version control upon add", ;
		ControlSource = "Thisform.lAddFiles", ;
		Left = 20, ;
		Name = "chkAddFiles", ;
		TabIndex = 6, ;
		Top = 120, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkAddinDebugMode' AS projectexplorercheckbox WITH ;
		Alignment = 0, ;
		Caption = "\<Addin debug mode", ;
		ControlSource = "Thisform.lAddinDebugMode", ;
		Height = 16, ;
		Left = 20, ;
		Name = "chkAddinDebugMode", ;
		StatusBarText = "Turn this on to display a message when addins are executed", ;
		TabIndex = 14, ;
		ToolTipText = "Turn this on to display a message when addins are executed", ;
		Top = 295, ;
		Width = 124, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkAllowAnyFileType' AS projectexplorercheckbox WITH ;
		Alignment = 0, ;
		Caption = "Add and New a\<llow any file type", ;
		ControlSource = "Thisform.lAllowAnyFileType", ;
		Height = 16, ;
		Left = 20, ;
		Name = "chkAllowAnyFileType", ;
		StatusBarText = "Turn this on to have the Add and New buttons allow any file type or off for only a file of the selected type", ;
		TabIndex = 15, ;
		ToolTipText = "Turn this on to have the Add and New buttons allow any file type or off for only a file of the selected type", ;
		Top = 310, ;
		Width = 196, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkDisplayFullPath' AS projectexplorercheckbox WITH ;
		Alignment = 0, ;
		Caption = "Display \<full path for project files", ;
		ControlSource = "Thisform.lDisplayFullPath", ;
		Height = 16, ;
		Left = 20, ;
		Name = "chkDisplayFullPath", ;
		StatusBarText = "Turn this on to display the full path for project file or off to display the relative path", ;
		TabIndex = 12, ;
		ToolTipText = "Turn this on to display the full path for project file or off to display the relative path", ;
		Top = 265, ;
		Width = 189, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkDisplayIcons' AS projectexplorercheckbox WITH ;
		Alignment = 0, ;
		Caption = "Display u\<ser-defined class icons", ;
		ControlSource = "Thisform.lDisplayIcons", ;
		Height = 16, ;
		Left = 20, ;
		Name = "chkDisplayIcons", ;
		StatusBarText = "Turn this on to show user-defined class icons in the TreeView or off to display the normal icon for the class", ;
		TabIndex = 11, ;
		Top = 250, ;
		Width = 186, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkRemoveFiles' AS projectexplorercheckbox WITH ;
		Alignment = 0, ;
		Caption = "R\<emove files from version control upon removal", ;
		ControlSource = "Thisform.lRemoveFiles", ;
		Left = 20, ;
		Name = "chkRemoveFiles", ;
		TabIndex = 7, ;
		Top = 135, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkShowSplitter' AS projectexplorercheckbox WITH ;
		Alignment = 0, ;
		Caption = "\<Visible splitter", ;
		ControlSource = "Thisform.lShowSplitter", ;
		Height = 16, ;
		Left = 20, ;
		Name = "chkShowSplitter", ;
		StatusBarText = "Turn this on to have the splitter visible", ;
		TabIndex = 13, ;
		ToolTipText = "Turn this on to have the splitter visible", ;
		Top = 280, ;
		Width = 93, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdCancel' AS projectexplorercancelbutton WITH ;
		Left = 160, ;
		Name = "cmdCancel", ;
		TabIndex = 17, ;
		Top = 350
		*< END OBJECT: ClassLib="projectexplorerbutton.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS projectexplorerokbutton WITH ;
		Left = 75, ;
		Name = "cmdOK", ;
		TabIndex = 16, ;
		Top = 350
		*< END OBJECT: ClassLib="projectexplorerbutton.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cntDblClickAction' AS projectexplorerlabelledbox WITH ;
		Height = 50, ;
		Left = 10, ;
		Name = "cntDblClickAction", ;
		TabIndex = 1, ;
		Top = 10, ;
		Width = 300, ;
		ZOrderSet = 2, ;
		lblLabel.Caption = " Project double-click action ", ;
		lblLabel.Name = "lblLabel", ;
		shpBox.Height = 44, ;
		shpBox.Name = "shpBox", ;
		shpBox.Width = 300
		*< END OBJECT: ClassLib="projectexplorerlabelledbox.vcx" BaseClass="container" />

	ADD OBJECT 'ctrOtherOptions' AS projectexplorerlabelledbox WITH ;
		Height = 115, ;
		Left = 10, ;
		Name = "ctrOtherOptions", ;
		TabIndex = 10, ;
		Top = 225, ;
		Width = 300, ;
		ZOrderSet = 0, ;
		lblLabel.Caption = " Other options ", ;
		lblLabel.Name = "lblLabel", ;
		shpBox.Height = 109, ;
		shpBox.Name = "shpBox", ;
		shpBox.Width = 300
		*< END OBJECT: ClassLib="projectexplorerlabelledbox.vcx" BaseClass="container" />

	ADD OBJECT 'ctrVCOptions' AS projectexplorerlabelledbox WITH ;
		Height = 100, ;
		Left = 10, ;
		Name = "ctrVCOptions", ;
		TabIndex = 3, ;
		Top = 65, ;
		Width = 300, ;
		ZOrderSet = 1, ;
		lblLabel.Caption = " Version control options ", ;
		lblLabel.Name = "lblLabel", ;
		shpBox.Height = 94, ;
		shpBox.Name = "shpBox", ;
		shpBox.Width = 300
		*< END OBJECT: ClassLib="projectexplorerlabelledbox.vcx" BaseClass="container" />

	ADD OBJECT 'ctrWindowType' AS projectexplorerlabelledbox WITH ;
		Height = 50, ;
		Left = 10, ;
		Name = "ctrWindowType", ;
		TabIndex = 8, ;
		Top = 170, ;
		Width = 300, ;
		ZOrderSet = 2, ;
		LBLLABEL.Caption = " Window type ", ;
		LBLLABEL.Name = "LBLLABEL", ;
		SHPBOX.Height = 44, ;
		SHPBOX.Name = "SHPBOX", ;
		SHPBOX.Width = 300
		*< END OBJECT: ClassLib="projectexplorerlabelledbox.vcx" BaseClass="container" />

	ADD OBJECT 'lblVersionControl' AS projectexplorerlabel WITH ;
		Caption = "Default \<provider", ;
		Left = 20, ;
		Name = "lblVersionControl", ;
		TabIndex = 4, ;
		Top = 94, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'opgDblClickAction' AS projectexploreroptiongroup WITH ;
		BorderStyle = 0, ;
		ControlSource = "Thisform.nDblClickAction", ;
		Height = 30, ;
		Left = 20, ;
		Name = "opgDblClickAction", ;
		TabIndex = 2, ;
		Top = 25, ;
		Width = 257, ;
		ZOrderSet = 3, ;
		projectexploreroptionbutton1.Caption = "\<Run selected file", ;
		projectexploreroptionbutton1.Left = 5, ;
		projectexploreroptionbutton1.Name = "projectexploreroptionbutton1", ;
		projectexploreroptionbutton1.Top = 5, ;
		projectexploreroptionbutton1.Value = 1, ;
		projectexploreroptionbutton2.Caption = "\<Modify selected file", ;
		projectexploreroptionbutton2.Left = 125, ;
		projectexploreroptionbutton2.Name = "projectexploreroptionbutton2", ;
		projectexploreroptionbutton2.Top = 5
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="optiongroup" />

	ADD OBJECT 'opgWindowType' AS projectexploreroptiongroup WITH ;
		BorderStyle = 0, ;
		ButtonCount = 3, ;
		ControlSource = "Thisform.nWindowType", ;
		Height = 30, ;
		Left = 20, ;
		Name = "opgWindowType", ;
		TabIndex = 9, ;
		Top = 185, ;
		Width = 257, ;
		ZOrderSet = 3, ;
		projectexploreroptionbutton1.Caption = "Desk\<top", ;
		projectexploreroptionbutton1.Left = 5, ;
		projectexploreroptionbutton1.Name = "projectexploreroptionbutton1", ;
		projectexploreroptionbutton1.StatusBarText = "Choose this for a desktop window", ;
		projectexploreroptionbutton1.ToolTipText = "Choose this for a desktop window", ;
		projectexploreroptionbutton1.Top = 5, ;
		projectexploreroptionbutton1.Value = 1, ;
		projectexploreroptionbutton2.Caption = "D\<ockable", ;
		projectexploreroptionbutton2.Left = 85, ;
		projectexploreroptionbutton2.Name = "projectexploreroptionbutton2", ;
		projectexploreroptionbutton2.StatusBarText = "Choose this for a dockable window", ;
		projectexploreroptionbutton2.ToolTipText = "Choose this for a dockable window", ;
		projectexploreroptionbutton2.Top = 5, ;
		Projectexploreroptionbutton3.Caption = "\<Neither", ;
		Projectexploreroptionbutton3.Left = 170, ;
		Projectexploreroptionbutton3.Name = "Projectexploreroptionbutton3", ;
		Projectexploreroptionbutton3.StatusBarText = "Choose this for a normal window", ;
		Projectexploreroptionbutton3.ToolTipText = "Choose this for a normal window", ;
		Projectexploreroptionbutton3.Top = 5
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="optiongroup" />
	
	PROCEDURE Init
		lparameters tcSettingsFile
		This.cSettingsFile = tcSettingsFile
		This.cboVersionControl.Requery()
		dodefault()
		
	ENDPROC

	PROCEDURE cboVersionControl.Requery
		lparameters tlNoAction
		local lcFile, ;
			lcSettings, ;
			lcProviders, ;
			lnProviders, ;
			lnI
		lcFile = Thisform.cSettingsFile
		if file(lcFile)
			lcSettings  = filetostr(lcFile)
			lcProviders = strextract(lcSettings, '<versioncontrol>', ;
				'</versioncontrol>', 1, 1)
			lnProviders = occurs('<provider ', lcProviders)
			dimension This.aItems[lnProviders]
			for lnI = 1 to lnProviders
				This.aItems[lnI] = strextract(lcProviders, 'name="', '"', lnI)
			next lnI
		endif file(lcFile)
		dodefault()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS projectexplorerprogress AS projectexplorerform OF "projectexplorerctrls.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblCaption" UniqueID="" Timestamp="" />

	BorderStyle = 2
	Caption = "Project Explorer"
	Closable = .F.
	DoCreate = .T.
	Height = 50
	MaxButton = .F.
	MinButton = .F.
	Name = "projectexplorerprogress"
	Width = 300

	ADD OBJECT 'lblCaption' AS projectexplorerlabel WITH ;
		Left = 15, ;
		Name = "lblCaption", ;
		Top = 17
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />
	
	PROCEDURE Init
		lparameters tcCaption
		This.lblCaption.Caption = tcCaption
		dodefault()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS projectexplorersolutionproperties AS projectexplorermodaldialog OF "projectexplorerctrls.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblVersionControl" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboVersionControl" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboIncludeInVersionControl" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblIncludeInVersionControl" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblFileAddMessage" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkAutoCommit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkHaveVersionControl" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtFileAddMessage" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblFileRemoveMessage" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtFileRemoveMessage" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblVersionControlAddMessage" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtVersionControlAddMessage" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCleanupMessage" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCleanupMessage" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblSavedSolutionMessage" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtSavedSolutionMessage" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblBuildMessage" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtBuildMessage" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: cbuildmessage		&& The commit message to use when a project is built
		*p: ccleanupmessage		&& The commit message when a solution is cleaned up
		*p: cfileaddmessage		&& The commit message when a file is added
		*p: cfileremovemessage		&& The commit message when a file is removed
		*p: csavedsolutionmessage		&& The commit message when the solution file is saved
		*p: csettingsfile		&& The name and path for the Project Explorer settings file
		*p: cversioncontroladdmessage		&& The commit message when version control is added to a solution
		*p: cversioncontrolclass		&& The version control class to use
		*p: cversioncontrollibrary		&& The library for the version control class to use
		*p: cversioncontrolprovider		&& The version control provider to use
		*p: lautocommit		&& .T. to auto-commit changes
		*p: lhaveversioncontrol		&& .T. if the solution has version control
		*p: lusetextfiles		&& .T. if we can create text files from binary files
		*p: luseversioncontrol		&& .T if the solution should use version control
		*p: nincludeinversioncontrol		&& What to include in version control
	*</DefinedPropArrayMethod>

	Caption = "Version Control Properties"
	cbuildmessage = 		&& The commit message to use when a project is built
	ccleanupmessage = 		&& The commit message when a solution is cleaned up
	cfileaddmessage = 		&& The commit message when a file is added
	cfileremovemessage = 		&& The commit message when a file is removed
	csavedsolutionmessage = 		&& The commit message when the solution file is saved
	csettingsfile = 		&& The name and path for the Project Explorer settings file
	cversioncontroladdmessage = Initial commit		&& The commit message when version control is added to a solution
	cversioncontrolclass = 		&& The version control class to use
	cversioncontrollibrary = 		&& The library for the version control class to use
	cversioncontrolprovider = 		&& The version control provider to use
	DoCreate = .T.
	Height = 443
	lautocommit = .F.		&& .T. to auto-commit changes
	lhaveversioncontrol = .F.		&& .T. if the solution has version control
	lusetextfiles = .F.		&& .T. if we can create text files from binary files
	luseversioncontrol = .F.		&& .T if the solution should use version control
	Name = "projectexplorersolutionproperties"
	nincludeinversioncontrol = 3		&& What to include in version control
	Width = 370
	_memberdata = <VFPData>
		<memberdata name="nincludeinversioncontrol" display="nIncludeInVersionControl"/>
		<memberdata name="cversioncontrolprovider" display="cVersionControlProvider"/>
		<memberdata name="csettingsfile" display="cSettingsFile"/>
		<memberdata name="cversioncontrolclass" display="cVersionControlClass"/>
		<memberdata name="cversioncontrollibrary" display="cVersionControlLibrary"/>
		<memberdata name="lautocommit" display="lAutoCommit"/>
		<memberdata name="cfileaddmessage" display="cFileAddMessage"/>
		<memberdata name="cfileremovemessage" display="cFileRemoveMessage"/>
		<memberdata name="cversioncontroladdmessage" display="cVersionControlAddMessage"/>
		<memberdata name="lhaveversioncontrol" display="lHaveVersionControl"/>
		<memberdata name="luseversioncontrol" display="lUseVersionControl"/>
		<memberdata name="ccleanupmessage" display="cCleanupMessage"/>
		<memberdata name="csavedsolutionmessage" display="cSavedSolutionMessage"/>
		<memberdata name="cbuildmessage" display="cBuildMessage"/>
		<memberdata name="lusetextfiles" display="lUseTextFiles"/>
		</VFPData>

	ADD OBJECT 'cboIncludeInVersionControl' AS projectexplorercombobox WITH ;
		BoundTo = .F., ;
		ControlSource = "Thisform.nIncludeInVersionControl", ;
		Height = 24, ;
		lbindtoformanychange = .T., ;
		Left = 155, ;
		lrequeryoninit = .F., ;
		Name = "cboIncludeInVersionControl", ;
		TabIndex = 5, ;
		Top = 74, ;
		Width = 156
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboVersionControl' AS projectexplorercombobox WITH ;
		ControlSource = "Thisform.cVersionControlProvider", ;
		Height = 24, ;
		lbindtoformanychange = .T., ;
		Left = 155, ;
		lrequeryoninit = .F., ;
		lupdatecontrolsource = .T., ;
		Name = "cboVersionControl", ;
		TabIndex = 3, ;
		Top = 39, ;
		Width = 156
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="combobox" />

	ADD OBJECT 'chkAutoCommit' AS projectexplorercheckbox WITH ;
		Alignment = 0, ;
		Caption = "\<Automatically commit changes", ;
		ControlSource = "Thisform.lAutoCommit", ;
		Left = 10, ;
		Name = "chkAutoCommit", ;
		TabIndex = 6, ;
		Top = 109, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkHaveVersionControl' AS projectexplorercheckbox WITH ;
		Alignment = 0, ;
		Caption = "\<Solution uses version control", ;
		ControlSource = "Thisform.lUseVersionControl", ;
		Left = 10, ;
		Name = "chkHaveVersionControl", ;
		TabIndex = 1, ;
		Top = 10, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdCancel' AS projectexplorercancelbutton WITH ;
		Left = 185, ;
		Name = "cmdCancel", ;
		TabIndex = 20, ;
		Top = 408
		*< END OBJECT: ClassLib="projectexplorerbutton.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS projectexplorerokbutton WITH ;
		Left = 100, ;
		Name = "cmdOK", ;
		TabIndex = 19, ;
		Top = 408
		*< END OBJECT: ClassLib="projectexplorerbutton.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'lblBuildMessage' AS projectexplorerlabel WITH ;
		Caption = "Auto-commit \<message on project build:", ;
		Left = 10, ;
		Name = "lblBuildMessage", ;
		TabIndex = 15, ;
		Top = 313
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'lblCleanupMessage' AS projectexplorerlabel WITH ;
		Caption = "Auto-commit message on project \<cleanup:", ;
		Left = 10, ;
		Name = "lblCleanupMessage", ;
		TabIndex = 11, ;
		Top = 223
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'lblFileAddMessage' AS projectexplorerlabel WITH ;
		Caption = "Auto-commit message on \<file add:", ;
		Left = 10, ;
		Name = "lblFileAddMessage", ;
		TabIndex = 7, ;
		Top = 133
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'lblFileRemoveMessage' AS projectexplorerlabel WITH ;
		Caption = "Auto-commit message on file \<removal:", ;
		Left = 10, ;
		Name = "lblFileRemoveMessage", ;
		TabIndex = 9, ;
		Top = 178
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'lblIncludeInVersionControl' AS projectexplorerlabel WITH ;
		Caption = "\<Include in version control", ;
		Left = 10, ;
		Name = "lblIncludeInVersionControl", ;
		TabIndex = 4, ;
		Top = 78
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'lblSavedSolutionMessage' AS projectexplorerlabel WITH ;
		Caption = "Auto-commit \<message on solution settings saved:", ;
		Left = 10, ;
		Name = "lblSavedSolutionMessage", ;
		TabIndex = 13, ;
		Top = 268
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'lblVersionControl' AS projectexplorerlabel WITH ;
		Caption = "Version control \<provider", ;
		Left = 10, ;
		Name = "lblVersionControl", ;
		TabIndex = 2, ;
		Top = 43
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'lblVersionControlAddMessage' AS projectexplorerlabel WITH ;
		Caption = "Auto-commit message on adding \<version control:", ;
		Left = 10, ;
		Name = "lblVersionControlAddMessage", ;
		TabIndex = 17, ;
		Top = 358
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'txtBuildMessage' AS projectexplorertextbox WITH ;
		ControlSource = "Thisform.cBuildMessage", ;
		Height = 22, ;
		Left = 10, ;
		Name = "txtBuildMessage", ;
		TabIndex = 16, ;
		Top = 329, ;
		Width = 350
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCleanupMessage' AS projectexplorertextbox WITH ;
		ControlSource = "Thisform.cCleanupMessage", ;
		Height = 22, ;
		Left = 10, ;
		Name = "txtCleanupMessage", ;
		TabIndex = 12, ;
		Top = 239, ;
		Width = 350
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtFileAddMessage' AS projectexplorertextbox WITH ;
		ControlSource = "Thisform.cFileAddMessage", ;
		Height = 22, ;
		Left = 10, ;
		Name = "txtFileAddMessage", ;
		TabIndex = 8, ;
		Top = 149, ;
		Width = 350
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtFileRemoveMessage' AS projectexplorertextbox WITH ;
		ControlSource = "Thisform.cFileRemoveMessage", ;
		Height = 22, ;
		Left = 10, ;
		Name = "txtFileRemoveMessage", ;
		TabIndex = 10, ;
		Top = 194, ;
		Width = 350
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtSavedSolutionMessage' AS projectexplorertextbox WITH ;
		ControlSource = "Thisform.cSavedSolutionMessage", ;
		Height = 22, ;
		Left = 10, ;
		Name = "txtSavedSolutionMessage", ;
		TabIndex = 14, ;
		Top = 284, ;
		Width = 350
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtVersionControlAddMessage' AS projectexplorertextbox WITH ;
		ControlSource = "Thisform.cVersionControlAddMessage", ;
		Height = 22, ;
		Left = 10, ;
		Name = "txtVersionControlAddMessage", ;
		TabIndex = 18, ;
		Top = 374, ;
		Width = 350
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />
	
	PROCEDURE Init
		lparameters toSolution, ;
			tcSettingsFile, ;
			tcDefaultProvider
		local lnProvider, ;
			lcText, ;
			lcPathExpression, ;
			lcDefaultProvider
		This.nIncludeInVersionControl = max(toSolution.nIncludeInVersionControl, 1)
		This.lAutoCommit              = toSolution.lAutoCommitChanges
		This.cFileAddMessage          = toSolution.cFileAddMessage
		This.cFileRemoveMessage       = toSolution.cFileRemoveMessage
		This.cCleanupMessage          = toSolution.cCleanupMessage
		This.cSavedSolutionMessage    = toSolution.cSavedSolutionMessage
		This.cBuildMessage            = toSolution.cBuildMessage
		This.lHaveVersionControl      = toSolution.lHaveVersionControl
		This.lUseVersionControl       = toSolution.lHaveVersionControl
		This.cSettingsFile            = tcSettingsFile
		
		* See if we can create text files from binary files.
		
		if file(This.cSettingsFile)
			lcText             = filetostr(This.cSettingsFile)
			lcPathExpression   = strextract(lcText, '<textconverter path="', '"')
			This.lUseTextFiles = not empty(lcPathExpression)
		endif file(This.cSettingsFile)
		
		* Handle the provider.
		
		This.cboVersionControl.Requery()
		if toSolution.lHaveVersionControl
			lnProvider = ascan(This.cboVersionControl.aItems, ;
				toSolution.cVersionControlClass, -1, -1, 2, 15)
			if lnProvider > 0
				store This.cboVersionControl.aItems[lnProvider, 1] to ;
					This.cVersionControlProvider, This.cboVersionControl.Value
				&& we store to Value as well so AnyChange fires
			else
				store tcDefaultProvider to This.cVersionControlProvider, ;
					This.cboVersionControl.Value
			endif lnProvider > 0
		else
			lcDefaultProvider = iif(empty(tcDefaultProvider), ;
				This.cboVersionControl.aItems[1, 1], tcDefaultProvider)
			store lcDefaultProvider to This.cVersionControlProvider, ;
				This.cboVersionControl.Value
		endif toSolution.lHaveVersionControl
		dodefault()
		
	ENDPROC

	PROCEDURE cboIncludeInVersionControl.Refresh
		if empty(This.aItems[1])
			if Thisform.lUseTextFiles
				dimension This.aItems[3]
				This.aItems[1] = 'Binary files only'
				This.aItems[2] = 'Text equivalents only'
				This.aItems[3] = 'Both'
			else
				dimension This.aItems[1]
				This.aItems[1] = 'Binary files only'
			endif Thisform.lUseTextFiles
			This.Requery()
			This.ListIndex = Thisform.nIncludeInVersionControl
		endif empty(This.aItems[1])
		This.Enabled = not Thisform.lHaveVersionControl and Thisform.lUseTextFiles
		
	ENDPROC

	PROCEDURE cboVersionControl.anychange
		if This.ListIndex > 0
			Thisform.cVersionControlClass   = This.aItems[This.ListIndex, 2]
			Thisform.cVersionControlLibrary = This.aItems[This.ListIndex, 3]
		endif This.ListIndex > 0
		Thisform.RefreshForm()
		
	ENDPROC

	PROCEDURE cboVersionControl.Refresh
		This.Enabled = not Thisform.lHaveVersionControl and This.ListCount > 0
		
	ENDPROC

	PROCEDURE cboVersionControl.Requery
		lparameters tlNoAction
		local lcFile, ;
			lcSettings, ;
			lcProviders, ;
			lnProviders, ;
			lnI
		lcFile = Thisform.cSettingsFile
		if file(lcFile)
			lcSettings  = filetostr(lcFile)
			lcProviders = strextract(lcSettings, '<versioncontrol>', ;
				'</versioncontrol>', 1, 1)
			lnProviders = occurs('<provider ', lcProviders)
			dimension This.aItems[lnProviders, 3]
			for lnI = 1 to lnProviders
				This.aItems[lnI, 1] = strextract(lcProviders, 'name="', '"', lnI)
				This.aItems[lnI, 2] = strextract(lcProviders, 'class="', '"', lnI)
				This.aItems[lnI, 3] = strextract(lcProviders, 'library="', '"', lnI)
			next lnI
		endif file(lcFile)
		dodefault()
		
	ENDPROC

	PROCEDURE chkAutoCommit.anychange
		Thisform.RefreshForm()
		
	ENDPROC

	PROCEDURE chkHaveVersionControl.anychange
		Thisform.RefreshForm()
		
	ENDPROC

	PROCEDURE chkHaveVersionControl.Refresh
		This.Enabled = not Thisform.lHaveVersionControl and ;
			Thisform.cboVersionControl.ListCount > 0
		
	ENDPROC

	PROCEDURE cmdOK.Refresh
		This.Enabled = not empty(Thisform.cVersionControlClass) and ;
			(not Thisform.lAutoCommit or ;
			not empty(Thisform.cFileAddMessage) and ;
			not empty(Thisform.cFileRemoveMessage) and ;
			not empty(Thisform.cVersionControlAddMessage))
		
	ENDPROC

	PROCEDURE txtBuildMessage.LostFocus
		Thisform.RefreshForm()
		
	ENDPROC

	PROCEDURE txtBuildMessage.Refresh
		This.Enabled = Thisform.lAutoCommit
		
	ENDPROC

	PROCEDURE txtCleanupMessage.LostFocus
		Thisform.RefreshForm()
		
	ENDPROC

	PROCEDURE txtCleanupMessage.Refresh
		This.Enabled = Thisform.lAutoCommit
		
	ENDPROC

	PROCEDURE txtFileAddMessage.LostFocus
		Thisform.RefreshForm()
		
	ENDPROC

	PROCEDURE txtFileAddMessage.Refresh
		This.Enabled = Thisform.lAutoCommit
		
	ENDPROC

	PROCEDURE txtFileRemoveMessage.LostFocus
		Thisform.RefreshForm()
		
	ENDPROC

	PROCEDURE txtFileRemoveMessage.Refresh
		This.Enabled = Thisform.lAutoCommit
		
	ENDPROC

	PROCEDURE txtSavedSolutionMessage.LostFocus
		Thisform.RefreshForm()
		
	ENDPROC

	PROCEDURE txtSavedSolutionMessage.Refresh
		This.Enabled = Thisform.lAutoCommit
		
	ENDPROC

	PROCEDURE txtVersionControlAddMessage.LostFocus
		Thisform.RefreshForm()
		
	ENDPROC

	PROCEDURE txtVersionControlAddMessage.Refresh
		This.Enabled = Thisform.lAutoCommit and not Thisform.lHaveVersionControl
		
	ENDPROC

ENDDEFINE

DEFINE CLASS projectexplorersortfilter AS projectexplorermodaldialog OF "projectexplorerctrls.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cntFilter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntSort" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblSort" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboSort" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkAsc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkDesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblProperties" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtFilter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboProperties" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdInsert" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdGetExpr" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: cfilter		&& The filter to use for items
		*p: csortexpr		&& The sort expression
		*p: ldescending		&& .T. to sort in descending order, .F. for ascending order
		*p: lsorttreeviewdescending		&& .T. to sort the TreeView descending
	*</DefinedPropArrayMethod>

	Caption = "Sort and Filter"
	cfilter = 		&& The filter to use for items
	csortexpr = 		&& The sort expression
	DoCreate = .T.
	Height = 291
	Icon = images\projectexplorerfilter.ico
	ldescending = .F.		&& .T. to sort in descending order, .F. for ascending order
	lsorttreeviewdescending = .F.		&& .T. to sort the TreeView descending
	Name = "projectexplorersortfilter"
	Width = 371
	_memberdata = <VFPData>
		<memberdata name="csortexpr" display="cSortExpr"/>
		<memberdata name="ldescending" display="lDescending"/>
		<memberdata name="lsorttreeviewdescending" display="lSortTreeViewDescending"/>
		<memberdata name="cfilter" display="cFilter"/>
		</VFPData>

	ADD OBJECT 'cboProperties' AS projectexplorercombobox WITH ;
		Height = 24, ;
		Left = 90, ;
		Name = "cboProperties", ;
		StatusBarText = "This displays the properties of an item object you can filter on", ;
		TabIndex = 10, ;
		ToolTipText = "This displays the properties of an item object you can filter on", ;
		Top = 206, ;
		Value = , ;
		Width = 165
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboSort' AS projectexplorercombobox WITH ;
		BoundColumn = 2, ;
		ControlSource = "Thisform.cSortExpr", ;
		Height = 24, ;
		Left = 81, ;
		Name = "cboSort", ;
		TabIndex = 3, ;
		Top = 35, ;
		Width = 209, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="combobox" />

	ADD OBJECT 'chkAsc' AS projectexplorercheckboxgraphical WITH ;
		Alignment = 0, ;
		Left = 295, ;
		Name = "chkAsc", ;
		Picture = images\projectexplorersortasc.bmp, ;
		SpecialEffect = 2, ;
		StatusBarText = "Choose this to sort in ascending order", ;
		TabIndex = 4, ;
		ToolTipText = "Choose this to sort in ascending order", ;
		Top = 36, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkDesc' AS projectexplorercheckboxgraphical WITH ;
		Alignment = 0, ;
		Left = 320, ;
		Name = "chkDesc", ;
		Picture = images\projectexplorersortdesc.bmp, ;
		SpecialEffect = 2, ;
		StatusBarText = "Choose this to sort in ascending order", ;
		TabIndex = 5, ;
		ToolTipText = "Choose this to sort in ascending order", ;
		Top = 36, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdCancel' AS projectexplorercancelbutton WITH ;
		Left = 186, ;
		Name = "cmdCancel", ;
		TabIndex = 13, ;
		Top = 255, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="projectexplorerbutton.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdGetExpr' AS projectexplorercommandbutton WITH ;
		Caption = "...", ;
		Height = 22, ;
		Left = 325, ;
		Name = "cmdGetExpr", ;
		StatusBarText = "Display the Expression Builder", ;
		TabIndex = 8, ;
		ToolTipText = "Display the Expression Builder", ;
		Top = 120, ;
		Width = 22
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdInsert' AS projectexplorercommandbutton WITH ;
		Caption = "Insert", ;
		Left = 260, ;
		Name = "cmdInsert", ;
		StatusBarText = "Inserts the selected property into the filter expression", ;
		TabIndex = 11, ;
		ToolTipText = "Inserts the selected property into the filter expression", ;
		Top = 205
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS projectexplorerokbutton WITH ;
		Left = 101, ;
		Name = "cmdOK", ;
		TabIndex = 12, ;
		Top = 255, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="projectexplorerbutton.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cntFilter' AS projectexplorerlabelledbox WITH ;
		Height = 150, ;
		Left = 10, ;
		Name = "cntFilter", ;
		TabIndex = 6, ;
		Top = 95, ;
		Width = 345, ;
		ZOrderSet = 0, ;
		lblLabel.Caption = " Filter ", ;
		lblLabel.Name = "lblLabel", ;
		shpBox.Height = 144, ;
		shpBox.Name = "shpBox", ;
		shpBox.Width = 345
		*< END OBJECT: ClassLib="projectexplorerlabelledbox.vcx" BaseClass="container" />

	ADD OBJECT 'cntSort' AS projectexplorerlabelledbox WITH ;
		Height = 70, ;
		Left = 10, ;
		Name = "cntSort", ;
		TabIndex = 1, ;
		Top = 10, ;
		Width = 345, ;
		ZOrderSet = 0, ;
		lblLabel.Caption = " Sort ", ;
		lblLabel.Name = "lblLabel", ;
		shpBox.Height = 64, ;
		shpBox.Name = "shpBox", ;
		shpBox.Width = 345
		*< END OBJECT: ClassLib="projectexplorerlabelledbox.vcx" BaseClass="container" />

	ADD OBJECT 'edtFilter' AS projectexplorereditbox WITH ;
		ControlSource = "Thisform.cFilter", ;
		czoomformcaption = Filter Expression, ;
		Height = 78, ;
		IntegralHeight = .F., ;
		lcanzoom = .T., ;
		Left = 25, ;
		Name = "edtFilter", ;
		StatusBarText = 'The item filter; use "Item" as a placeholder for the item being checked', ;
		TabIndex = 7, ;
		ToolTipText = 'The item filter; use "Item" as a placeholder for the item being checked', ;
		Top = 120, ;
		Width = 295
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="editbox" />

	ADD OBJECT 'lblProperties' AS projectexplorerlabel WITH ;
		Caption = "Properties", ;
		Left = 25, ;
		Name = "lblProperties", ;
		TabIndex = 9, ;
		Top = 210, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'lblSort' AS projectexplorerlabel WITH ;
		Caption = "Sort by", ;
		Left = 25, ;
		Name = "lblSort", ;
		TabIndex = 2, ;
		Top = 39, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />
	
	PROCEDURE Show
		lparameters tnStyle
		dodefault(tnStyle)
		This.chkAsc.Value  = not This.lDescending
		This.chkDesc.Value = not This.lDescending
		
	ENDPROC

	PROCEDURE cboProperties.Init
		* Get a list of properties for ProjectItem objects.
		
		local loItem, ;
			laProperties[1], ;
			lnProperties, ;
			lnI, ;
			lcProperty, ;
			lcData
		loItem = newobject('ProjectItem', fullpath('ProjectExplorerItems.vcx', ;
			This.ClassLibrary))
		lnProperties = amembers(laProperties, loItem, 0, 'U')
		for lnI = lnProperties to 1 step -1
			lcProperty = laProperties[lnI]
			if inlist(lcProperty, 'BUILDER', 'CERRORMESSAGE', 'LERROROCCURRED', ;
				'LNOTIFYONFORMCHANGE', 'LRELEASE', 'OEXCEPTION', '_MEMBERDATA', ;
				'CLASSCHANGED', 'KEY', 'ORIGINALDESCRIPTION', 'ORIGINALUSER', ;
				'PARENTITEM')
				adel(laProperties, lnI)
				lnProperties = lnProperties - 1
				dimension laProperties[lnProperties]
			else
				lcData = strextract(loItem._MemberData, 'memberdata name="' + ;
					lower(lcProperty) + '"', '/>')
				laProperties[lnI] = 'Item.' + strextract(lcData, 'display="', '"')
			endif inlist(lcProperty ...
		next lnI
		acopy(laProperties, This.aItems)
		dodefault()
		 
	ENDPROC

	PROCEDURE cboSort.Init
		dimension This.aItems[3, 2]
		This.aItems[1, 1] = 'Name'
		This.aItems[1, 2] = 'upper(TEXT)'
		This.aItems[2, 1] = 'Last Modified Date'
		This.aItems[2, 2] = 'LASTMOD'
		This.aItems[3, 1] = 'Category'
		This.aItems[3, 2] = 'FORECOLOR'
		dodefault()
		
	ENDPROC

	PROCEDURE chkAsc.InteractiveChange
		Thisform.chkDesc.Value = not This.Value
		dodefault()
		
	ENDPROC

	PROCEDURE chkAsc.Refresh
		This.Value = not Thisform.lDescending
		
	ENDPROC

	PROCEDURE chkDesc.InteractiveChange
		Thisform.chkAsc.Value = not This.Value
		dodefault()
		
	ENDPROC

	PROCEDURE chkDesc.Refresh
		This.Value = Thisform.lDescending
		
	ENDPROC

	PROCEDURE cmdGetExpr.Click
		local lcExpr
		private loItem
		loItem = newobject('ProjectItem', fullpath('ProjectExplorerItems.vcx', ;
			This.ClassLibrary))
		lcExpr = This.Parent.edtFilter.Value
		getexpr 'Filter Expression' to lcExpr type 'C' default lcExpr
		This.Parent.edtFilter.Value = lcExpr
		
	ENDPROC

	PROCEDURE cmdInsert.Click
		local lnSelStart, ;
			lnSelLength, ;
			lcSelText, ;
			lcValue
		
		* Get the property name to insert.
		
		lcString = Thisform.cboProperties.Value
		with Thisform.edtFilter
		
		* Get the selection.
		
			lnSelStart  = .SelStart
			lnSelLength = .SelLength
			lcSelText   = .SelText
			lcValue     = .Value
		
		* Handle the expression being empty or completely selected (that is, the user
		* is replacing it).
		
			if empty(lcSelText)
				lcValue = left(lcValue, lnSelStart) + lcString + ;
					substr(lcValue, lnSelStart + lnSelLength + 1)
				lnPos = lnSelStart + len(lcString)
			else
				lcValue = left(lcValue, lnSelStart) + lcString + ;
					substr(.Value, lnSelStart + lnSelLength + 1)
				lnPos = lnSelStart + len(lcString)
			endif empty(.SelText)
			.Value = lcValue
			.SetFocus()
			.SelStart  = lnPos
			.SelLength = 0
		endwith
		
	ENDPROC

	PROCEDURE cmdOK.Click
		Thisform.lDescending = Thisform.chkDesc.Value
		dodefault()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS projectexplorertageditor AS projectexplorermodaldialog OF "projectexplorerctrls.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lstTags" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtTag" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdAdd" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdRemove" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: cmainfolder		&& The Project Explorer folder
		*p: ladd		&& .T. if we're adding a tag
	*</DefinedPropArrayMethod>

	Caption = "Tag Editor"
	cmainfolder = 		&& The Project Explorer folder
	DoCreate = .T.
	Height = 307
	Icon = images\projectexplorertags.ico
	ladd = .F.		&& .T. if we're adding a tag
	Name = "projectexplorertageditor"
	Width = 250
	_memberdata = <VFPData>
		<memberdata name="ladd" display="lAdd"/>
		<memberdata name="cmainfolder" display="cMainFolder"/>
		</VFPData>

	ADD OBJECT 'cmdAdd' AS projectexplorercommandbutton WITH ;
		Anchor = 132, ;
		Caption = "Add", ;
		Left = 40, ;
		Name = "cmdAdd", ;
		Top = 275
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdRemove' AS projectexplorercommandbutton WITH ;
		Anchor = 36, ;
		Caption = "Remove", ;
		Left = 125, ;
		Name = "cmdRemove", ;
		Top = 275
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'lstTags' AS projectexplorerlistbox WITH ;
		Anchor = 15, ;
		Height = 225, ;
		IntegralHeight = .F., ;
		Left = 10, ;
		Name = "lstTags", ;
		RowSource = "ProjectExplorerTags.Name", ;
		RowSourceType = 6, ;
		Top = 10, ;
		Width = 230
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="listbox" />

	ADD OBJECT 'txtTag' AS projectexplorertextbox WITH ;
		Anchor = 14, ;
		Height = 22, ;
		Left = 10, ;
		Name = "txtTag", ;
		Top = 240, ;
		Width = 230
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />
	
	PROCEDURE Activate
		if not used('ProjectExplorerTags')
			use (This.cMainFolder + 'ProjectExplorerTags') order Name again shared in 0
		endif not used('ProjectExplorerTags')
		
	ENDPROC

	PROCEDURE Init
		lparameters tcMainFolder
		This.cMainFolder = tcMainFolder
		go top in ProjectExplorerTags
		This.lstTags.Value = ProjectExplorerTags.Name
		dodefault()
		
	ENDPROC

	PROCEDURE cmdAdd.Click
		Thisform.lAdd = .T.
		Thisform.txtTag.Value = ''
		Thisform.RefreshForm()
		Thisform.txtTag.SetFocus()
		
	ENDPROC

	PROCEDURE cmdRemove.Click
		if not eof('ProjectExplorerTags')
			delete in ProjectExplorerTags
			skip in ProjectExplorerTags
			if eof('ProjectExplorerTags')
				go bottom in ProjectExplorerTags
			endif eof('ProjectExplorerTags')
		endif not eof('ProjectExplorerTags')
		Thisform.lAdd = .F.
		Thisform.lstTags.Requery()
		Thisform.lstTags.Value = ProjectExplorerTags.Name
		Thisform.lstTags.SetFocus()
		Thisform.RefreshForm()
		
	ENDPROC

	PROCEDURE cmdRemove.Refresh
		This.Enabled = not ProjectExplorerTags.BuiltIn
		
	ENDPROC

	PROCEDURE lstTags.anychange
		Thisform.lAdd = .F.
		Thisform.txtTag.Value = alltrim(ProjectExplorerTags.Name)
		Thisform.RefreshForm()
		
	ENDPROC

	PROCEDURE txtTag.LostFocus
		if not empty(This.Value)
			if Thisform.lAdd
				insert into ProjectExplorerTags (Name) values (This.Value)
				Thisform.lAdd = .F.
			else
				replace Name with This.Value in ProjectExplorerTags
			endif Thisform.lAdd
			lcName = ProjectExplorerTags.Name
			Thisform.lstTags.Requery()
			if ProjectExplorerTags.Name <> lcName
				= seek(upper(lcName), 'ProjectExplorerTags', 'Name')
			endif ProjectExplorerTags.Name <> lcName
			Thisform.lstTags.Value = lcName
		endif not empty(This.Value)
		
	ENDPROC

	PROCEDURE txtTag.Refresh
		This.Enabled = not ProjectExplorerTags.BuiltIn or Thisform.lAdd
		
	ENDPROC

ENDDEFINE

DEFINE CLASS projectexplorertoolbar AS projectexplorercontainer OF "projectexplorerctrls.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdEdit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdRun" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboTagFilter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdBuild" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdFilter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdAdd" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdRemove" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdNew" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdExpand" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdBack" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdMenu" UniqueID="" Timestamp="" />

	#INCLUDE "projectexplorer.h"
	Anchor = 0
	Height = 26
	Name = "projectexplorertoolbar"
	Width = 700

	ADD OBJECT 'cboTagFilter' AS projectexplorercombobox WITH ;
		BoundColumn = 2, ;
		ControlSource = "Thisform.cFilterTags", ;
		DisplayCount = 20, ;
		Height = 24, ;
		Left = 22, ;
		lrequeryoninit = .F., ;
		lupdatecontrolsource = .T., ;
		Name = "cboTagFilter", ;
		RowSource = "", ;
		RowSourceType = 0, ;
		StatusBarText = "Select the tag to display items for", ;
		TabIndex = 2, ;
		ToolTipText = "Select the tag to display items for", ;
		Top = 1, ;
		Width = 140
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="combobox" />

	ADD OBJECT 'cmdAdd' AS projectexplorertoolbarbutton WITH ;
		Left = 270, ;
		Name = "cmdAdd", ;
		Picture = images\projectexploreradd.bmp, ;
		StatusBarText = "Add a file to the project", ;
		TabIndex = 7, ;
		ToolTipText = "Add a file to the project", ;
		Top = 2
		*< END OBJECT: ClassLib="projectexplorerbutton.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdBack' AS projectexplorerdropdownmenubutton WITH ;
		Left = 358, ;
		Name = "cmdBack", ;
		StatusBarText = "Go back to a previous item", ;
		TabIndex = 11, ;
		ToolTipText = "Go back to a previous item", ;
		Top = 2, ;
		cmdMain.Name = "cmdMain", ;
		cmdMain.Picture = images\projectexplorergoback.bmp, ;
		cmdMenu.Name = "cmdMenu"
		*< END OBJECT: ClassLib="projectexplorerbutton.vcx" BaseClass="container" />

	ADD OBJECT 'cmdBuild' AS projectexplorerdropdownmenubutton WITH ;
		Left = 167, ;
		Name = "cmdBuild", ;
		StatusBarText = "Build project", ;
		TabIndex = 3, ;
		ToolTipText = "Build project", ;
		Top = 2, ;
		cmdMain.Name = "cmdMain", ;
		cmdMain.Picture = images\projectexplorerbuildsolution.bmp, ;
		cmdMain.PicturePosition = 12, ;
		cmdMenu.Name = "cmdMenu"
		*< END OBJECT: ClassLib="projectexplorerbutton.vcx" BaseClass="container" />

	ADD OBJECT 'cmdEdit' AS projectexplorertoolbarbutton WITH ;
		Left = 204, ;
		Name = "cmdEdit", ;
		Picture = images\projectexplorermodify.bmp, ;
		StatusBarText = "Modify the selected item", ;
		TabIndex = 4, ;
		ToolTipText = "Modify the selected item", ;
		Top = 2
		*< END OBJECT: ClassLib="projectexplorerbutton.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdExpand' AS projectexplorertoolbarbutton WITH ;
		Left = 336, ;
		Name = "cmdExpand", ;
		Picture = images\projectexplorercollapse.bmp, ;
		StatusBarText = "Collapse the window", ;
		TabIndex = 10, ;
		ToolTipText = "Collapse the window", ;
		Top = 2
		*< END OBJECT: ClassLib="projectexplorerbutton.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdFilter' AS projectexplorercheckboxgraphical WITH ;
		Alignment = 0, ;
		Height = 22, ;
		Left = 314, ;
		Name = "cmdFilter", ;
		Picture = images\projectexplorerfilter.bmp, ;
		SpecialEffect = 2, ;
		StatusBarText = "Sort and filter", ;
		TabIndex = 9, ;
		ToolTipText = "Sort and filter", ;
		Top = 2, ;
		Width = 22
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdMenu' AS projectexplorertoolbarbutton WITH ;
		Left = 0, ;
		Name = "cmdMenu", ;
		Picture = images\projectexplorermenu.bmp, ;
		TabIndex = 1, ;
		Top = 2
		*< END OBJECT: ClassLib="projectexplorerbutton.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdNew' AS projectexplorertoolbarbutton WITH ;
		Left = 248, ;
		Name = "cmdNew", ;
		Picture = images\projectexplorernewfile.bmp, ;
		StatusBarText = "Create a new file and add it to the project", ;
		TabIndex = 6, ;
		ToolTipText = "Create a new file and add it to the project", ;
		Top = 2
		*< END OBJECT: ClassLib="projectexplorerbutton.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdRemove' AS projectexplorertoolbarbutton WITH ;
		Left = 292, ;
		Name = "cmdRemove", ;
		Picture = images\projectexplorerremove.bmp, ;
		StatusBarText = "Remove the selected item from the project", ;
		TabIndex = 8, ;
		ToolTipText = "Remove the selected item from the project", ;
		Top = 2
		*< END OBJECT: ClassLib="projectexplorerbutton.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdRun' AS projectexplorertoolbarbutton WITH ;
		Left = 226, ;
		Name = "cmdRun", ;
		Picture = images\projectexplorerrun.bmp, ;
		StatusBarText = "Run the selected item", ;
		TabIndex = 5, ;
		ToolTipText = "Run the selected item", ;
		Top = 2
		*< END OBJECT: ClassLib="projectexplorerbutton.vcx" BaseClass="commandbutton" />
	
	PROCEDURE cboTagFilter.anychange
		Thisform.LoadSolution(.T.)
		
	ENDPROC

	PROCEDURE cboTagFilter.Requery
		lparameters tlNoAction
		local lnI
		dimension This.aItems[1]
		select Name, Name from ProjectExplorerTags into array This.aItems order by 1
		lnItems = _tally
		for lnI = 1 to lnItems
			This.aItems[lnI, 1] = trim(This.aItems[lnI, 1])
			This.aItems[lnI, 2] = trim(This.aItems[lnI, 2])
		next lnI
		dimension This.aItems[lnItems + 2, 2]
		This.aItems[lnItems + 1, 1] = '\-'
		This.aItems[lnItems + 1, 2] = '\-'
		This.aItems[lnItems + 2, 1] = 'All'
		This.aItems[lnItems + 2, 2] = ''
		dodefault(tlNoAction)
		if This.ListIndex = 0
			This.ListIndex = ascan(This.aItems, Thisform.cFilterTags, -1, -1, 2, 14)
		endif This.ListIndex = 0
		
	ENDPROC

	PROCEDURE cmdAdd.Click
		Thisform.oTreeViewContainer.SetFocus()
		Thisform.AddItem()
		
	ENDPROC

	PROCEDURE cmdAdd.Refresh
		This.Enabled = Thisform.lAllowAnyFileType or ;
			(not empty(Thisform.cSelectedType) and ;
			not inlist(Thisform.cSelectedType, FILETYPE_REMOTE_VIEW, ;
			FILETYPE_LOCAL_VIEW, FILETYPE_CONNECTION, FILETYPE_STORED_PROCEDURE, ;
			FILETYPE_CLASS, FILETYPE_FIELD, FILETYPE_INDEX)) or ;
			(vartype(Thisform.oItem) = 'O' and ;
			inlist(Thisform.oItem.Type, FILETYPE_FIELD, FILETYPE_INDEX) and ;
			not inlist(Thisform.oItem.ParentType, FILETYPE_REMOTE_VIEW, ;
			FILETYPE_LOCAL_VIEW))
		
	ENDPROC

	PROCEDURE cmdBack.buttonclicked
		Thisform.oTreeViewContainer.SetFocus()
		Thisform.GoBack()
		
	ENDPROC

	PROCEDURE cmdBack.shortcutmenu
		lparameters toMenu, ;
			tcObject
		local lnItems, ;
			laItems[1], ;
			lnI, ;
			lcItem, ;
			lcName, ;
			llAdd, ;
			lcCommand
		with Thisform.oTreeViewContainer
			lnItems = 0
			laItems = ''
			for lnI = .oStack.Count to 1 step -1
				lcItem = .oStack.Item(lnI)
				lcName = strextract(lcItem, ccSTACK_SEPARATOR, ccSTACK_SEPARATOR)
		
		* Ensure we don't have a duplicate. If not, add it to the shortcut menu.
		
				llAdd = ascan(laItems, lcItem, -1, -1, -1, 7) = 0
				if llAdd
					lcCommand = '_screen.ActiveForm.GoBack("' + lcItem + '")'
					toMenu.AddMenuBar(lcName, lcCommand)
				endif llAdd
				lnItems = lnItems + 1
				dimension laItems[lnItems]
				laItems[lnItems] = lcItem
			next lnI
		endwith
		dodefault(toMenu, tcObject)
		
	ENDPROC

	PROCEDURE cmdBuild.buttonclicked
		Thisform.oTreeViewContainer.SetFocus()
		Thisform.BuildProjectDialog()
		
	ENDPROC

	PROCEDURE cmdBuild.Refresh
		This.Enabled = Thisform.CanBuildProject()
		
	ENDPROC

	PROCEDURE cmdBuild.shortcutmenu
		lparameters toMenu, ;
			tcObject
		local llMultipleProjects
		toMenu.AddMenuBar('Build Project', 'loForm.BuildProjectFromDefaults()')
		llMultipleProjects = Thisform.oSolution.oProjects.Count > 1
		if llMultipleProjects
			toMenu.AddMenuBar('Build Solution', 'loForm.BuildSolutionFromDefaults()')
			toMenu.AddMenuSeparator()
		endif llMultipleProjects
		toMenu.AddMenuBar('Rebuild Project', 'loForm.BuildProjectFromDefaults(.T.)')
		if llMultipleProjects
			toMenu.AddMenuBar('Rebuild Solution', 'loForm.BuildSolutionFromDefaults(.T.)')
		endif llMultipleProjects
		dodefault(toMenu, tcObject)
		
	ENDPROC

	PROCEDURE cmdEdit.Click
		Thisform.oTreeViewContainer.SetFocus()
		Thisform.EditItem()
		
	ENDPROC

	PROCEDURE cmdEdit.Refresh
		This.Enabled = vartype(Thisform.oItem) = 'O' and Thisform.oItem.CanEdit
		
	ENDPROC

	PROCEDURE cmdExpand.Click
		Thisform.oTreeViewContainer.SetFocus()
		Thisform.Expand()
		
	ENDPROC

	PROCEDURE cmdFilter.Click
		Thisform.oTreeViewContainer.SetFocus()
		Thisform.SortFilter()
		
	ENDPROC

	PROCEDURE cmdFilter.Refresh
		This.Value = (not empty(Thisform.cItemFilter) and ;
			not Thisform.lIgnoreFilter) or Thisform.lSortTreeViewDescending or ;
			Thisform.cTreeViewSortExpression <> 'upper(TEXT)'
		if This.Value
			This.ToolTipText = iif(empty(Thisform.cItemFilter) or Thisform.lIgnoreFilter, '', ;
				'Filter: ' + Thisform.cItemFilter + chr(13)) + ;
				'Sort: ' + iif(Thisform.cTreeViewSortExpression = 'upper(TEXT)', 'Name', ;
				Thisform.cTreeViewSortExpression) + ;
				iif(Thisform.lSortTreeViewDescending, ' descending', ' ascending') + ;
				chr(13) + 'Right-click to reset sort and filter'
		else
			This.ToolTipText = 'Sort and filter'
		endif This.Value
		
	ENDPROC

	PROCEDURE cmdFilter.RightClick
		Thisform.oTreeViewContainer.SetFocus()
		Thisform.ResetSortAndFilter()
		
	ENDPROC

	PROCEDURE cmdMenu.Click
		* Display a shortcut menu.
		
		This.ShowMenu()
		Thisform.oTreeViewContainer.SetFocus()
		
	ENDPROC

	PROCEDURE cmdMenu.RightClick
		* This comment is here so the base behavior doesn't occur.
		
	ENDPROC

	PROCEDURE cmdMenu.shortcutmenu
		lparameters toMenu, ;
			tcObject
		local lnScaleMode, ;
			lnFoxelHeight, ;
			lnPixelHeight, ;
			lnScreenHeight, ;
			lnScreenWidth, ;
			lnScreenTop, ;
			lnScreenLeft, ;
			lnVFPTop, ;
			lnVFPLeft, ;
			lnTopRowDockOffset, ;
			lnLeftColDockOffset, ;
			lnVPosition, ;
			lnHPosition, ;
			lcForm, ;
			lnPixelWidth, ;
			lnFoxelWidth
		
		* Define the menu bars.
		
		toMenu.AddMenuBar('\<Open Solution...', ;
			'loForm.OpenSolution(.F., .T.)', ;
			'', ;
			'projectexploreropen.bmp')
		toMenu.AddMenuSeparator()
		toMenu.AddMenuBar('\<Add Project to Solution', ;
			'loForm.AddProjectToSolution()', ;
			'', ;
			'projectexploreradd.bmp')
		toMenu.AddMenuBar('\<Remove Project from Solution', ;
			'loForm.RemoveProjectFromSolution()', ;
			"loForm.oSolution.oProjects.Count < 2 or " + ;
				"vartype(loForm.oItem) = 'O'", ;
			'projectexplorerremove.bmp')
			&& skip if there's only one project or a project isn't selected
		toMenu.AddMenuSeparator()
		toMenu.AddMenuBar('\<Cleanup Solution', ;
			'loForm.CleanupSolution()', ;
			'', ;
			'projectexplorercleanup.bmp')
		toMenu.AddMenuBar('\<Version Control Properties...', ;
			'loForm.EditSolutionProperties()', ;
			'', ;
			'ProjectExplorer.ico')
		toMenu.AddMenuSeparator()
		toMenu.AddMenuBar('\<Sort and Filter...', ;
			'loForm.SortFilter()', ;
			'', ;
			'projectexplorerfilter.ico')
		toMenu.AddMenuBar('Assign Tags to Items...', ;
			'loForm.AssignTags()')
		toMenu.AddMenuSeparator()
		toMenu.AddMenuBar('\<Tag Editor...', ;
			'loForm.EditTags()', ;
			'', ;
			'projectexplorertags.ico')
		toMenu.AddMenuBar('\<Category Editor...', ;
			'loForm.EditCategories()', ;
			'', ;
			'projectexplorercategory.ico')
		toMenu.AddMenuBar('O\<ptions...', ;
			'loForm.GetOptions()', ;
			'', ;
			'projectexploreroptions.bmp')
		toMenu.AddMenuSeparator()
		toMenu.AddMenuBar('A\<bout Project Explorer...', ;
			'do form ProjectExplorerAbout with _screen.ActiveForm.cVersionNumber')
		toMenu.AddMenuSeparator()
		toMenu.AddMenuBar('E\<xit', ;
			'loForm.Release()')
		
		* Set the row and column for the menu.
		
		with This
		
		* Determine some scaling factors.
		
			lnScaleMode = _screen.ScaleMode
			if lnScaleMode = 0
				lnFoxelHeight     = _screen.Height
				_screen.ScaleMode = 3
			endif lnScaleMode = 0
			lnPixelHeight  = _screen.Height
			lnScreenHeight = _screen.Height
			lnScreenWidth  = _screen.Width
			lnScreenTop    = _screen.Top
			lnScreenLeft   = _screen.Left
			lnVFPTop       = _VFP.Top
			lnVFPLeft      = _VFP.Left
			if lnScaleMode = 3
				_screen.ScaleMode = 0
				lnFoxelHeight     = _screen.Height
			endif lnScaleMode = 3
			_screen.ScaleMode = lnScaleMode
		
		* Calculate some offset positions. The row offset is the based on the heights
		* of the menu bar, the title bar, and the window frame. The column offset is
		* based on the window frame width. The vertical and horizontal offsets combine
		* the form position with that of the button.
		
			lnTopRowDockOffset  = lnScreenTop - lnVFPTop - sysmetric(9) - ;
				iif(version(2) = 2, sysmetric(20) + 2 * sysmetric(4), 0)
			lnLeftColDockOffset = lnScreenLeft - lnVFPLeft - sysmetric(4)
			lnVPosition         = objtoclient(This, 1) + .Height
			lnHPosition         = objtoclient(This, 2)
		
		* Because menu coordinates are in foxels, we need to get the conversion
		* factors.
		
			lcForm        = Thisform.Name
			lnPixelHeight = mrow(lcForm, 3)
			lnFoxelHeight = mrow(lcForm, 0)
			lnPixelWidth  = mcol(lcForm, 3)
			lnFoxelWidth  = mcol(lcForm, 0)
		
		* Convert the menu position from pixels to foxels.
		
			toMenu.nRow = lnVPosition * lnFoxelHeight/lnPixelHeight
			toMenu.nCol = lnHPosition * lnFoxelWidth /lnPixelWidth
		endwith
		
		* Call any addins.
		
		Thisform.oAddins.ExecuteAddin('AfterCreateMenu', Thisform, toMenu)
		return
		
	ENDPROC

	PROCEDURE cmdNew.Click
		Thisform.oTreeViewContainer.SetFocus()
		Thisform.NewItem()
		
	ENDPROC

	PROCEDURE cmdNew.Refresh
		local lcText
		This.Enabled = Thisform.lAllowAnyFileType or ;
			(not empty(Thisform.cSelectedType) and ;
			not inlist(Thisform.cSelectedType, FILETYPE_APILIB, FILETYPE_APPLICATION, ;
			FILETYPE_OTHER))
		if Thisform.cSelectedType = FILETYPE_CLASS
			lcText = 'Create a new class'
		else
			lcText = 'Create a new file and add it to the project'
		endif Thisform.cSelectedType = FILETYPE_CLASS
		store lcText to This.StatusBarText, This.ToolTipText
		
	ENDPROC

	PROCEDURE cmdRemove.Click
		Thisform.oTreeViewContainer.SetFocus()
		Thisform.RemoveItem()
		
	ENDPROC

	PROCEDURE cmdRemove.Refresh
		This.Enabled = vartype(Thisform.oItem) = 'O' and Thisform.oItem.CanRemove
		
	ENDPROC

	PROCEDURE cmdRun.Click
		Thisform.oTreeViewContainer.SetFocus()
		Thisform.RunItem()
		
	ENDPROC

	PROCEDURE cmdRun.Refresh
		This.Enabled = vartype(Thisform.oItem) = 'O' and Thisform.oItem.CanRun
		
	ENDPROC

ENDDEFINE

DEFINE CLASS projectexplorervfpnametextbox AS projectexplorertextbox OF "projectexplorerctrls.vcx" 
 	*< CLASSDATA: Baseclass="textbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	Name = "projectexplorervfpnametextbox"
	
	PROCEDURE KeyPress
		* Don't allow invalid characters.
		
		lparameters tnKeyCode, ;
			tnShiftAltCtrl
		lcChar = chr(tnKeyCode)
		if between(tnKeyCode, 32, 122) and not (isalpha(lcChar) or ;
			(This.SelStart > 0 and isdigit(lcChar)) or lcChar = '_')
			nodefault
		endif between(tnKeyCode, 32, 122) ...
		
	ENDPROC

ENDDEFINE

DEFINE CLASS projectexplorerwindowmanager AS projectexplorercustom OF "projectexplorerctrls.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "projectexplorer.h"
	*<DefinedPropArrayMethod>
		*m: findidewindow		&& Finds the specified VFP IDE window
		*m: setbinding		&& Sets up binding to the window with the specified caption
		*m: windowdestroyevent		&& Raised when a window is destroyed
		*m: windoweventhandler		&& Handles the window event
		*p: noldproc		&& The previous Windows event handler
	*</DefinedPropArrayMethod>

	Name = "projectexplorerwindowmanager"
	noldproc = 0		&& The previous Windows event handler
	_memberdata = <VFPData>
		<memberdata name="windoweventhandler" display="WindowEventHandler"/>
		<memberdata name="windowdestroyevent" display="WindowDestroyEvent"/>
		<memberdata name="noldproc" display="nOldProc"/>
		<memberdata name="findidewindow" display="FindIDEWindow"/>
		<memberdata name="setbinding" display="SetBinding"/>
		</VFPData>
	
	PROCEDURE findidewindow		&& Finds the specified VFP IDE window
		*==============================================================================
		* Method:			FindIDEWindow
		* Status:			Public
		* Purpose:			Finds the specified VFP IDE window
		* Author:			Doug Hennig
		* Last Revision:	03/03/2017
		* Parameters:		tcCaption - the caption for the window to find
		* Returns:			the handle for the specified window if it's found or 0 if
		*						not
		* Environment in:	none
		* Environment out:	Windows API functions are declared (note that we do this
		*						everytime rather than in Init because someone may use
		*						CLEAR DLLS)
		*==============================================================================
		
		lparameters tcCaption
		local lnhWnd, ;
			lnhChild, ;
			lcCaption
		declare integer FindWindowEx in Win32API;
			integer, integer, string, string
		declare integer GetWindowText in Win32API ;
			integer, string @, integer
		lnhWnd   = _screen.hWnd
		lnhChild = 0
		do while .T.
			lnhChild = FindWindowEx(lnhWnd, lnhChild, 0, 0)
			if lnhChild = 0
				exit
			endif lnhChild = 0
			lcCaption = space(80)
			GetWindowText(lnhChild, @lcCaption, len(lcCaption))
			lcCaption = upper(left(lcCaption, at(chr(0), lcCaption) - 1))
			if lcCaption = upper(tcCaption)
				exit
			endif lcCaption = upper(tcCaption)
		enddo while .T.
		return lnhChild
		
	ENDPROC

	PROCEDURE Init
		* Save the existing Windows event handler.
		
		declare integer GetWindowLong in Win32API ;
			integer hWnd, integer nIndex
		This.nOldProc = GetWindowLong(_screen.hWnd, GWL_WNDPROC)
		
	ENDPROC

	PROCEDURE releasemembers
		* Unbind all windows message events.
		
		unbindevents(0)
		
	ENDPROC

	PROCEDURE setbinding		&& Sets up binding to the window with the specified caption
		*==============================================================================
		* Method:			SetBinding
		* Status:			Public
		* Purpose:			Sets up binding to the window with the specified caption
		* Author:			Doug Hennig
		* Last Revision:	03/03/2017
		* Parameters:		tcCaption - the caption for the window to find
		* Returns:			the handle for the specified window if it's found or 0 if
		*						not
		* Environment in:	none
		* Environment out:	if the window is found, its Destroy event is bound to our
		*						WindowEventHandler method
		*==============================================================================
		
		lparameters tcCaption
		lnhWnd = This.FindIDEWindow(tcCaption)
		if lnhWnd > 0
			bindevent(lnhWnd, WM_DESTROY, This, 'WindowEventHandler')
		endif lnhWnd > 0
		return lnhWnd
		
	ENDPROC

	PROCEDURE windowdestroyevent		&& Raised when a window is destroyed
		*==============================================================================
		* Method:			WindowDestroyEvent
		* Status:			Public
		* Purpose:			Raised when a window is destroyed
		* Author:			Doug Hennig
		* Last Revision:	03/03/2017
		* Parameters:		hWnd - the handle of the window
		* Returns:			.T.
		* Environment in:	none
		* Environment out:	none
		*==============================================================================
		
		* This method only exists so it can be raised as an event.
		
		lparameters hWnd
		
	ENDPROC

	PROCEDURE windoweventhandler		&& Handles the window event
		*==============================================================================
		* Method:			WindowEventHandler
		* Status:			Public
		* Purpose:			Handles the window event
		* Author:			Doug Hennig
		* Last Revision:	03/03/2017
		* Parameters:		hWnd   - the handle of the window
		*					Msg    - the message number
		*					wParam - additional parameter
		*					lParam - additional parameter
		* Returns:			the return value of CallWindowProc
		* Environment in:	This.nOldProc contains the handle of the previous event
		*						handler
		* Environment out:	the WindowDestroyEvent was raised
		*					CallWindowProc is called to pass the call along
		*					Windows API functions are declared (note that we do this
		*						everytime rather than in Init because someone may use
		*						CLEAR DLLS)
		*==============================================================================
		
		lparameters hWnd, ;
			Msg, ;
			wParam, ;
			lParam
		declare integer CallWindowProc in Win32API ;
			integer lpPrevWndFunc, integer hWnd, integer Msg, integer wParam, ;
			integer lParam
		
		* Raise the window destroy event
		
		raiseevent(This, 'WindowDestroyEvent', hWnd)
		
		* Pass the message on.
		
		return CallWindowProc(This.nOldProc, hWnd, Msg, wParam, lParam)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS projectinfo AS projectexplorerpropertiescontainer OF "projectexplorerexplorer.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="pgfProperties" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.projectexplorerpage1.lblAuthor" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.projectexplorerpage1.txtAuthor" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.projectexplorerpage1.lblCompany" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.projectexplorerpage1.txtCompany" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.projectexplorerpage1.lblAddress" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.projectexplorerpage1.lblHome" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.projectexplorerpage1.lblProject" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.projectexplorerpage1.txtProject" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.projectexplorerpage1.txtAddress" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.projectexplorerpage1.txtHome" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.projectexplorerpage1.lblCity" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.projectexplorerpage1.txtCity" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.projectexplorerpage1.lblRegion" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.projectexplorerpage1.txtRegion" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.projectexplorerpage1.lblCountry" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.projectexplorerpage1.txtCountry" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.projectexplorerpage1.lblPostalCode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.projectexplorerpage1.txtPostalCode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.projectexplorerpage1.chkDebug" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.projectexplorerpage1.chkEncrypted" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.projectexplorerpage1.chkIcon" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.projectexplorerpage1.imgIcon" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.projectexplorerpage1.lblLastBuilt" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.projectexplorerpage1.txtLastBuilt" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.projectexplorerpage1.chkProjectHook" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.projectexplorerpage1.txtProjectHook" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.projectexplorerpage1.cmdProjectHook" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.projectexplorerpage1.edtUser" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.projectexplorerpage1.lblUser" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Projectexplorerpage2.ctrVersionInfo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Projectexplorerpage2.ctrVersionNumber" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Projectexplorerpage2.chkAutoIncrement" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Projectexplorerpage2.txtMajorVersion" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Projectexplorerpage2.txtMinorVersion" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Projectexplorerpage2.txtBuildVersion" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Projectexplorerpage2.lblBuildVersion" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Projectexplorerpage2.lblMinorVersion" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Projectexplorerpage2.lblVersionCompany" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Projectexplorerpage2.txtVersionCompany" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Projectexplorerpage2.lblVersionComments" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Projectexplorerpage2.txtVersionComments" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Projectexplorerpage2.lblVersionProduct" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Projectexplorerpage2.txtVersionProduct" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Projectexplorerpage2.lblVersionDescription" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Projectexplorerpage2.txtVersionDescription" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Projectexplorerpage2.lblVersionCopyright" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Projectexplorerpage2.txtVersionCopyright" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Projectexplorerpage2.lblVersionTrademarks" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Projectexplorerpage2.txtVersionTrademarks" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Projectexplorerpage2.lblVersionLanguage" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Projectexplorerpage2.txtVersionLanguage" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Projectexplorerpage2.lblMajorVersion" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Projectexplorerpage3.cntClasses" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Projectexplorerpage3.lstClasses" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Projectexplorerpage3.lblLibrary" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Projectexplorerpage3.txtLibrary" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Projectexplorerpage3.lblName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Projectexplorerpage3.txtName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Projectexplorerpage3.lblInstancing" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Projectexplorerpage3.cboInstancing" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Projectexplorerpage3.lblDescription" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Projectexplorerpage3.txtDescription" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Projectexplorerpage3.cntHelp" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Projectexplorerpage3.lblHelpID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Projectexplorerpage3.txtHelpID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Projectexplorerpage3.lblProjectName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Projectexplorerpage3.txtProjectName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Projectexplorerpage3.lblTypelibDesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties.Projectexplorerpage3.txtTypelibDesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdRevert" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdSave" UniqueID="" Timestamp="" />

	#INCLUDE "projectexplorer.h"
	*<DefinedPropArrayMethod>
		*m: getservers		&& Gets the COM servers for the project
	*</DefinedPropArrayMethod>

	Anchor = 13
	BackColor = 240,240,240
	Height = 468
	Name = "projectinfo"
	Width = 482
	_memberdata = <VFPData>
		<memberdata name="getservers" display="GetServers"/>
		</VFPData>

	ADD OBJECT 'cmdRevert' AS projectexplorercommandbutton WITH ;
		Anchor = 36, ;
		Caption = "Revert", ;
		Left = 241, ;
		lnotifyonformchange = .T., ;
		Name = "cmdRevert", ;
		Top = 400, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdSave' AS projectexplorercommandbutton WITH ;
		Anchor = 132, ;
		Caption = "Save", ;
		Left = 156, ;
		lnotifyonformchange = .T., ;
		Name = "cmdSave", ;
		Top = 400, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'pgfProperties' AS projectexplorerpageframe WITH ;
		ErasePage = .T., ;
		Height = 470, ;
		Left = 0, ;
		Name = "pgfProperties", ;
		PageCount = 3, ;
		Top = 0, ;
		Width = 490, ;
		ZOrderSet = 0, ;
		projectexplorerpage1.Caption = "Project Settings", ;
		projectexplorerpage1.Name = "projectexplorerpage1", ;
		Projectexplorerpage2.BackColor = 255,255,255, ;
		Projectexplorerpage2.Caption = "Build Settings", ;
		Projectexplorerpage2.Name = "Projectexplorerpage2", ;
		Projectexplorerpage3.BackColor = 255,255,255, ;
		Projectexplorerpage3.Caption = "Servers", ;
		Projectexplorerpage3.Name = "Projectexplorerpage3"
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="pageframe" />

	ADD OBJECT 'pgfProperties.projectexplorerpage1.chkDebug' AS projectexplorercheckbox WITH ;
		Alignment = 0, ;
		Caption = "De\<bug info", ;
		ControlSource = "Thisform.oProjectSettings.Debug", ;
		lbindtoformanychange = .T., ;
		Left = 233, ;
		Name = "chkDebug", ;
		TabIndex = 26, ;
		Top = 280, ;
		ZOrderSet = 16
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="checkbox" />

	ADD OBJECT 'pgfProperties.projectexplorerpage1.chkEncrypted' AS projectexplorercheckbox WITH ;
		Alignment = 0, ;
		Caption = "\<Encrypted", ;
		ControlSource = "Thisform.oProjectSettings.Encrypted", ;
		lbindtoformanychange = .T., ;
		Left = 233, ;
		Name = "chkEncrypted", ;
		TabIndex = 27, ;
		Top = 300, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="checkbox" />

	ADD OBJECT 'pgfProperties.projectexplorerpage1.chkIcon' AS projectexplorercheckbox WITH ;
		Alignment = 0, ;
		Caption = "A\<ttach icon", ;
		ControlSource = "Thisform.oProjectSettings.AttachIcon", ;
		lbindtoformanychange = .T., ;
		Left = 333, ;
		Name = "chkIcon", ;
		TabIndex = 28, ;
		Top = 280, ;
		ZOrderSet = 18
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="checkbox" />

	ADD OBJECT 'pgfProperties.projectexplorerpage1.chkProjectHook' AS projectexplorercheckbox WITH ;
		Alignment = 0, ;
		Caption = "Pro\<ject hook", ;
		lbindtoformanychange = .T., ;
		Left = 8, ;
		Name = "chkProjectHook", ;
		TabIndex = 21, ;
		Top = 253, ;
		ZOrderSet = 22
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="checkbox" />

	ADD OBJECT 'pgfProperties.projectexplorerpage1.cmdProjectHook' AS projectexplorertoolbarbutton WITH ;
		Anchor = 8, ;
		Caption = "...", ;
		Left = 451, ;
		Name = "cmdProjectHook", ;
		SpecialEffect = 0, ;
		TabIndex = 23, ;
		Top = 250, ;
		ZOrderSet = 25
		*< END OBJECT: ClassLib="projectexplorerbutton.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'pgfProperties.projectexplorerpage1.edtUser' AS projectexplorereditbox WITH ;
		Anchor = 10, ;
		ControlSource = "Thisform.oProjectSettings.User", ;
		czoomformcaption = User, ;
		Height = 64, ;
		IntegralHeight = .F., ;
		lbindtoformanychange = .T., ;
		lcanzoom = .T., ;
		Left = 63, ;
		Name = "edtUser", ;
		TabIndex = 20, ;
		Top = 183, ;
		Width = 410
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="editbox" />

	ADD OBJECT 'pgfProperties.projectexplorerpage1.imgIcon' AS projectexplorerimage WITH ;
		Height = 16, ;
		Left = 428, ;
		Name = "imgIcon", ;
		Top = 280, ;
		Width = 16, ;
		ZOrderSet = 19
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="image" />

	ADD OBJECT 'pgfProperties.projectexplorerpage1.lblAddress' AS projectexplorerlabel WITH ;
		Caption = "A\<ddress", ;
		Left = 8, ;
		Name = "lblAddress", ;
		TabIndex = 7, ;
		Top = 86, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'pgfProperties.projectexplorerpage1.lblAuthor' AS projectexplorerlabel WITH ;
		Caption = "\<Author", ;
		Left = 8, ;
		Name = "lblAuthor", ;
		TabIndex = 3, ;
		Top = 36, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'pgfProperties.projectexplorerpage1.lblCity' AS projectexplorerlabel WITH ;
		Caption = "C\<ity", ;
		Left = 8, ;
		Name = "lblCity", ;
		TabIndex = 9, ;
		Top = 111, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'pgfProperties.projectexplorerpage1.lblCompany' AS projectexplorerlabel WITH ;
		Anchor = 0, ;
		Caption = "\<Company", ;
		Left = 8, ;
		Name = "lblCompany", ;
		TabIndex = 5, ;
		Top = 61, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'pgfProperties.projectexplorerpage1.lblCountry' AS projectexplorerlabel WITH ;
		Caption = "C\<ountry", ;
		Left = 8, ;
		Name = "lblCountry", ;
		TabIndex = 13, ;
		Top = 136, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'pgfProperties.projectexplorerpage1.lblHome' AS projectexplorerlabel WITH ;
		Caption = "Home", ;
		FontUnderline = .T., ;
		ForeColor = 0,0,255, ;
		Left = 8, ;
		MousePointer = 15, ;
		Name = "lblHome", ;
		TabIndex = 17, ;
		Top = 161, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'pgfProperties.projectexplorerpage1.lblLastBuilt' AS projectexplorerlabel WITH ;
		Caption = "Last built", ;
		Left = 8, ;
		Name = "lblLastBuilt", ;
		TabIndex = 24, ;
		Top = 283, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'pgfProperties.projectexplorerpage1.lblPostalCode' AS projectexplorerlabel WITH ;
		Anchor = 8, ;
		Caption = "\<Postal code", ;
		Left = 243, ;
		Name = "lblPostalCode", ;
		TabIndex = 15, ;
		Top = 136, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'pgfProperties.projectexplorerpage1.lblProject' AS projectexplorerlabel WITH ;
		Caption = "Project", ;
		Left = 8, ;
		Name = "lblProject", ;
		TabIndex = 1, ;
		Top = 11, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'pgfProperties.projectexplorerpage1.lblRegion' AS projectexplorerlabel WITH ;
		Anchor = 8, ;
		Caption = "\<Region", ;
		Left = 243, ;
		Name = "lblRegion", ;
		TabIndex = 11, ;
		Top = 111, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'pgfProperties.projectexplorerpage1.lblUser' AS projectexplorerlabel WITH ;
		Caption = "\<User", ;
		Left = 8, ;
		Name = "lblUser", ;
		TabIndex = 19, ;
		Top = 183
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'pgfProperties.projectexplorerpage1.txtAddress' AS projectexplorertextbox WITH ;
		Anchor = 10, ;
		ControlSource = "Thisform.oProjectSettings.Address", ;
		Height = 22, ;
		lbindtoformanychange = .T., ;
		Left = 63, ;
		MaxLength = 46, ;
		Name = "txtAddress", ;
		TabIndex = 8, ;
		Top = 83, ;
		Width = 410, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />

	ADD OBJECT 'pgfProperties.projectexplorerpage1.txtAuthor' AS projectexplorertextbox WITH ;
		Anchor = 10, ;
		ControlSource = "Thisform.oProjectSettings.Author", ;
		Height = 22, ;
		lbindtoformanychange = .T., ;
		Left = 63, ;
		MaxLength = 46, ;
		Name = "txtAuthor", ;
		TabIndex = 4, ;
		Top = 33, ;
		Width = 410, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />

	ADD OBJECT 'pgfProperties.projectexplorerpage1.txtCity' AS projectexplorertextbox WITH ;
		Anchor = 10, ;
		ControlSource = "Thisform.oProjectSettings.City", ;
		Height = 22, ;
		lbindtoformanychange = .T., ;
		Left = 63, ;
		MaxLength = 21, ;
		Name = "txtCity", ;
		TabIndex = 10, ;
		Top = 108, ;
		Width = 170, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />

	ADD OBJECT 'pgfProperties.projectexplorerpage1.txtCompany' AS projectexplorertextbox WITH ;
		Anchor = 10, ;
		ControlSource = "Thisform.oProjectSettings.Company", ;
		Height = 22, ;
		lbindtoformanychange = .T., ;
		Left = 63, ;
		MaxLength = 46, ;
		Name = "txtCompany", ;
		TabIndex = 6, ;
		Top = 58, ;
		Width = 410, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />

	ADD OBJECT 'pgfProperties.projectexplorerpage1.txtCountry' AS projectexplorertextbox WITH ;
		Anchor = 10, ;
		ControlSource = "Thisform.oProjectSettings.Country", ;
		Height = 22, ;
		lbindtoformanychange = .T., ;
		Left = 63, ;
		MaxLength = 46, ;
		Name = "txtCountry", ;
		TabIndex = 14, ;
		Top = 133, ;
		Width = 170, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />

	ADD OBJECT 'pgfProperties.projectexplorerpage1.txtHome' AS projectexplorertextbox WITH ;
		Anchor = 10, ;
		ControlSource = "Thisform.oProjectSettings.Home", ;
		Height = 22, ;
		Left = 63, ;
		Name = "txtHome", ;
		ReadOnly = .T., ;
		TabIndex = 18, ;
		Top = 158, ;
		Width = 410, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />

	ADD OBJECT 'pgfProperties.projectexplorerpage1.txtLastBuilt' AS projectexplorertextbox WITH ;
		ControlSource = "Thisform.oProjectSettings.LastBuilt", ;
		Height = 22, ;
		Left = 63, ;
		Name = "txtLastBuilt", ;
		ReadOnly = .T., ;
		TabIndex = 25, ;
		Top = 280, ;
		Width = 150, ;
		ZOrderSet = 21
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />

	ADD OBJECT 'pgfProperties.projectexplorerpage1.txtPostalCode' AS projectexplorertextbox WITH ;
		Anchor = 8, ;
		ControlSource = "Thisform.oProjectSettings.PostalCode", ;
		Height = 22, ;
		lbindtoformanychange = .T., ;
		Left = 318, ;
		MaxLength = 11, ;
		Name = "txtPostalCode", ;
		TabIndex = 16, ;
		Top = 133, ;
		Width = 155, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />

	ADD OBJECT 'pgfProperties.projectexplorerpage1.txtProject' AS projectexplorertextbox WITH ;
		Anchor = 10, ;
		ControlSource = "Thisform.oProjectSettings.Project", ;
		Height = 22, ;
		Left = 63, ;
		Name = "txtProject", ;
		ReadOnly = .T., ;
		TabIndex = 2, ;
		Top = 8, ;
		Width = 410, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />

	ADD OBJECT 'pgfProperties.projectexplorerpage1.txtProjectHook' AS projectexplorertextbox WITH ;
		Anchor = 10, ;
		Height = 22, ;
		Left = 108, ;
		Name = "txtProjectHook", ;
		ReadOnly = .T., ;
		TabIndex = 22, ;
		Top = 250, ;
		Width = 343, ;
		ZOrderSet = 23
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />

	ADD OBJECT 'pgfProperties.projectexplorerpage1.txtRegion' AS projectexplorertextbox WITH ;
		Anchor = 8, ;
		ControlSource = "Thisform.oProjectSettings.Region", ;
		Height = 22, ;
		lbindtoformanychange = .T., ;
		Left = 318, ;
		MaxLength = 6, ;
		Name = "txtRegion", ;
		TabIndex = 12, ;
		Top = 108, ;
		Width = 155, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />

	ADD OBJECT 'pgfProperties.Projectexplorerpage2.chkAutoIncrement' AS projectexplorercheckbox WITH ;
		Alignment = 0, ;
		Caption = "Auto increment", ;
		ControlSource = "Thisform.oProjectSettings.AutoIncrement", ;
		lbindtoformanychange = .T., ;
		Left = 22, ;
		Name = "chkAutoIncrement", ;
		TabIndex = 23, ;
		Top = 289, ;
		ZOrderSet = 26
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="checkbox" />

	ADD OBJECT 'pgfProperties.Projectexplorerpage2.ctrVersionInfo' AS projectexplorerlabelledbox WITH ;
		Anchor = 10, ;
		Height = 200, ;
		Left = 7, ;
		Name = "ctrVersionInfo", ;
		TabIndex = 1, ;
		Top = 8, ;
		Width = 467, ;
		ZOrderSet = 0, ;
		lblLabel.Caption = " Version information ", ;
		lblLabel.Name = "lblLabel", ;
		shpBox.Height = 194, ;
		shpBox.Name = "shpBox", ;
		shpBox.Width = 467
		*< END OBJECT: ClassLib="projectexplorerlabelledbox.vcx" BaseClass="container" />

	ADD OBJECT 'pgfProperties.Projectexplorerpage2.ctrVersionNumber' AS projectexplorerlabelledbox WITH ;
		Anchor = 0, ;
		Height = 100, ;
		Left = 7, ;
		Name = "ctrVersionNumber", ;
		TabIndex = 16, ;
		Top = 219, ;
		Width = 175, ;
		ZOrderSet = 1, ;
		lblLabel.Caption = " Version number ", ;
		lblLabel.Name = "lblLabel", ;
		shpBox.Height = 94, ;
		shpBox.Name = "shpBox", ;
		shpBox.Width = 175
		*< END OBJECT: ClassLib="projectexplorerlabelledbox.vcx" BaseClass="container" />

	ADD OBJECT 'pgfProperties.Projectexplorerpage2.lblBuildVersion' AS projectexplorerlabel WITH ;
		Caption = "Build", ;
		Left = 122, ;
		Name = "lblBuildVersion", ;
		TabIndex = 19, ;
		Top = 244, ;
		ZOrderSet = 31
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'pgfProperties.Projectexplorerpage2.lblMajorVersion' AS projectexplorerlabel WITH ;
		Caption = "Major", ;
		Left = 22, ;
		Name = "lblMajorVersion", ;
		TabIndex = 17, ;
		Top = 244, ;
		ZOrderSet = 30
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'pgfProperties.Projectexplorerpage2.lblMinorVersion' AS projectexplorerlabel WITH ;
		Caption = "Minor", ;
		Left = 72, ;
		Name = "lblMinorVersion", ;
		TabIndex = 18, ;
		Top = 244, ;
		ZOrderSet = 32
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'pgfProperties.Projectexplorerpage2.lblVersionComments' AS projectexplorerlabel WITH ;
		Anchor = 0, ;
		Caption = "Comments", ;
		Left = 12, ;
		Name = "lblVersionComments", ;
		TabIndex = 4, ;
		Top = 56, ;
		ZOrderSet = 35
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'pgfProperties.Projectexplorerpage2.lblVersionCompany' AS projectexplorerlabel WITH ;
		Caption = "Company", ;
		Left = 12, ;
		Name = "lblVersionCompany", ;
		TabIndex = 2, ;
		Top = 31, ;
		ZOrderSet = 33
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'pgfProperties.Projectexplorerpage2.lblVersionCopyright' AS projectexplorerlabel WITH ;
		Caption = "Copyright", ;
		Left = 12, ;
		Name = "lblVersionCopyright", ;
		TabIndex = 10, ;
		Top = 131, ;
		ZOrderSet = 41
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'pgfProperties.Projectexplorerpage2.lblVersionDescription' AS projectexplorerlabel WITH ;
		Caption = "Description", ;
		Left = 12, ;
		Name = "lblVersionDescription", ;
		TabIndex = 8, ;
		Top = 106, ;
		ZOrderSet = 39
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'pgfProperties.Projectexplorerpage2.lblVersionLanguage' AS projectexplorerlabel WITH ;
		Caption = "Language", ;
		Left = 12, ;
		Name = "lblVersionLanguage", ;
		TabIndex = 14, ;
		Top = 181, ;
		ZOrderSet = 45
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'pgfProperties.Projectexplorerpage2.lblVersionProduct' AS projectexplorerlabel WITH ;
		Caption = "Product", ;
		Left = 12, ;
		Name = "lblVersionProduct", ;
		TabIndex = 6, ;
		Top = 81, ;
		ZOrderSet = 37
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'pgfProperties.Projectexplorerpage2.lblVersionTrademarks' AS projectexplorerlabel WITH ;
		Caption = "Trademarks", ;
		Left = 12, ;
		Name = "lblVersionTrademarks", ;
		TabIndex = 12, ;
		Top = 156, ;
		ZOrderSet = 43
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'pgfProperties.Projectexplorerpage2.txtBuildVersion' AS projectexplorertextbox WITH ;
		ControlSource = "Thisform.oProjectSettings.BuildNumber", ;
		Height = 22, ;
		InputMask = "9999", ;
		lbindtoformanychange = .T., ;
		Left = 122, ;
		MaxLength = 4, ;
		Name = "txtBuildVersion", ;
		TabIndex = 22, ;
		Top = 259, ;
		Width = 45, ;
		ZOrderSet = 29
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />

	ADD OBJECT 'pgfProperties.Projectexplorerpage2.txtMajorVersion' AS projectexplorertextbox WITH ;
		ControlSource = "Thisform.oProjectSettings.MajorVersionNumber", ;
		Height = 22, ;
		InputMask = "9999", ;
		lbindtoformanychange = .T., ;
		Left = 22, ;
		MaxLength = 4, ;
		Name = "txtMajorVersion", ;
		TabIndex = 20, ;
		Top = 259, ;
		Width = 45, ;
		ZOrderSet = 27
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />

	ADD OBJECT 'pgfProperties.Projectexplorerpage2.txtMinorVersion' AS projectexplorertextbox WITH ;
		ControlSource = "Thisform.oProjectSettings.MinorVersionNumber", ;
		Height = 22, ;
		InputMask = "9999", ;
		lbindtoformanychange = .T., ;
		Left = 72, ;
		MaxLength = 4, ;
		Name = "txtMinorVersion", ;
		TabIndex = 21, ;
		Top = 259, ;
		Width = 45, ;
		ZOrderSet = 28
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />

	ADD OBJECT 'pgfProperties.Projectexplorerpage2.txtVersionComments' AS projectexplorertextbox WITH ;
		Anchor = 10, ;
		ControlSource = "Thisform.oProjectSettings.VersionComments", ;
		Height = 22, ;
		lbindtoformanychange = .T., ;
		Left = 82, ;
		Name = "txtVersionComments", ;
		TabIndex = 5, ;
		Top = 53, ;
		Width = 382, ;
		ZOrderSet = 36
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />

	ADD OBJECT 'pgfProperties.Projectexplorerpage2.txtVersionCompany' AS projectexplorertextbox WITH ;
		Anchor = 10, ;
		ControlSource = "Thisform.oProjectSettings.VersionCompany", ;
		Height = 22, ;
		lbindtoformanychange = .T., ;
		Left = 82, ;
		Name = "txtVersionCompany", ;
		TabIndex = 3, ;
		Top = 28, ;
		Width = 382, ;
		ZOrderSet = 34
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />

	ADD OBJECT 'pgfProperties.Projectexplorerpage2.txtVersionCopyright' AS projectexplorertextbox WITH ;
		Anchor = 10, ;
		ControlSource = "Thisform.oProjectSettings.VersionCopyright", ;
		Height = 22, ;
		lbindtoformanychange = .T., ;
		Left = 82, ;
		Name = "txtVersionCopyright", ;
		TabIndex = 11, ;
		Top = 128, ;
		Width = 382, ;
		ZOrderSet = 42
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />

	ADD OBJECT 'pgfProperties.Projectexplorerpage2.txtVersionDescription' AS projectexplorertextbox WITH ;
		Anchor = 10, ;
		ControlSource = "Thisform.oProjectSettings.VersionDescription", ;
		Height = 22, ;
		lbindtoformanychange = .T., ;
		Left = 82, ;
		Name = "txtVersionDescription", ;
		TabIndex = 9, ;
		Top = 103, ;
		Width = 382, ;
		ZOrderSet = 40
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />

	ADD OBJECT 'pgfProperties.Projectexplorerpage2.txtVersionLanguage' AS projectexplorertextbox WITH ;
		Anchor = 10, ;
		ControlSource = "Thisform.oProjectSettings.VersionLanguage", ;
		Height = 22, ;
		lbindtoformanychange = .T., ;
		Left = 82, ;
		Name = "txtVersionLanguage", ;
		TabIndex = 15, ;
		Top = 178, ;
		Width = 382, ;
		ZOrderSet = 46
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />

	ADD OBJECT 'pgfProperties.Projectexplorerpage2.txtVersionProduct' AS projectexplorertextbox WITH ;
		Anchor = 10, ;
		ControlSource = "Thisform.oProjectSettings.VersionProduct", ;
		Height = 22, ;
		lbindtoformanychange = .T., ;
		Left = 82, ;
		Name = "txtVersionProduct", ;
		TabIndex = 7, ;
		Top = 78, ;
		Width = 382, ;
		ZOrderSet = 38
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />

	ADD OBJECT 'pgfProperties.Projectexplorerpage2.txtVersionTrademarks' AS projectexplorertextbox WITH ;
		Anchor = 10, ;
		ControlSource = "Thisform.oProjectSettings.VersionTrademarks", ;
		Height = 22, ;
		lbindtoformanychange = .T., ;
		Left = 82, ;
		Name = "txtVersionTrademarks", ;
		TabIndex = 13, ;
		Top = 153, ;
		Width = 382, ;
		ZOrderSet = 44
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />

	ADD OBJECT 'pgfProperties.Projectexplorerpage3.cboInstancing' AS projectexplorercombobox WITH ;
		Anchor = 10, ;
		lbindtoformanychange = .T., ;
		Left = 246, ;
		Name = "cboInstancing", ;
		RowSource = "Not Creatable,Single Use,Multi Use", ;
		RowSourceType = 1, ;
		TabIndex = 8, ;
		Top = 82, ;
		Width = 220
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="combobox" />

	ADD OBJECT 'pgfProperties.Projectexplorerpage3.cntClasses' AS projectexplorerlabelledbox WITH ;
		Height = 221, ;
		Left = 8, ;
		Name = "cntClasses", ;
		TabIndex = 1, ;
		Top = 8, ;
		Width = 467, ;
		ZOrderSet = 0, ;
		lblLabel.Caption = " Server \<classes ", ;
		lblLabel.Name = "lblLabel", ;
		shpBox.Height = 215, ;
		shpBox.Name = "shpBox", ;
		shpBox.Width = 467
		*< END OBJECT: ClassLib="projectexplorerlabelledbox.vcx" BaseClass="container" />

	ADD OBJECT 'pgfProperties.Projectexplorerpage3.cntHelp' AS projectexplorerfile WITH ;
		Anchor = 14, ;
		ccontrolsource = Thisform.oProjectSettings.ServerHelpFile, ;
		cextensions = 'Help File (*.chm), *.chm', ;
		Height = 23, ;
		lbindtoformanychange = .T., ;
		Left = 14, ;
		Name = "cntHelp", ;
		TabIndex = 13, ;
		Top = 244, ;
		Width = 460, ;
		cmdGetFile.Left = 437, ;
		cmdGetFile.Name = "cmdGetFile", ;
		cmdGetFile.Top = 0, ;
		lblFile.Caption = "Help \<file", ;
		lblFile.Name = "lblFile", ;
		txtFile.Height = 22, ;
		txtFile.Left = 110, ;
		txtFile.Name = "txtFile", ;
		txtFile.Top = 0, ;
		txtFile.Width = 327
		*< END OBJECT: ClassLib="projectexplorerfilectrls.vcx" BaseClass="container" />

	ADD OBJECT 'pgfProperties.Projectexplorerpage3.lblDescription' AS projectexplorerlabel WITH ;
		Caption = "\<Description", ;
		Left = 146, ;
		Name = "lblDescription", ;
		TabIndex = 9, ;
		Top = 112
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'pgfProperties.Projectexplorerpage3.lblHelpID' AS projectexplorerlabel WITH ;
		Caption = "Help conte\<xt ID", ;
		Left = 146, ;
		Name = "lblHelpID", ;
		TabIndex = 11, ;
		Top = 137
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'pgfProperties.Projectexplorerpage3.lblInstancing' AS projectexplorerlabel WITH ;
		Caption = "\<Instancing", ;
		Left = 146, ;
		Name = "lblInstancing", ;
		TabIndex = 7, ;
		Top = 86
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'pgfProperties.Projectexplorerpage3.lblLibrary' AS projectexplorerlabel WITH ;
		Caption = "Class library", ;
		Left = 146, ;
		Name = "lblLibrary", ;
		TabIndex = 3, ;
		Top = 35
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'pgfProperties.Projectexplorerpage3.lblName' AS projectexplorerlabel WITH ;
		Caption = "Class name", ;
		Left = 146, ;
		Name = "lblName", ;
		TabIndex = 5, ;
		Top = 60
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'pgfProperties.Projectexplorerpage3.lblProjectName' AS projectexplorerlabel WITH ;
		Anchor = 4, ;
		Caption = "\<Project name", ;
		Left = 14, ;
		Name = "lblProjectName", ;
		TabIndex = 14, ;
		Top = 273
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'pgfProperties.Projectexplorerpage3.lblTypelibDesc' AS projectexplorerlabel WITH ;
		Anchor = 4, ;
		Caption = "\<Typelib description", ;
		Left = 14, ;
		Name = "lblTypelibDesc", ;
		TabIndex = 16, ;
		Top = 298
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'pgfProperties.Projectexplorerpage3.lstClasses' AS projectexplorerlistbox WITH ;
		Anchor = 5, ;
		Height = 180, ;
		IntegralHeight = .F., ;
		Left = 19, ;
		lrequeryoninit = .F., ;
		Name = "lstClasses", ;
		TabIndex = 2, ;
		Top = 34, ;
		Width = 120, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="listbox" />

	ADD OBJECT 'pgfProperties.Projectexplorerpage3.txtDescription' AS projectexplorertextbox WITH ;
		Anchor = 10, ;
		lbindtoformanychange = .T., ;
		Left = 246, ;
		Name = "txtDescription", ;
		TabIndex = 10, ;
		Top = 109, ;
		Width = 220
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />

	ADD OBJECT 'pgfProperties.Projectexplorerpage3.txtHelpID' AS projectexplorertextbox WITH ;
		Alignment = 3, ;
		Anchor = 10, ;
		Height = 22, ;
		lbindtoformanychange = .T., ;
		Left = 246, ;
		Name = "txtHelpID", ;
		TabIndex = 12, ;
		Top = 134, ;
		Value = 0, ;
		Width = 63
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />

	ADD OBJECT 'pgfProperties.Projectexplorerpage3.txtLibrary' AS projectexplorertextbox WITH ;
		Anchor = 10, ;
		Height = 22, ;
		Left = 246, ;
		Name = "txtLibrary", ;
		ReadOnly = .T., ;
		TabIndex = 4, ;
		Top = 32, ;
		Width = 220
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />

	ADD OBJECT 'pgfProperties.Projectexplorerpage3.txtName' AS projectexplorertextbox WITH ;
		Anchor = 10, ;
		Left = 246, ;
		Name = "txtName", ;
		ReadOnly = .T., ;
		TabIndex = 6, ;
		Top = 57, ;
		Width = 220
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />

	ADD OBJECT 'pgfProperties.Projectexplorerpage3.txtProjectName' AS projectexplorervfpnametextbox WITH ;
		Anchor = 14, ;
		ControlSource = "Thisform.oProjectSettings.ServerProject", ;
		Height = 22, ;
		lbindtoformanychange = .T., ;
		Left = 124, ;
		Name = "txtProjectName", ;
		TabIndex = 15, ;
		Top = 270, ;
		Width = 350
		*< END OBJECT: ClassLib="projectexplorerui.vcx" BaseClass="textbox" />

	ADD OBJECT 'pgfProperties.Projectexplorerpage3.txtTypelibDesc' AS projectexplorertextbox WITH ;
		Anchor = 14, ;
		ControlSource = "Thisform.oProjectSettings.TypeLibDesc", ;
		Height = 22, ;
		lbindtoformanychange = .T., ;
		Left = 124, ;
		Name = "txtTypelibDesc", ;
		TabIndex = 17, ;
		Top = 295, ;
		Width = 350
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />
	
	PROCEDURE getservers		&& Gets the COM servers for the project
		*==============================================================================
		* Method:			GetServers
		* Status:			Public
		* Purpose:			Gets the COM servers for the project
		* Author:			Doug Hennig
		* Last Revision:	04/04/2017
		* Parameters:		none
		* Returns:			.T.
		* Environment in:	Thisform.oProjectSettings contains a reference to a
		*						ProjectSettings object
		* Environment out:	the list on page 3 displays the servers for the project
		*==============================================================================
		
		local loList, ;
			laServers[1], ;
			lnServers, ;
			lnI
		loList    = This.pgfProperties.Pages[3].lstClasses
		lnServers = Thisform.oProjectSettings.GetServers(@laServers)
		if lnServers > 0
			dimension loList.aItems[lnServers, 2]
			for lnI = 1 to lnServers
				loList.aItems[lnI, 1] = laServers[lnI].ServerClass
				loList.aItems[lnI, 2] = laServers[lnI]
			next lnI
			loList.Enabled = .T.
		else
			dimension loList.aItems[1]
			loList.aItems[1] = ''
			loList.Enabled   = .F.
		endif lnServers > 0
		loList.Requery()
		loList.ListIndex = iif(lnServers > 0, 1, 0)
		
	ENDPROC

	PROCEDURE Refresh
		This.pgfProperties.Pages[1].imgIcon.Picture = Thisform.oProjectSettings.Icon
		
	ENDPROC

	PROCEDURE cmdRevert.Click
		Thisform.Revert()
		
	ENDPROC

	PROCEDURE cmdRevert.onformchange
		This.Refresh()
		
	ENDPROC

	PROCEDURE cmdRevert.Refresh
		This.Enabled = Thisform.lChanged
		
	ENDPROC

	PROCEDURE cmdSave.Click
		Thisform.SaveSettings()
		
	ENDPROC

	PROCEDURE cmdSave.onformchange
		This.Refresh()
		
	ENDPROC

	PROCEDURE cmdSave.Refresh
		This.Enabled = Thisform.lChanged
		
	ENDPROC

	PROCEDURE pgfProperties.projectexplorerpage1.chkIcon.InteractiveChange
		dodefault()
		if not This.Value
			Thisform.oProjectSettings.Icon = ''
		endif not This.Value
		This.Parent.Parent.Parent.Refresh()
		
	ENDPROC

	PROCEDURE pgfProperties.projectexplorerpage1.chkProjectHook.InteractiveChange
		dodefault()
		if not This.Value
			store '' to Thisform.oProjectSettings.ProjectHookClass, ;
				Thisform.oProjectSettings.ProjectHookLibrary
		endif not This.Value
		This.Parent.Refresh()
		
	ENDPROC

	PROCEDURE pgfProperties.projectexplorerpage1.chkProjectHook.Refresh
		if not empty(Thisform.oProjectSettings.ProjectHookClass)
			This.Value = .T.
		endif not empty(Thisform.oProjectSettings.ProjectHookClass)
		
	ENDPROC

	PROCEDURE pgfProperties.projectexplorerpage1.cmdProjectHook.Click
		local laClass[1], ;
			llClass, ;
			loObject, ;
			llOK, ;
			loException as Exception
		if empty(Thisform.oProjectSettings.ProjectHookLibrary)
			llClass = agetclass(laClass)
		else
			llClass = agetclass(laClass, Thisform.oProjectSettings.ProjectHookLibrary, ;
				Thisform.oProjectSettings.ProjectHookClass)
		endif empty(Thisform.oProjectSettings.ProjectHookLibrary)
		if llClass
			try
				loObject = newobject(laClass[2], laClass[1], 0)
				llOK     = lower(loObject.BaseClass) = 'projecthook'
			catch to loException
			endtry
			do case
				case vartype(loException) = 'O'
					Thisform.ShowErrorMessage(loException.Message)
				case llOK
					Thisform.oProjectSettings.ProjectHookLibrary = laClass[1]
					Thisform.oProjectSettings.ProjectHookClass   = laClass[2]
					Thisform.AnyChange()
					This.Parent.Refresh()
				otherwise
					Thisform.ShowErrorMessage('That class is not a ProjectHook.')
			endcase
		endif llClass
		
	ENDPROC

	PROCEDURE pgfProperties.projectexplorerpage1.cmdProjectHook.Refresh
		This.Enabled = This.Parent.chkProjectHook.Value
		
	ENDPROC

	PROCEDURE pgfProperties.projectexplorerpage1.imgIcon.Click
		if This.Parent.chkIcon.Value
			lcImage = getpict('ICO')
			if not empty(lcImage)
				Thisform.oProjectSettings.Icon = lcImage
				Thisform.AnyChange()
				This.Parent.Parent.Parent.Refresh()
			endif not empty(lcImage)
		endif This.Parent.chkIcon.Value
		
	ENDPROC

	PROCEDURE pgfProperties.projectexplorerpage1.lblHome.Click
		if This.FontUnderline
			ExecuteFile(Thisform.oProjectSettings.Home)
		endif This.FontUnderline
		
	ENDPROC

	PROCEDURE pgfProperties.projectexplorerpage1.txtHome.Refresh
		try
			This.ToolTipText = displaypath(evaluate(This.ControlSource), 127)
		catch
		endtry
		
	ENDPROC

	PROCEDURE pgfProperties.projectexplorerpage1.txtProjectHook.Refresh
		local lcPath
		lcPath = Thisform.oProjectSettings.ProjectHookLibrary
		lcPath = iif(Thisform.lDisplayFullPath or vartype(Thisform.oProject) <> 'O', ;
			lcPath, GetRelativePath(lcPath, Thisform.oProject.cProject))
		This.Value = iif(empty(Thisform.oProjectSettings.ProjectHookClass), '', ;
			Thisform.oProjectSettings.ProjectHookClass + ' (' + lcPath + ')')
		try
			This.ToolTipText = displaypath(This.Value, 127)
		catch
		endtry
		
	ENDPROC

	PROCEDURE pgfProperties.Projectexplorerpage3.cboInstancing.anychange
		if This.Parent.lstClasses.ListIndex > 0
			This.Parent.lstClasses.aItems[This.Parent.lstClasses.ListIndex, ;
				2].Instancing = This.ListIndex - 1
		endif This.Parent.lstClasses.ListIndex > 0
		
	ENDPROC

	PROCEDURE pgfProperties.Projectexplorerpage3.cboInstancing.Refresh
		if This.Parent.lstClasses.ListIndex > 0
			This.Enabled   = .T.
			This.ListIndex = This.Parent.lstClasses.aItems[This.Parent.lstClasses.ListIndex, ;
				2].Instancing + 1
		else
			This.Enabled   = .F.
			This.ListIndex = 0
		endif This.Parent.lstClasses.ListIndex > 0
		
	ENDPROC

	PROCEDURE pgfProperties.Projectexplorerpage3.lblLibrary.Click
		if This.FontUnderline
			with This.Parent.lstClasses
				Thisform.SelectNodeForFile(.aItems[.ListIndex, 2].ServerClassLibrary)
			endwith
		endif This.FontUnderline
		
	ENDPROC

	PROCEDURE pgfProperties.Projectexplorerpage3.lblName.Click
		if This.FontUnderline
			with This.Parent.lstClasses
				Thisform.SelectNodeForFile(.aItems[.ListIndex, 2].ServerClassLibrary, ;
					.aItems[.ListIndex, 1])
			endwith
		endif This.FontUnderline
		
	ENDPROC

	PROCEDURE pgfProperties.Projectexplorerpage3.lstClasses.anychange
		This.Parent.Refresh()
		
	ENDPROC

	PROCEDURE pgfProperties.Projectexplorerpage3.lstClasses.UIEnable
		lparameters tlEnable
		if tlEnable
			This.Parent.Parent.Parent.GetServers()
		endif tlEnable
		
	ENDPROC

	PROCEDURE pgfProperties.Projectexplorerpage3.txtDescription.Refresh
		if This.Parent.lstClasses.ListIndex > 0
			This.Enabled = .T.
			This.Value   = This.Parent.lstClasses.aItems[This.Parent.lstClasses.ListIndex, ;
				2].Description
		else
			This.Enabled = .F.
			This.Value   = ''
		endif This.Parent.lstClasses.ListIndex > 0
		
	ENDPROC

	PROCEDURE pgfProperties.Projectexplorerpage3.txtDescription.validation
		if This.Parent.lstClasses.ListIndex > 0
			This.Parent.lstClasses.aItems[This.Parent.lstClasses.ListIndex, ;
				2].Description = alltrim(This.Value)
		endif This.Parent.lstClasses.ListIndex > 0
		
	ENDPROC

	PROCEDURE pgfProperties.Projectexplorerpage3.txtHelpID.Refresh
		if This.Parent.lstClasses.ListIndex > 0
			This.Enabled = .T.
			This.Value   = This.Parent.lstClasses.aItems[This.Parent.lstClasses.ListIndex, ;
			2].HelpContextID
		else
			This.Enabled = .F.
			This.Value   = 0
		endif This.Parent.lstClasses.ListIndex > 0
		
	ENDPROC

	PROCEDURE pgfProperties.Projectexplorerpage3.txtHelpID.validation
		if This.Parent.lstClasses.ListIndex > 0
			This.Parent.lstClasses.aItems[This.Parent.lstClasses.ListIndex, ;
				2].HelpContextID = This.Value
		endif This.Parent.lstClasses.ListIndex > 0
		
	ENDPROC

	PROCEDURE pgfProperties.Projectexplorerpage3.txtLibrary.Refresh
		local lcPath
		if This.Parent.lstClasses.ListIndex > 0
			lcPath     = This.Parent.lstClasses.aItems[This.Parent.lstClasses.ListIndex, ;
				2].ServerClassLibrary
			This.Value = iif(Thisform.lDisplayFullPath or ;
				vartype(Thisform.oProject) <> 'O', lcPath, ;
				GetRelativePath(lcPath, Thisform.oProject.cProject))
			This.Parent.lblLibrary.ForeColor     = rgb(0, 0, 255)
			This.Parent.lblLibrary.FontUnderline = .T.
			This.Parent.lblLibrary.MousePointer  = 15
			try
				This.ToolTipText = displaypath(This.Value, 127)
			catch
			endtry
		else
			This.Value = ''
			This.Parent.lblLibrary.ForeColor     = rgb(0, 0, 0)
			This.Parent.lblLibrary.FontUnderline = .F.
			This.Parent.lblLibrary.MousePointer  = 0
		endif This.Parent.lstClasses.ListIndex > 0
		
	ENDPROC

	PROCEDURE pgfProperties.Projectexplorerpage3.txtName.Refresh
		if This.Parent.lstClasses.ListIndex > 0
			This.Value = This.Parent.lstClasses.aItems[This.Parent.lstClasses.ListIndex, 1]
			This.Parent.lblName.ForeColor     = rgb(0, 0, 255)
			This.Parent.lblName.FontUnderline = .T.
			This.Parent.lblName.MousePointer  = 15
		else
			This.Value = ''
			This.Parent.lblName.ForeColor     = rgb(0, 0, 0)
			This.Parent.lblName.FontUnderline = .F.
			This.Parent.lblName.MousePointer  = 0
		endif This.Parent.lstClasses.ListIndex > 0
		
	ENDPROC

ENDDEFINE

DEFINE CLASS projectitemproperties AS projectexplorerpropertiescontainer OF "projectexplorerexplorer.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblTags" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtPath" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblPath" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtDescription" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDescription" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkExclude" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblLastModified" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtLastModified" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboTags" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkMainFile" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtUser" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblUser" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdSave" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdRevert" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboColor" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblColor" UniqueID="" Timestamp="" />

	#INCLUDE "projectexplorer.h"
	Anchor = 10
	Height = 310
	Name = "projectitemproperties"
	Style = 3
	Width = 440

	ADD OBJECT 'cboColor' AS projectexplorercombobox WITH ;
		BoundColumn = 2, ;
		DisplayCount = 10, ;
		Height = 24, ;
		Left = 85, ;
		Name = "cboColor", ;
		TabIndex = 16, ;
		Top = 235, ;
		Width = 121
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboTags' AS projectexplorercombotree WITH ;
		Anchor = 10, ;
		Height = 24, ;
		lbindtoformanychange = .T., ;
		Left = 85, ;
		Name = "cboTags", ;
		TabIndex = 14, ;
		Top = 209, ;
		Width = 355, ;
		cboCombo.Name = "cboCombo", ;
		cboCombo.Value = All, ;
		oImageList.Height = 100, ;
		oImageList.Left = 120, ;
		oImageList.Name = "oImageList", ;
		oImageList.Top = 40, ;
		oImageList.Width = 100, ;
		oTree.Height = 174, ;
		oTree.Left = 5, ;
		oTree.Name = "oTree", ;
		oTree.Top = 29, ;
		oTree.Width = 166, ;
		shpTreeView.Name = "shpTreeView"
		*< END OBJECT: ClassLib="projectexplorercombotree.vcx" BaseClass="container" />

	ADD OBJECT 'chkExclude' AS projectexplorercheckbox WITH ;
		Alignment = 0, ;
		Caption = "\<Exclude", ;
		lbindtoformanychange = .T., ;
		Left = 256, ;
		Name = "chkExclude", ;
		TabIndex = 7, ;
		Top = 53
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkMainFile' AS projectexplorercheckbox WITH ;
		Alignment = 0, ;
		Caption = "\<Main file", ;
		lbindtoformanychange = .T., ;
		Left = 330, ;
		Name = "chkMainFile", ;
		TabIndex = 8, ;
		Top = 53
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdRevert' AS projectexplorercommandbutton WITH ;
		Caption = "Revert", ;
		Left = 220, ;
		lnotifyonformchange = .T., ;
		Name = "cmdRevert", ;
		TabIndex = 18, ;
		Top = 274
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdSave' AS projectexplorercommandbutton WITH ;
		Caption = "Save", ;
		Left = 135, ;
		lnotifyonformchange = .T., ;
		Name = "cmdSave", ;
		TabIndex = 17, ;
		Top = 274
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'edtDescription' AS projectexplorereditbox WITH ;
		Anchor = 10, ;
		czoomformcaption = Description, ;
		Height = 64, ;
		IntegralHeight = .F., ;
		lbindtoformanychange = .T., ;
		lcanzoom = .T., ;
		Left = 85, ;
		Name = "edtDescription", ;
		TabIndex = 10, ;
		Top = 75, ;
		Width = 355
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="editbox" />

	ADD OBJECT 'edtUser' AS projectexplorereditbox WITH ;
		Anchor = 10, ;
		czoomformcaption = User, ;
		Height = 64, ;
		IntegralHeight = .F., ;
		lbindtoformanychange = .T., ;
		lcanzoom = .T., ;
		Left = 85, ;
		Name = "edtUser", ;
		TabIndex = 12, ;
		Top = 142, ;
		Width = 355
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="editbox" />

	ADD OBJECT 'lblColor' AS projectexplorerlabel WITH ;
		Caption = "\<Category", ;
		Left = 0, ;
		Name = "lblColor", ;
		TabIndex = 15, ;
		Top = 239
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'lblDescription' AS projectexplorerlabel WITH ;
		Caption = "\<Description", ;
		Left = 0, ;
		Name = "lblDescription", ;
		TabIndex = 9, ;
		Top = 78
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'lblLastModified' AS projectexplorerlabel WITH ;
		Caption = "Last Modified", ;
		Left = 0, ;
		Name = "lblLastModified", ;
		TabIndex = 5, ;
		Top = 53
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'lblName' AS projectexplorerlabel WITH ;
		Caption = "\<Name", ;
		Left = 0, ;
		Name = "lblName", ;
		TabIndex = 1, ;
		Top = 3
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'lblPath' AS projectexplorerlabel WITH ;
		Caption = "Path", ;
		Left = 0, ;
		Name = "lblPath", ;
		TabIndex = 3, ;
		Top = 28
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'lblTags' AS projectexplorerlabel WITH ;
		Caption = "\<Tags", ;
		Left = 0, ;
		Name = "lblTags", ;
		TabIndex = 13, ;
		Top = 213
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'lblUser' AS projectexplorerlabel WITH ;
		Caption = "\<User", ;
		Left = 0, ;
		Name = "lblUser", ;
		TabIndex = 11, ;
		Top = 145
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="label" />

	ADD OBJECT 'txtLastModified' AS projectexplorertextbox WITH ;
		Left = 85, ;
		Name = "txtLastModified", ;
		ReadOnly = .T., ;
		TabIndex = 6, ;
		Top = 50, ;
		Width = 150
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtName' AS projectexplorervfpnametextbox WITH ;
		Anchor = 10, ;
		Height = 22, ;
		lbindtoformanychange = .T., ;
		Left = 85, ;
		Name = "txtName", ;
		TabIndex = 2, ;
		Top = 0, ;
		Width = 355
		*< END OBJECT: ClassLib="projectexplorerui.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtPath' AS projectexplorertextbox WITH ;
		Anchor = 10, ;
		Height = 22, ;
		Left = 85, ;
		Name = "txtPath", ;
		ReadOnly = .T., ;
		TabIndex = 4, ;
		Top = 25, ;
		Width = 355
		*< END OBJECT: ClassLib="projectexplorerctrls.vcx" BaseClass="textbox" />
	
	PROCEDURE cboColor.InteractiveChange
		dodefault()
		if vartype(Thisform.oItem) = 'O'
			Thisform.oItem.ForeColor = This.Value
			Thisform.AnyChange()
		endif vartype(Thisform.oItem) = 'O'
		
	ENDPROC

	PROCEDURE cboColor.Refresh
		* Fill the combobox with categories.
		
		select Label, Color from ProjectExplorerCategories ;
			into array This.aItems order by Order
		for lnI = 1 to _tally
			This.aItems[lnI, 1] = trim(This.aItems[lnI, 1])
		next lnI
		This.Requery()
		for lnI = 1 to alen(This.aItems, 1)
			This.Picture[lnI] = Thisform.oCategoryManager.GetFileNameForColor(This.aItems[lnI, 2])
		next lnI
		
		* Display the appropriate choice.
		
		if vartype(Thisform.oItem) = 'O'
			This.Enabled = .T.
			This.Value   = Thisform.oItem.ForeColor
		else
			This.Enabled = .F.
			This.Value   = 0
		endif vartype(Thisform.oItem) = 'O'
		
	ENDPROC

	PROCEDURE cboTags.itemselected
		* Concatenate all selected items into a comma-delimited list.
		
		local lcTags, ;
			lnI, ;
			loNode
		with This.oTree
			lcTags = ''
			for lnI = 1 to .Nodes.Count
				loNode = .Nodes(lnI)
				if loNode.Checked
					lcTags = lcTags + iif(empty(lcTags), '', ',') + loNode.Text
				endif loNode.Checked
			next lnI
		endwith
		if not This.Value == lcTags
			This.Value = lcTags
			This.lChanged = .T.
			if This.lBindToFormAnyChange
				Thisform.AnyChange()
			endif This.lBindToFormAnyChange
			Thisform.oItem.SaveTagString(strtran(lcTags, ',', ccCRLF))
		endif not This.Value == lcTags
		
	ENDPROC

	PROCEDURE cboTags.loadtree
		local lcTags, ;
			lnSelect, ;
			lcTag, ;
			loNode
		with This
			.oTree.Nodes.Clear()
			.oTree.Checkboxes = .T.
			.oTree.Sorted     = .T.
			if vartype(Thisform.oItem) = 'O'
				lcTags = Thisform.oItem.GetTagString()
			else
				lcTags = ''
			endif vartype(Thisform.oItem) = 'O'
			lnSelect = select()
			select ProjectExplorerTags
			scan
				lcTag  = trim(NAME)
				loNode = .oTree.Nodes.Add(, 1, lcTag, lcTag)
				if lcTag + ccCRLF $ lcTags
					loNode.Checked = .T.
				endif lcTag + ccCRLF $ lcTags
			endscan
			select (lnSelect)
		endwith
		
	ENDPROC

	PROCEDURE cboTags.opencontrol
		* Load the TreeView when we're opened.
		
		This.LoadTree()
		dodefault()
		
	ENDPROC

	PROCEDURE cboTags.Refresh
		if vartype(Thisform.oItem) = 'O'
			This.Value   = Thisform.oItem.GetTagString(.T.)
			This.Enabled = .T.
		else
			This.Value   = ''
			This.Enabled = .F.
		endif vartype(Thisform.oItem) = 'O'
		
	ENDPROC

	PROCEDURE chkExclude.Refresh
		if vartype(Thisform.oItem) = 'O'
			This.Value   = Thisform.oItem.Exclude
			This.Enabled = Thisform.oItem.CanInclude and not Thisform.oItem.MainFile
		else
			This.Value   = .F.
			This.Enabled = .F.
		endif vartype(Thisform.oItem) = 'O'
		
	ENDPROC

	PROCEDURE chkExclude.validation
		if vartype(Thisform.oItem) = 'O'
			Thisform.oItem.Exclude = This.Value
			Thisform.UpdateNode()
			This.Parent.Refresh()
		endif vartype(Thisform.oItem) = 'O'
		
	ENDPROC

	PROCEDURE chkMainFile.Refresh
		if vartype(Thisform.oItem) = 'O'
			This.Value   = Thisform.oItem.MainFile
			This.Enabled = Thisform.oItem.CanSetMain and not Thisform.oItem.Exclude
		else
			This.Value   = .F.
			This.Enabled = .F.
		endif vartype(Thisform.oItem) = 'O'
		
	ENDPROC

	PROCEDURE chkMainFile.validation
		if vartype(Thisform.oItem) = 'O'
			Thisform.oItem.MainFile = This.Value
			This.Parent.Refresh()
		endif vartype(Thisform.oItem) = 'O'
		
	ENDPROC

	PROCEDURE cmdRevert.Click
		Thisform.Revert()
		
	ENDPROC

	PROCEDURE cmdRevert.onformchange
		This.Refresh()
		
	ENDPROC

	PROCEDURE cmdRevert.Refresh
		This.Enabled = Thisform.lChanged
		
	ENDPROC

	PROCEDURE cmdSave.Click
		Thisform.SaveSettings()
		
	ENDPROC

	PROCEDURE cmdSave.onformchange
		This.Refresh()
		
	ENDPROC

	PROCEDURE cmdSave.Refresh
		This.Enabled = Thisform.lChanged
		
	ENDPROC

	PROCEDURE edtDescription.Refresh
		if vartype(Thisform.oItem) = 'O'
			This.Value   = Thisform.oItem.Description
			This.Enabled = Thisform.oItem.HasDescription
		else
			This.Value   = ''
			This.Enabled = .F.
		endif vartype(Thisform.oItem) = 'O'
		
	ENDPROC

	PROCEDURE edtDescription.validation
		if vartype(Thisform.oItem) = 'O'
			Thisform.oItem.Description = This.Value
		endif vartype(Thisform.oItem) = 'O'
		
	ENDPROC

	PROCEDURE edtDescription.zoom
		dodefault()
		This.Validation()
		Thisform.AnyChange()
		
	ENDPROC

	PROCEDURE edtUser.Refresh
		local loItem, ;
			lcType
		if vartype(Thisform.oItem) = 'O'
			This.Value   = Thisform.oItem.User
			This.Enabled = Thisform.oItem.HasUser
		else
			This.Value   = ''
			This.Enabled = .F.
		endif vartype(Thisform.oItem) = 'O'
		
	ENDPROC

	PROCEDURE edtUser.validation
		if vartype(Thisform.oItem) = 'O'
			Thisform.oItem.User = This.Value
		endif vartype(Thisform.oItem) = 'O'
		
	ENDPROC

	PROCEDURE edtUser.zoom
		dodefault()
		This.Validation()
		Thisform.AnyChange()
		
	ENDPROC

	PROCEDURE lblPath.Click
		if This.FontUnderline
			ExecuteFile(justpath(Thisform.oItem.Path))
		endif This.FontUnderline
		
	ENDPROC

	PROCEDURE lblPath.Refresh
		if vartype(Thisform.oItem) = 'O' and '\' $ Thisform.oItem.Path
			This.ForeColor     = rgb(0, 0, 255)
			This.FontUnderline = .T.
			This.MousePointer  = 15
		else
			This.ForeColor     = rgb(0, 0, 0)
			This.FontUnderline = .F.
			This.MousePointer  = 0
		endif vartype(Thisform.oItem) = 'O' ...
		
	ENDPROC

	PROCEDURE txtLastModified.Refresh
		if vartype(Thisform.oItem) = 'O'
			This.Value = Thisform.oItem.LastModified
		else
			This.Value = {/:}
		endif vartype(Thisform.oItem) = 'O'
		
	ENDPROC

	PROCEDURE txtName.Refresh
		if vartype(Thisform.oItem) = 'O'
			This.Value   = Thisform.oItem.ItemName
			This.Enabled = Thisform.oItem.CanRename
		else
			This.Value   = ''
			This.Enabled = .F.
		endif vartype(Thisform.oItem) = 'O'
		
	ENDPROC

	PROCEDURE txtName.validation
		do case
			case vartype(Thisform.oItem) <> 'O'
				return .T.
			case empty(This.Value)
				return .F.
			otherwise
				Thisform.oItem.ItemName = alltrim(This.Value)
				return .T.
		endcase
		
	ENDPROC

	PROCEDURE txtPath.Refresh
		if vartype(Thisform.oItem) = 'O'
			This.Value = iif(Thisform.lDisplayFullPath, Thisform.oItem.Path, ;
				GetRelativePath(Thisform.oItem.Path, Thisform.oProject.cProject))
		else
			This.Value = ''
		endif vartype(Thisform.oItem) = 'O'
		try
			This.ToolTipText = displaypath(This.Value, 127)
		catch
		endtry
		
	ENDPROC

ENDDEFINE
