*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.20" SourceFile="projectexplorersplitter.vcx" CPID="1252" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS gripper AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="GripperDot1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GripperDot2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GripperDot3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GripperDot4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GripperDot5" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: setupforhorizontalsplitter		&& A method to set the positions of the dots to a vertical orientation.
		*m: setupforverticalsplitter		&& A method to set the positions of the dots to a horizontal orientation.
		*m: setupgripper		&& The setup method to positiosn the dots according to the orientation of the splitter, also sets up the number of dots.
		*p: ndots		&& Enter a number from 0 to 5 to indicate how many gripper dots to show. Enter 0 for none.
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		BackStyle = 0
		BorderWidth = 0
		Height = 19
		Name = "gripper"
		ndots = 5
		Width = 36
		_memberdata = <VFPData>
			<memberdata name="ndots" type="property" display="nDots"/>
			<memberdata name="setupforhorizontalsplitter" type="method" display="SetupForHorizontalSplitter"/>
			<memberdata name="setupforverticalsplitter" type="method" display="SetupForVerticalSplitter"/>
			<memberdata name="setupgripper" type="method" display="SetupGripper"/>
		</VFPData>
	*</PropValue>

	ADD OBJECT 'GripperDot1' AS gripperdot WITH ;
		Left = 2, ;
		Name = "GripperDot1", ;
		Top = 4, ;
		ShapeDark.BackStyle = 0, ;
		ShapeDark.Name = "ShapeDark", ;
		ShapeDark.ZOrderSet = 0, ;
		ShapeLight.Name = "ShapeLight", ;
		ShapeLight.ZOrderSet = 1, ;
		ShapeMiddle.Name = "ShapeMiddle", ;
		ShapeMiddle.ZOrderSet = 2
		*< END OBJECT: ClassLib="projectexplorersplitter.vcx" BaseClass="container" />

	ADD OBJECT 'GripperDot2' AS gripperdot WITH ;
		Left = 6, ;
		Name = "GripperDot2", ;
		Top = 4, ;
		ShapeDark.BackStyle = 0, ;
		ShapeDark.Name = "ShapeDark", ;
		ShapeDark.ZOrderSet = 0, ;
		ShapeLight.Name = "ShapeLight", ;
		ShapeLight.ZOrderSet = 1, ;
		ShapeMiddle.Name = "ShapeMiddle", ;
		ShapeMiddle.ZOrderSet = 2
		*< END OBJECT: ClassLib="projectexplorersplitter.vcx" BaseClass="container" />

	ADD OBJECT 'GripperDot3' AS gripperdot WITH ;
		Left = 10, ;
		Name = "GripperDot3", ;
		Top = 4, ;
		ShapeDark.BackStyle = 0, ;
		ShapeDark.Name = "ShapeDark", ;
		ShapeDark.ZOrderSet = 0, ;
		ShapeLight.Name = "ShapeLight", ;
		ShapeLight.ZOrderSet = 1, ;
		ShapeMiddle.Name = "ShapeMiddle", ;
		ShapeMiddle.ZOrderSet = 2
		*< END OBJECT: ClassLib="projectexplorersplitter.vcx" BaseClass="container" />

	ADD OBJECT 'GripperDot4' AS gripperdot WITH ;
		Left = 14, ;
		Name = "GripperDot4", ;
		Top = 4, ;
		ShapeDark.BackStyle = 0, ;
		ShapeDark.Name = "ShapeDark", ;
		ShapeDark.ZOrderSet = 0, ;
		ShapeLight.Name = "ShapeLight", ;
		ShapeLight.ZOrderSet = 1, ;
		ShapeMiddle.Name = "ShapeMiddle", ;
		ShapeMiddle.ZOrderSet = 2
		*< END OBJECT: ClassLib="projectexplorersplitter.vcx" BaseClass="container" />

	ADD OBJECT 'GripperDot5' AS gripperdot WITH ;
		Left = 18, ;
		Name = "GripperDot5", ;
		Top = 4, ;
		ShapeDark.BackStyle = 0, ;
		ShapeDark.Name = "ShapeDark", ;
		ShapeDark.ZOrderSet = 0, ;
		ShapeLight.Name = "ShapeLight", ;
		ShapeLight.ZOrderSet = 1, ;
		ShapeMiddle.Name = "ShapeMiddle", ;
		ShapeMiddle.ZOrderSet = 2
		*< END OBJECT: ClassLib="projectexplorersplitter.vcx" BaseClass="container" />
	
	PROCEDURE MouseMove
		* If the user starts a drag on us, bubble it up to the splitter.
		
		lparameters tnButton, ;
			tnShift, ;
			tnXCoord, ;
			tnYCoord
		This.Parent.MouseMove(tnButton, tnShift, tnXCoord, tnYCoord)
		
	ENDPROC

	PROCEDURE setupforhorizontalsplitter		&& A method to set the positions of the dots to a vertical orientation.
		local lnDotHeight, ;
			lnI, ;
			loDot
		with This
		
		* Position the dots in a vertical orientation for a horizontal splitter.
		
			lnDotHeight = .GripperDot1.Height
			for lnI = 1 to 5
				loDot      = evaluate('.GripperDot' + transform(lnI))
				loDot.Left = 2
				loDot.Top  = (lnDotHeight * lnI - 1) + 1
			next lnI
		
		* Adjust the container so it shows the correct number of dots.
		
			.Height = .nDots * lnDotHeight
			.Width  = lnDotHeight + 1
		
		* Center the container and set Anchor so it stays centered.
		
			.Left   = (.Parent.Width - .Width)/2 - 3
			.Top    = (.Parent.Height - .Height)/2
			.Anchor = 512
		endwith
		
	ENDPROC

	PROCEDURE setupforverticalsplitter		&& A method to set the positions of the dots to a horizontal orientation.
		local lnDotWidth, ;
			lnI, ;
			loDot
		with This
		
		* Position the dots in a horizontal orientation for a vertical splitter.
		
			lnDotWidth = .GripperDot1.Width
			for lnI = 1 to 5
				loDot      = evaluate('.GripperDot' + transform(lnI))
				loDot.Left = (lnDotWidth * lnI - 1) + 1
				loDot.Top  = 2
			next lnI
		
		* Adjust the container so it shows the correct number of dots.
		
			.Width  = .nDots * lnDotWidth
			.Height = lnDotWidth + 1
		
		* Center the container and set Anchor so it stays centered.
		
			.Top    = (.Parent.Height - .Height)/2 - 3
			.Left   = (.Parent.Width  - .Width)/2
			.Anchor = 256
		endwith
		
	ENDPROC

	PROCEDURE setupgripper		&& The setup method to positiosn the dots according to the orientation of the splitter, also sets up the number of dots.
		local loDot
		with This
		
		* Get the number of dots to use.
		
			.nDots = .Parent.nDots
		
		* Use the same MousePointer as the splitter, both for ourselves and each dot.
		
			.MousePointer = .Parent.MousePointer
			for each loDot in .Controls foxobject
				loDot.SetAll('MousePointer', .MousePointer)
			next loDot
		
		* Adjust the gripper based on whether this is a vertical or horizontal
		* splitter.
		
			if .Parent.Width > .Parent.Height
				.SetupForVerticalSplitter()
			else
				.SetupForHorizontalSplitter()
			endif .Parent.Width > .Parent.Height
		endwith
		
	ENDPROC

ENDDEFINE

DEFINE CLASS gripperdot AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="ShapeDark" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ShapeLight" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ShapeMiddle" UniqueID="" Timestamp="" />

	*<PropValue>
		BackStyle = 0
		BorderWidth = 0
		Height = 4
		Name = "gripperdot"
		Width = 4
	*</PropValue>

	ADD OBJECT 'ShapeDark' AS shape WITH ;
		BackStyle = 1, ;
		BorderStyle = 0, ;
		BorderWidth = 0, ;
		FillColor = 80,80,80, ;
		FillStyle = 0, ;
		Height = 2, ;
		Left = 1, ;
		Name = "ShapeDark", ;
		Top = 1, ;
		Width = 2
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'ShapeLight' AS shape WITH ;
		BackStyle = 1, ;
		BorderStyle = 0, ;
		BorderWidth = 0, ;
		FillColor = 250,250,250, ;
		FillStyle = 0, ;
		Height = 2, ;
		Left = 2, ;
		Name = "ShapeLight", ;
		Top = 2, ;
		Width = 2
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'ShapeMiddle' AS shape WITH ;
		BackStyle = 1, ;
		BorderStyle = 0, ;
		BorderWidth = 0, ;
		FillColor = 173,209,255, ;
		FillStyle = 0, ;
		Height = 1, ;
		Left = 2, ;
		Name = "ShapeMiddle", ;
		Top = 2, ;
		Width = 1
		*< END OBJECT: BaseClass="shape" />
	
	PROCEDURE MouseMove
		* If the user starts a drag on us, bubble it up to our container.
		
		lparameters tnButton, ;
			tnShift, ;
			tnXCoord, ;
			tnYCoord
		This.Parent.MouseMove(tnButton, tnShift, tnXCoord, tnYCoord)
		
	ENDPROC

	PROCEDURE ShapeDark.MouseMove
		* If the user starts a drag on us, bubble it up to our container.
		
		lparameters tnButton, ;
			tnShift, ;
			tnXCoord, ;
			tnYCoord
		This.Parent.MouseMove(tnButton, tnShift, tnXCoord, tnYCoord)
		
	ENDPROC

	PROCEDURE ShapeLight.MouseMove
		* If the user starts a drag on us, bubble it up to our container.
		
		lparameters tnButton, ;
			tnShift, ;
			tnXCoord, ;
			tnYCoord
		This.Parent.MouseMove(tnButton, tnShift, tnXCoord, tnYCoord)
		
	ENDPROC

	PROCEDURE ShapeMiddle.MouseMove
		* If the user starts a drag on us, bubble it up to our container.
		
		lparameters tnButton, ;
			tnShift, ;
			tnXCoord, ;
			tnYCoord
		This.Parent.MouseMove(tnButton, tnShift, tnXCoord, tnYCoord)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS projectexplorersplitter AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: adjustminimum		&& Adjusts the form so it can't be sized too small
		*m: changetheme		&& Changes the theme
		*m: getobject1size		&& Gets the size for Object 1
		*m: getobject2size		&& Gets the size for Object 2
		*m: getposition		&& Returns the new position: X for a horizontal splitter and Y for a vertical splitter
		*m: initthemedcontrol		&& Initializes themes
		*m: lshowgripper_assign
		*m: moveobject1		&& Moves Object 1 to the new position
		*m: moveobject2		&& Moves Object 2 to the new position
		*m: movesplittertoposition		&& Moves the splitter to the specified position
		*m: setposition		&& Sets the new position for the splitter
		*m: setupgripper		&& A method to setup various properties on the gripper to visually configure it for Vertical or Horizontal configuration.
		*m: splittermoved		&& Called after the splitter is moved
		*p: cobject1name		&& The name of the object above (for a vertical splitter) or to the left of (for a horizontal splitter) the splitter
		*p: cobject2name		&& The name of the object below (for a vertical splitter) or to the right of (for a horizontal splitter) the splitter
		*p: lshowgripper		&& .T. to display the splitter visually including the gripper control
		*p: lthemed		&& .T. to support themes
		*p: ndots		&& Enter a value between 0 and 5 for the number of dots to be shown on the gripper. Enter 0 for none.
		*p: nobject1minsize		&& The minimum height (for a vertical splitter) or width (for a horizontal splitter) of Object 1
		*p: nobject2minsize		&& The minimum height (for a vertical splitter) or width (for a horizontal splitter) of Object 2
		*p: noriginalformmin		&& The original setting of the form's MinHeight or MinWidth property
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		BackColor = 192,192,192
		BackStyle = 0
		BorderColor = 255,0,0
		BorderWidth = 2
		cobject1name = 
		cobject2name = 
		Height = 248
		lshowgripper = .F.
		lthemed = .F.
		Name = "projectexplorersplitter"
		ndots = 5
		nobject1minsize = 0
		nobject2minsize = 0
		noriginalformmin = 0
		Width = 10
		_memberdata = <VFPData>
			<memberdata name="movesplittertoposition" display="MoveSplitterToPosition"/>
			<memberdata name="cobject1name" display="cObject1Name"/>
			<memberdata name="cobject2name" display="cObject2Name"/>
			<memberdata name="nobject1minsize" display="nObject1MinSize"/>
			<memberdata name="nobject2minsize" display="nObject2MinSize"/>
			<memberdata name="getobject1size" display="GetObject1Size"/>
			<memberdata name="getobject2size" display="GetObject2Size"/>
			<memberdata name="setposition" display="SetPosition"/>
			<memberdata name="moveobject1" display="MoveObject1"/>
			<memberdata name="moveobject2" display="MoveObject2"/>
			<memberdata name="getposition" display="GetPosition"/>
			<memberdata name="splittermoved" display="SplitterMoved"/>
			<memberdata name="lshowgripper" display="lShowGripper"/>
			<memberdata name="setupgripper" display="SetupGripper"/>
			<memberdata name="ndots" display="nDots"/>
			<memberdata name="adjustminimum" display="AdjustMinimum"/>
			<memberdata name="lthemed" display="lThemed"/>
			<memberdata name="initthemedcontrol" display="InitThemedControl"/>
			<memberdata name="changetheme" display="ChangeTheme"/>
			<memberdata name="noriginalformmin" display="nOriginalFormMin"/>
			<memberdata name="lshowgripper_assign" display="lShowGripper_Assign"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE adjustminimum		&& Adjusts the form so it can't be sized too small
		* Abstract method.
		
	ENDPROC

	PROCEDURE changetheme		&& Changes the theme
		* Abstract method.
		
	ENDPROC

	PROTECTED PROCEDURE getobject1size		&& Gets the size for Object 1
		* Abstract method.
		
		lparameters toObject
		
	ENDPROC

	PROTECTED PROCEDURE getobject2size		&& Gets the size for Object 2
		* Abstract method.
		
		lparameters toObject
		
	ENDPROC

	PROTECTED PROCEDURE getposition		&& Returns the new position: X for a horizontal splitter and Y for a vertical splitter
		* Abstract method.
		
		lparameters tnXCoord, ;
			tnYCoord
		
	ENDPROC

	PROCEDURE Init
		with This
		
		* Set BorderWidth to 0 so it doesn't appear at run time.
		
			.BorderWidth = 0
			do case
		
		* If we're showing a gripper image (thanks to Matt Slay for the gripper
		* controls), set BackStyle so we can see the color and set up the gripper.
		
				case .lShowGripper
					.BackStyle = 1
					.SetupGripper()
		
		* If we're using themes, initialize them.
		
				case .lThemed
					.InitThemedControl()
			endcase
		
		* Call AdjustMinimum to adjust the form so it can't be sized too small.
		
			.AdjustMinimum()
		endwith
		dodefault()
		
	ENDPROC

	PROCEDURE initthemedcontrol		&& Initializes themes
		* Set up to work with themes.
		
		local llVertical
		
		* Instantiate the themes manager if necessary.
		
		if vartype(_Screen.ThemesManager) <> 'O'
			_screen.NewObject('ThemesManager', 'ThemesManager', 'ThemedControls.vcx')
		endif vartype(_Screen.ThemesManager) <> 'O'
		
		* Determine if we're vertical or horizontal.
		
		llVertical = This.Height > This.Width
		
		* Add background and gripper controls.
		
		This.AddObject('imgBackGround', 'Image')
		with This.imgBackGround
			.Height       = This.Height
			.Width        = This.Width
			.MousePointer = This.MousePointer
			.Stretch      = 2
			.Anchor       = 15
			.Visible      = .T.
			bindevent(This.imgBackGround, 'MouseMove', This, 'MouseMove')
		endwith
		This.AddObject('imgGripper', 'Image')
		with This.imgGripper
			if llVertical
				.Height = 35
				.Width  = 8
				.Top    = int((This.Height - .Height)/2)
			else
				.Height = 8
				.Width  = 35
				.Left   = int((This.Height - .Height)/2)
			endif llVertical
			.BackStyle    = 0
			.MousePointer = This.MousePointer
			.Stretch      = 2
			.Anchor       = 768
			.Visible      = .T.
			bindevent(This.imgGripper, 'MouseMove', This, 'MouseMove')
		endwith
		
		* Use the current theme.
		
		This.ChangeTheme()
		
	ENDPROC

	PROCEDURE lshowgripper_assign
		lparameters tlShowGripper
		with This
			.lShowGripper = tlShowGripper
			if .lShowGripper
				.BackStyle = 1
				.SetupGripper()
			else
				.BackStyle = 0
				if type('.Gripper') = 'O'
					.Gripper.Visible = .F.
				endif type('.Gripper') = 'O'
			endif .lShowGripper
		endwith
		
	ENDPROC

	PROCEDURE MouseMove
		lparameters tnButton, ;
			tnShift, ;
			tnXCoord, ;
			tnYCoord
		local lnPosition
		with This
			if tnButton = 1 and .Enabled
				lnPosition = .GetPosition(tnXCoord, tnYCoord)
				.MoveSplitterToPosition(lnPosition)
			endif tnButton = 1 ...
		endwith
		
	ENDPROC

	PROTECTED PROCEDURE moveobject1		&& Moves Object 1 to the new position
		* Abstract method.
		
		lparameters toObject
		
	ENDPROC

	PROTECTED PROCEDURE moveobject2		&& Moves Object 2 to the new position
		* Abstract method.
		
		lparameters toObject
		
	ENDPROC

	PROCEDURE movesplittertoposition		&& Moves the splitter to the specified position
		lparameters tnPosition
		local lnPosition, ;
			laObjects1[1], ;
			lnObjects1, ;
			lnI, ;
			loObject, ;
			laObjects2[1], ;
			lnObjects2, ;
			lnAnchor
		with This
		
		* Move the splitter to the specified position. Ensure it doesn't go too far,
		* based on the nObject1MinSize and nObject2MinSize settings.
		
			lnPosition = tnPosition
			lnObjects1 = alines(laObjects1, .cObject1Name, 4, ',')
			for lnI = 1 to lnObjects1
				loObject   = evaluate('.Parent.' + laObjects1[lnI])
				lnPosition = max(lnPosition, .GetObject1Size(loObject))
			next lnI
			lnObjects2 = alines(laObjects2, .cObject2Name, 4, ',')
			for lnI = 1 to lnObjects2
				loObject   = evaluate('.Parent.' + laObjects2[lnI])
				lnPosition = min(lnPosition, .GetObject2Size(loObject))
			next lnI
			lnAnchor = .Anchor
			.Anchor  = 0
			.SetPosition(lnPosition)
			.Anchor = lnAnchor
		
		* Now move the objects as well.
		
			for lnI = 1 to lnObjects1
				loObject = evaluate('.Parent.' + laObjects1[lnI])
				with loObject
					lnAnchor = .Anchor
					.Anchor  = 0
					This.MoveObject1(loObject)
					.Anchor = lnAnchor
				endwith
			next lnI
			for lnI = 1 to lnObjects2
				loObject = evaluate('.Parent.' + laObjects2[lnI])
				with loObject
					lnAnchor = .Anchor
					.Anchor  = 0
					This.MoveObject2(loObject)
					.Anchor = lnAnchor
				endwith
			next lnI
		
		* Since the object sizes have changed, we need to adjust the form as necessary.
		
			.AdjustMinimum()
		
		* Call a hook method.
		
			.SplitterMoved()
		endwith
		
	ENDPROC

	PROTECTED PROCEDURE setposition		&& Sets the new position for the splitter
		* Abstract method.
		
		lparameters tnPosition
		
	ENDPROC

	PROCEDURE setupgripper		&& A method to setup various properties on the gripper to visually configure it for Vertical or Horizontal configuration.
		* Add the gripper and set it up.
		
		if type('This.Gripper') <> 'O'
			This.NewObject('Gripper', 'Gripper', This.ClassLibrary)
		endif type('This.Gripper') <> 'O'
		with This.Gripper
			.Visible = .T.
			.SetupGripper()
		endwith
		
	ENDPROC

	PROCEDURE splittermoved		&& Called after the splitter is moved
		* Abstract method.
		
	ENDPROC

ENDDEFINE

DEFINE CLASS projectexplorersplitterh AS projectexplorersplitter OF "projectexplorersplitter.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: _pemeditor_moved		&& Design-time resize event
	*</DefinedPropArrayMethod>

	*<PropValue>
		Anchor = 13
		MousePointer = 9
		Name = "projectexplorersplitterh"
		_memberdata = <VFPData>
			<memberdata name="_pemeditor_moved" display="_PEMEditor_Moved"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE adjustminimum
		* Don't allow the form to be sized smaller than the left object should be. Note
		* that we use the form's original MinWidth rather than the current one so the
		* value can go up and down, not just up if we used MinWidth (due to the MAX).
		
		local laObjects[1], ;
			lnObjects, ;
			lnWidth, ;
			lnI, ;
			loObject
		with This
			lnObjects = alines(laObjects, .cObject1Name, 4, ',')
			lnWidth   = -1
			for lnI = 1 to lnObjects
				loObject = evaluate('.Parent.' + laObjects[lnI])
				lnWidth  = max(lnWidth, loObject.Width)
			next lnI
			if .nOriginalFormMin = 0
				.nOriginalFormMin = Thisform.MinWidth
			endif .nOriginalFormMin = 0
			Thisform.MinWidth = max(.nOriginalFormMin, Thisform.Width - lnWidth + ;
				.nObject1MinSize)
		endwith
		
	ENDPROC

	PROCEDURE changetheme
		with _Screen.ThemesManager
			This.imgBackground.Picture = .GetMember('SplitterH.Background.Picture')
			This.imgGripper.Picture    = .GetMember('SplitterH.Gripper.Picture')
		endwith
	ENDPROC

	PROCEDURE getobject1size
		lparameters toObject
		return toObject.Left + This.nObject1MinSize
		
	ENDPROC

	PROCEDURE getobject2size
		lparameters toObject
		return toObject.Left + toObject.Width - This.nObject2MinSize - This.Width
		
	ENDPROC

	PROCEDURE getposition
		lparameters tnXCoord, ;
			tnYCoord
		return tnXCoord + This.Left - objtoclient(This, 2)
		
	ENDPROC

	PROCEDURE moveobject1
		lparameters toObject
		with toObject
			.Move(.Left, .Top, This.Left - .Left, .Height)
		endwith
		
	ENDPROC

	PROCEDURE moveobject2
		lparameters toObject
		with toObject
			.Move(This.Left + This.Width - 2, .Top, ;
				max(.Width + .Left - This.Left - This.Width + 2, 0), .Height)
		endwith
		
	ENDPROC

	PROCEDURE setposition
		lparameters tnPosition
		This.Left = tnPosition
		
	ENDPROC

	PROCEDURE _pemeditor_moved		&& Design-time resize event
		*==============================================================================
		* Method:			_PEMEditor_Moved
		* Purpose:			Design-time resize event
		* Author:			Doug Hennig
		* Last revision:	11/11/2010
		* Parameters:		none
		* Returns:			none
		* Environment in:	none
		* Environment out:	none
		*==============================================================================
		
		local loThis, ;
			laObjects[1], ;
			lnObjects, ;
			lnI, ;
			loObject, ;
			lnLeft
		loThis = This
		with loThis
			lnObjects = alines(laObjects, .cObject1Name, 4, ',')
			for lnI = 1 to lnObjects
				loObject = evaluate('.Parent.' + laObjects[lnI])
				loObject.Width = .Left - loObject.Left
			next lnI
			lnObjects = alines(laObjects, .cObject2Name, 4, ',')
			for lnI = 1 to lnObjects
				loObject = evaluate('.Parent.' + laObjects[lnI])
				lnLeft   = loObject.Left
				loObject.Left  = .Left + .Width
				loObject.Width = loObject.Width - (loObject.Left - lnLeft)
			next lnI
		endwith
		
	ENDPROC

ENDDEFINE

DEFINE CLASS projectexplorersplitterv AS projectexplorersplitter OF "projectexplorersplitter.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: _pemeditor_moved		&& Design-time resize event
	*</DefinedPropArrayMethod>

	*<PropValue>
		Anchor = 14
		Height = 8
		MousePointer = 7
		Name = "projectexplorersplitterv"
		Width = 200
		_memberdata = <VFPData>
			<memberdata name="_pemeditor_moved" display="_PEMEditor_Moved"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE adjustminimum
		* Don't allow the form to be sized smaller than the top object should be. Note
		* that we use the form's original MinHeight rather than the current one so the
		* value can go up and down, not just up if we used MinHeight (due to the MAX).
		
		local laObjects[1], ;
			lnObjects, ;
			lnHeight, ;
			lnI, ;
			loObject
		with This
			lnObjects = alines(laObjects, .cObject1Name, 4, ',')
			lnHeight  = -1
			for lnI = 1 to lnObjects
				loObject = evaluate('.Parent.' + laObjects[lnI])
				lnHeight = max(lnHeight, loObject.Height)
			next lnI
			if .nOriginalFormMin = 0
				.nOriginalFormMin = Thisform.MinHeight
			endif .nOriginalFormMin = 0
			Thisform.MinHeight = max(.nOriginalFormMin, Thisform.Height - lnHeight + ;
				.nObject1MinSize)
		endwith
		
	ENDPROC

	PROCEDURE changetheme
		with _Screen.ThemesManager
			This.imgBackground.Picture = .GetMember('SplitterV.Background.Picture')
			This.imgGripper.Picture    = .GetMember('SplitterV.Gripper.Picture')
		endwith
		
	ENDPROC

	PROCEDURE getobject1size
		lparameters toObject
		return toObject.Top + This.nObject1MinSize
		
	ENDPROC

	PROCEDURE getobject2size
		lparameters toObject
		return toObject.Top + toObject.Height - This.nObject2MinSize - This.Height
		
	ENDPROC

	PROCEDURE getposition
		lparameters tnXCoord, ;
			tnYCoord
		return tnYCoord + This.Top - objtoclient(This, 1)
		
	ENDPROC

	PROCEDURE moveobject1
		lparameters toObject
		with toObject
			.Move(.Left, .Top, .Width, This.Top - .Top)
		endwith
		
	ENDPROC

	PROCEDURE moveobject2
		lparameters toObject
		with toObject
			.Move(.Left, This.Top + This.Height - 2, .Width, ;
				max(.Height + .Top - This.Top - This.Height + 2, 0))
		endwith
		
	ENDPROC

	PROCEDURE setposition
		lparameters tnPosition
		This.Top = tnPosition
		
	ENDPROC

	PROCEDURE _pemeditor_moved		&& Design-time resize event
		*==============================================================================
		* Method:			_PEMEditor_Moved
		* Purpose:			Design-time resize event
		* Author:			Doug Hennig
		* Last revision:	11/11/2010
		* Parameters:		none
		* Returns:			none
		* Environment in:	none
		* Environment out:	none
		*==============================================================================
		
		local loThis, ;
			laObjects[1], ;
			lnObjects, ;
			lnI, ;
			loObject, ;
			lnTop
		loThis = This
		with loThis
			lnObjects = alines(laObjects, .cObject1Name, 4, ',')
			for lnI = 1 to lnObjects
				loObject = evaluate('.Parent.' + laObjects[lnI])
				loObject.Height = .Top - loObject.Top
			next lnI
			lnObjects = alines(laObjects, .cObject2Name, 4, ',')
			for lnI = 1 to lnObjects
				loObject = evaluate('.Parent.' + laObjects[lnI])
				lnTop    = loObject.Top
				loObject.Top    = .Top + .Height
				loObject.Height = loObject.Height- (loObject.Top - lnTop)
			next lnI
		endwith
		
	ENDPROC

ENDDEFINE
